@@ -3,6 +3,9 @@
 
     }
 
+    /**
+     * initialize method.
+     */
     public Bishop(int x, int y, String color) {
         this.setCoordinatesX(x);
         this.setCoordinatesY(y);
@@ -21,7 +24,7 @@
 
     @Override
     public boolean canMove(Board board, int x, int y) {
-        /*if (!board.validate(x, y)) {
+        if (!board.validate(x, y)) {
             return false;
         }
         if (getCoordinatesX() == x && getCoordinatesY() == y) {
@@ -30,15 +33,19 @@
         if (!(Math.abs(getCoordinatesX() - x) == Math.abs(getCoordinatesY() - y))) {
             return false;
         }
-        int directionX = (getCoordinatesX() - x) / Math.abs(getCoordinatesX() - x);
-        int directionY = (getCoordinatesY() - y) / Math.abs(getCoordinatesY() - y);
-        for (int currentX = getCoordinatesX() + directionX, currentY = getCoordinatesY() + directionY;
-             currentX != x && currentY != y; currentX += directionX, currentY += directionY) {
+        int directionX = getCoordinatesX() < x ? 1 : -1;
+        int directionY = getCoordinatesY() < y ? 1 : -1;
+        for (int currentX = getCoordinatesX() + directionX,
+             currentY = getCoordinatesY() + directionY;
+             !(currentX == x && currentY == y); currentX += directionX, currentY += directionY) {
             if (board.getAt(currentX, currentY) != null) {
                 return false;
             }
         }
-        return !board.getAt(x, y).getColor().equals(this.getColor());*/
-        return false;
+        Piece piece = board.getAt(x, y);
+        if (piece != null) {
+            return !piece.getColor().equals(this.getColor());
+        }
+        return true;
     }
 }
