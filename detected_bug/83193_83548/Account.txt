@@ -1,113 +1,129 @@
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by CCNE on 03/12/2020.
- */
-public abstract class Account {
-    private long accountNumber;
-    private double balance;
-    protected List<Transaction> transactionList;
-    public static final String CHECKING = "CHECKING";
-    public static final String SAVINGS = "SAVINGS";
-
-    /**
-     * javadoc.
-     */
-    public Account() {
-        transactionList = new ArrayList<Transaction>();
-    }
-
-    /**
-     * javadoc.
-     */
-    public Account(long accountNumber, double balance) {
-        this.accountNumber = accountNumber;
-        this.balance = balance;
-        transactionList = new ArrayList<Transaction>();
-    }
-
-    /**
-     * javadoc.
-     */
-    public long getAccountNumber() {
-        return accountNumber;
-    }
-
-    /**
-     * javadoc.
-     */
-    public double getBalance() {
-        return balance;
-    }
-
-    /**
-     * javadoc.
-     */
-    public abstract void deposit(double number);
-
-    /**
-     * javadoc.
-     */
-    public abstract void withdraw(double number);
-
-    /**
-     * javadoc.
-     */
-    public void doDepositing(double number) throws BankException {
-        if (number < 0) {
-            throw new InvalidFundingAmountException(number);
-        } else {
-            balance += number;
-        }
-    }
-
-    /**
-     * javadoc.
-     */
-    public void doWithdrawing(double number) throws BankException {
-        if (number < 0) {
-            throw new InvalidFundingAmountException(number);
-        } else if (number > balance) {
-            throw new InsufficientFundsException(number);
-        } else {
-            balance -= number;
-        }
-    }
-
-    /**
-     * javadoc.
-     */
-    public void addTransaction(Transaction transaction) {
-        transactionList.add(transaction);
-    }
-
-    /**
-     * javadoc.
-     */
-    public String getTransactionHistory() {
-        String ret = "Lịch sử giao dịch của tài khoản " + accountNumber + ":\n";
-        for (int i = 0; i < transactionList.size(); ++i) {
-            Transaction transaction = transactionList.get(i);
-            ret += transaction.getTransactionSummary();
-            if (i < transactionList.size() - 1) {
-                ret += "\n";
-            }
-        }
-        return ret;
-    }
-
-
-    /**
-     * javadoc.
-     */
-    public boolean equals(Object obj) {
-        if (obj.getClass() != this.getClass()) {
-            return false;
-        }
-        Account other = (Account) obj;
-        return (other.getAccountNumber() == this.getAccountNumber());
-    }
-}
-
+import java.util.ArrayList;
+import java.util.List;
+
+public abstract class Account {
+    public static final String CHECKING = "CHECKING";
+    public static final String SAVINGS = "SAVINGS";
+    protected long accountNumber;
+    protected double balance;
+    protected List<Transaction> transactionList = new ArrayList<>();
+
+    /**
+     * Yes.
+     */
+    public Account() {
+
+    }
+
+    /**
+     * Yes.
+     */
+    public Account(long accountNumber, double balance) {
+        this.accountNumber = accountNumber;
+        this.balance = balance;
+    }
+
+    /**
+     * Yes.
+     */
+    public long getAccountNumber() {
+        return accountNumber;
+    }
+
+    /**
+     * Yes.
+     */
+    public double getBalance() {
+        return balance;
+    }
+
+    /**
+     * Yes.
+     */
+    public void doWithdrawing(double money) throws BankException {
+        if (money < 0) {
+            throw new InvalidFundingAmountException(money);
+        } else if (money > balance) {
+            throw new InsufficientFundsException(money);
+        }
+        if (this instanceof SavingsAccount) {
+            if (money > 1000) {
+                throw new InvalidFundingAmountException(money);
+            } else if (balance - money < 5000) {
+                throw new InsufficientFundsException(money);
+            }
+        }
+        Transaction transaction;
+        if (this instanceof CheckingAccount) {
+            transaction = new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, money,
+                    balance, balance - money);
+        } else {
+            transaction = new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, money,
+                    balance, balance - money);
+        }
+        transactionList.add(transaction);
+        balance -= money;
+    }
+
+    /**
+     * Yes.
+     */
+    public void doDepositing(double money) throws BankException {
+        if (money < 0) {
+            throw new InvalidFundingAmountException(money);
+        }
+        Transaction transaction;
+        if (this instanceof CheckingAccount) {
+            transaction = new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, money,
+                    balance, balance + money);
+        } else {
+            transaction = new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, money,
+                    balance, balance + money);
+        }
+        transactionList.add(transaction);
+        balance += money;
+    }
+
+    /**
+     * Yes.
+     */
+    public abstract void withdraw(double x);
+
+    /**
+     * Yes.
+     */
+    public abstract void deposit(double x);
+
+    /**
+     * Yes.
+     */
+    public void addTransaction(Transaction a) {
+        transactionList.add(a);
+    }
+
+    /**
+     * Yes.
+     */
+    public String getTransactionHistory() {
+        String s = "Lịch sử giao dịch của tài khoản "
+                + accountNumber
+                + ":";
+        for (Transaction transaction : transactionList) {
+            s = s
+                    + "\n"
+                    + transaction.getTransactionSummary();
+        }
+        return s;
+    }
+
+    /**
+     * Yes.
+     */
+    public boolean equals(Object obj) {
+        if (this.accountNumber == ((Account) obj).accountNumber) {
+            return true;
+        }
+        return false;
+    }
+}
  
\ No newline at end of file
