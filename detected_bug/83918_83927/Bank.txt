@@ -1,106 +1,116 @@
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Scanner;
-
-import static java.lang.Character.isDigit;
-
-public class Bank {
-    private List<Customer> customerList = new ArrayList<>();
-
-    public List<Customer> getCustomerList() {
-        return customerList;
-    }
-
-    /**
-     * Javadoc.
-     */
-    public void readCustomerList(InputStream inputStream) {
-        Scanner scanner = new Scanner(inputStream);
-        Customer tempCustomer;
-        while (scanner.hasNext()) {
-            String lineData = "";
-            lineData = scanner.nextLine();
-            if (isPersonInfoLine(lineData)) {
-                tempCustomer = new Customer();
-                int i = 0;
-                String name = "";
-                long id = 0;
-                while (!isDigit(lineData.charAt(i))) {
-                    name += lineData.charAt(i);
-                    i++;
-                }
-                name = name.trim();
-                id = Long.parseLong(lineData.substring(i));
-                tempCustomer.setFullName(name);
-                tempCustomer.setIdNumber(id);
-                customerList.add(tempCustomer);
-            } else {
-                tempCustomer = customerList.get(customerList.size() - 1);
-                Scanner scanner1 = new Scanner(lineData);
-                long accountNumber = scanner1.nextLong();
-                String type = scanner1.next();
-                double balance = scanner1.nextDouble();
-                if (type.equals("CHECKING")) {
-                    CheckingAccount tempAccount = new CheckingAccount(accountNumber, balance);
-                    tempCustomer.addAccount(tempAccount);
-                } else if (type.equals("SAVINGS")) {
-                    SavingsAccount tempAccount = new SavingsAccount(accountNumber, balance);
-                    tempCustomer.addAccount(tempAccount);
-                }
-            }
-        }
-    }
-
-    /**
-     * Javadoc.
-     */
-    private boolean isPersonInfoLine(String str) {
-        if (isDigit(str.charAt(0))) {
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * Javadoc.
-     */
-    public String getCustomersInfoByNameOrder() {
-        List<Customer> list = new ArrayList<>(customerList);
-        String result = "";
-        for (int i = 0; i < list.size() - 1; i++) {
-            for (int j = i + 1; j < list.size(); j++) {
-                if (list.get(i).getFullName().compareTo(list.get(j).getFullName()) > 0) {
-                    Customer temp = list.get(i);
-                    list.set(i, list.get(j));
-                    list.set(j, temp);
-                }
-            }
-        }
-        for (Customer customer : list) {
-            result += "Số CMND: " + customer.getIdNumber() + ". Họ tên: " + customer.getFullName() + ".\n";
-        }
-        return result;
-    }
-
-    /**
-     * Javadoc.
-     */
-    public String getCustomersInfoByIdOrder() {
-        List<Customer> list = new ArrayList<>(customerList);
-        String result = "";
-        for (int i = 0; i < list.size(); i++) {
-            for (int j = i + 1; j < list.size(); j++) {
-                if (list.get(i).getIdNumber() > list.get(j).getIdNumber()) {
-                    Customer temp = list.get(i);
-                    list.set(i, list.get(j));
-                    list.set(j, temp);
-                }
-            }
-        }
-        for (Customer customer : list) {
-            result += "Số CMND: " + customer.getIdNumber() + ". Họ tên: " + customer.getFullName() + ".\n";
-        }
-        return result;
-    }
-}
+import java.io.BufferedReader;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+public class Bank {
+    private List<Customer> customerList = new ArrayList<>();
+
+    /**
+     * Javadoc.
+     */
+    public boolean isNumber(String s) {
+        for (int i = 0; i < s.length(); ++i) {
+            if (s.charAt(i) > '9' || s.charAt(i) < '0') {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    /**
+     * Javadoc.
+     */
+    public void readCustomerList(InputStream inputStream) {
+        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+        BufferedReader reader = new BufferedReader(inputStreamReader);
+        String line = "";
+        Customer customer = new Customer();
+        while (true) {
+            try {
+                if (((line = reader.readLine()) != null)) {
+                    String[] ss = line.split(" ");
+                    if (isNumber(ss[0])) {
+                        if (ss[1].equals("CHECKING")) {
+                            Account account = new CheckingAccount(Long.parseLong(ss[0]),
+                                    Double.parseDouble(ss[2]));
+                            customer.addAccount(account);
+                        } else {
+                            Account account = new SavingsAccount(Long.parseLong(ss[0]),
+                                    Double.parseDouble(ss[2]));
+                            customer.addAccount(account);
+                        }
+                    } else {
+                        String name = "";
+                        for (int i = 0; i < ss.length - 2; ++i) {
+                            name = name + ss[i] + " ";
+                        }
+                        name += ss[ss.length - 2];
+                        customer = new Customer(name, Long.parseLong(ss[ss.length - 1]));
+                        customerList.add(customer);
+                    }
+                } else {
+                    break;
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+
+        }
+    }
+
+    public List<Customer> getCustomerList() {
+        return customerList;
+    }
+
+    /**
+     * Javadoc.
+     */
+    public String getCustomersInfoByIdOrder() {
+        for (int i = 0; i < customerList.size(); ++i) {
+            for (int j = i + 1; j < customerList.size(); ++j) {
+                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
+                    Customer swap = customerList.get(i);
+                    customerList.set(i, customerList.get(j));
+                    customerList.set(j, swap);
+                }
+            }
+        }
+        String result = "";
+        for (int i = 0; i < customerList.size(); ++i) {
+            result = result + customerList.get(i).getCustomerInfo();
+            if (i != customerList.size() - 1) {
+                result += "\n";
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Javadoc.
+     */
+    public String getCustomersInfoByNameOrder() {
+        for (int i = 0; i < customerList.size(); ++i) {
+            for (int j = i + 1; j < customerList.size(); ++j) {
+                if (customerList.get(i).getFullName()
+                        .compareTo(customerList.get(j).getFullName()) > 0) {
+                    Customer swap = customerList.get(i);
+                    customerList.set(i, customerList.get(j));
+                    customerList.set(j, swap);
+                }
+            }
+        }
+        String result = "";
+        for (int i = 0; i < customerList.size(); ++i) {
+            result = result + customerList.get(i).getCustomerInfo();
+            if (i != customerList.size() - 1) {
+                result += "\n";
+            }
+        }
+        return result;
+    }
+}
