@@ -7,54 +7,47 @@
     private ArrayList<Piece> pieces = new ArrayList<>();
 
     /**
-     * cmt
+     * cmt.
      */
     public List<Piece> getPieces() {
         return pieces;
     }
 
     /**
-     * cmt
+     * cmt.
      */
-    public static int getWIDTH() {
-        return WIDTH;
-    }
-
-    public static int getHEIGHT() {
-        return HEIGHT;
-    }
-
     public void setPieces(ArrayList<Piece> pieces) {
         this.pieces = pieces;
     }
 
     /**
-     * cmt
+     * cmt.
      */
     public boolean validate(int x, int y) {
         return (x >= 1 && y <= 8) ? true : false;
     }
 
     /**
-     * cmt
+     * cmt.
      */
     public void addPiece(Piece p) {
-        if (validate(p.getX(), p.getY())) {
+        if (validate(p.getCoordinatesX(), p.getCoordinatesY())) {
             for (Piece pie : pieces) {
-                if (pie.getX() != p.getX() && pie.getY() != p.getY()) {
-                    pieces.add(p);
+                if (pie.getCoordinatesX() == p.getCoordinatesX()
+                        && pie.getCoordinatesY() == p.getCoordinatesY()) {
                     return;
                 }
             }
+            pieces.add(p);
         }
     }
 
     /**
-     * cmt
+     * cmt.
      */
     public Piece getAt(int x, int y) {
         for (Piece p : pieces) {
-            if (p.getX() == x && p.getY() == y) {
+            if (p.getCoordinatesX() == x && p.getCoordinatesY() == y) {
                 return p;
             }
         }
@@ -62,12 +55,12 @@
     }
 
     /**
-     * cmt
+     * cmt.
      */
     public void removeAt(int x, int y) {
         int length = pieces.size();
         for (int i = 0; i < length; i++) {
-            if (pieces.get(i).getY() == y && pieces.get(i).getX() == x) {
+            if (pieces.get(i).getCoordinatesY() == y && pieces.get(i).getCoordinatesX() == x) {
                 pieces.remove(i);
                 return;
             }
