@@ -1,92 +1,104 @@
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Comparator;
-import java.util.Scanner;
-
-/**
- * class Bank.
- */
-public class Bank {
-    private List<Customer> customerList = new ArrayList<>();
-
-    /**
-     * readCustomerList.
-     * @param input .
-     */
-    public void readCustomerList(InputStream input) {
-        Scanner scanner = new Scanner(input);
-
-        while (scanner.hasNextLine()) {
-            String[] words = scanner.nextLine().split(" ");
-
-            if (words.length != 3) {
-                String name = String.join(" ",
-                        Arrays.copyOfRange(words, 0, words.length - 1));
-                long id = Long.parseLong(words[words.length - 1]);
-                customerList.add(new Customer(id, name));
-            } else {
-
-                long accountNumber = Long.parseLong(words[0]);
-                String accountType = words[1];
-                double accountBalance = Double.parseDouble(words[2]);
-
-                if (accountType.equals(Account.CHECKING)) {
-                    customerList.get(customerList.size() - 1)
-                            .addAccount(new CheckingAccount(accountNumber, accountBalance));
-                } else if (accountType.equals(Account.SAVINGS)) {
-                    customerList.get(customerList.size() - 1)
-                            .addAccount(new SavingsAccount(accountNumber, accountBalance));
-                }
-            }
-        }
-    }
-
-    /**
-     * getter.
-     * @return .
-     */
-    public String getCustomersInfoByNameOrder() {
-        List<Customer> nameOrder = new ArrayList<Customer>(customerList);
-        nameOrder.sort(new Comparator<Customer>() {
-            public int compare(Customer o1, Customer o2) {
-                return o1.getFullName().compareTo(o2.getFullName());
-            }
-        });
-
-        StringBuilder result = new StringBuilder();
-        for (Customer customer : nameOrder) {
-            result.append(customer.getCustomerInfo()).append("\n");
-        }
-        return result.toString().trim();
-    }
-
-    /**
-     * getter.
-     * @return .
-     */
-    public String getCustomersInfoByIdOrder() {
-        List<Customer> idOrder = new ArrayList<Customer>(customerList);
-        idOrder.sort(new Comparator<Customer>() {
-            @Override
-            public int compare(Customer o1, Customer o2) {
-                return (int) (o1.getIdNumber() - o2.getIdNumber());
-            }
-        });
-
-        StringBuilder result = new StringBuilder();
-        for (Customer customer : idOrder) {
-            result.append(customer.getCustomerInfo()).append("\n");
-        }
-        return result.toString().trim();
-    }
-
-    /**
-     * getter.
-     * @return .
-     */
-    public List<Customer> getCustomerList() {
-        return customerList;
-    }
-}
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Scanner;
+
+/**
+ * Created by CCNE on 03/12/2020.
+ */
+public class Bank {
+
+    private List<Customer> customerList = new ArrayList<>();
+
+    /**
+     * ok.
+     */
+    public void readCustomerList(InputStream is) {
+        Scanner scanner = new Scanner(is);
+        Customer customer = new Customer();
+        int cnt = 0;
+        while (scanner.hasNext()) {
+            String line = scanner.nextLine();
+
+            if (line.charAt(0) < '0' || line.charAt(0) > '9') {
+                cnt++;
+                if (cnt != 1) {
+                    customerList.add(customer);
+                }
+
+                int length = line.length();
+                long id = Long.parseLong(line.substring(length - 9, length));
+
+                String name = line.substring(0, length - 10);
+                customer = new Customer();
+                customer.setFullName(name);
+                customer.setIdNumber(id);
+
+            } else {
+                String[] tokens = line.split(" ");
+                long stk = Long.parseLong(tokens[0]);
+                String type = tokens[1];
+                double sodu = Double.parseDouble(tokens[2]);
+                Account account;
+                if (type.equals("CHECKING")) {
+                    account = new CheckingAccount(stk, sodu);
+                } else {
+                    account = new SavingsAccount(stk, sodu);
+                }
+                customer.addAccount(account);
+            }
+
+        }
+        customerList.add(customer);
+    }
+
+    /**
+     * ok.
+     */
+    public String getCustomersInfoByNameOrder() {
+        customerList.sort(new Comparator<Customer>() {
+            @Override
+            public int compare(Customer o1, Customer o2) {
+                return o1.getFullName().compareTo(o2.getFullName());
+            }
+        });
+        String res = "";
+        for (Customer customer : customerList) {
+            res += customer.getCustomerInfo() + '\n';
+        }
+        res = res.substring(0, res.length() - 1);
+        return res;
+    }
+
+    /**
+     * ok.
+     */
+    public String getCustomersInfoByIdOrder() {
+        customerList.sort(new Comparator<Customer>() {
+            @Override
+            public int compare(Customer o1, Customer o2) {
+                if (o1.getIdNumber() < o2.getIdNumber()) {
+                    return -1;
+                } else {
+                    return 1;
+                }
+            }
+        });
+        String res = "";
+        for (Customer customer : customerList) {
+            res += customer.getCustomerInfo() + '\n';
+        }
+        res = res.substring(0, res.length() - 1);
+        return res;
+    }
+
+    /**
+     * ok.
+     */
+    public List<Customer> getCustomerList() {
+        return customerList;
+    }
+
+}
+ 
\ No newline at end of file
