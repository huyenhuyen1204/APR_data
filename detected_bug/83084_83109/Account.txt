@@ -7,7 +7,7 @@
 
     private long accountNumber;
     private double balance;
-    private List<Transaction> transactionList = new ArrayList<>();
+    protected List<Transaction> transactionList = new ArrayList<>();
 
     public Account() {
     }
@@ -29,6 +29,9 @@
 
     public abstract void withdraw(double amount);
 
+    /**
+     * javadoc.
+     */
     public void doDepositing(double amount) throws InvalidFundingAmountException {
         if (amount < 0) {
             throw new InvalidFundingAmountException(amount);
@@ -37,7 +40,11 @@
         }
     }
 
-    public void doWithdrawing(double amount) throws InvalidFundingAmountException, InsufficientFundsException {
+    /**
+     * javadoc.
+     */
+    public void doWithdrawing(double amount)
+    throws InvalidFundingAmountException, InsufficientFundsException {
         if (amount < 0) {
             throw new InvalidFundingAmountException(amount);
         } else if (amount > balance) {
@@ -51,6 +58,9 @@
         transactionList.add(transaction);
     }
 
+    /**
+     * javadoc.
+     */
     public String getTransactionHistory() {
         StringBuilder res = new StringBuilder();
         res.append("Lịch sử giao dịch của tài khoản ");
@@ -60,18 +70,22 @@
         for (Transaction transaction : transactionList) {
             res.append(transaction.getTransactionSummary()).append("\n");
         }
+        res.deleteCharAt(res.lastIndexOf("\n"));
         return res.toString();
     }
 
     @Override
     public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
 
         Account account = (Account) o;
 
         return accountNumber == account.accountNumber;
-
     }
 
     @Override
