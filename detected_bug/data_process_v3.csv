Project name,Classname,Line,Bugyy code,Fixed code,Type,Ratio (FL),Bug Type,,Fixed,Context,,Th“?ng kˆ,,
82260,Move,(6-6;5-6),"    private int endY;
","    private int endY;
    private Piece movedPiece;
",INSERT,null,INSERT_VAR,,YES,PACKAGE,,CHANGE_OPERATOR,12,"VD var -1, ?“?i + tha?nh -"
82260,Move,(20-20;17-18),"        this.movedPiece = movedPiece;
","        this.movedPiece = movedPiece;

",INSERT,null,,,NO,,,REPLACE_VAR,44,Thay ?“?i
82260,Move,(25-25;23-32),"     */
","     */
    public Move(int startX, int endX, int startY, int endY, Piece movedPiece, Piece killedPiece) {
        this.startX = startX;
        this.startY = startY;
        this.endX = endX;
        this.endY = endY;
        this.movedPiece = movedPiece;
        this.killedPiece = killedPiece;
    }

",INSERT,null,,,NO,,,INIT_CONSTRUCT,9,"Kh??i ta?i biˆ?n, kh??i ta?o super (1)"
82260,Move,(81-81;88-102),"     */
","     */
    public Piece getMovedPiece() {
        return movedPiece;
    }

    /**
     * Javadoc Comment.
     */
    public void setMovedPiece(Piece movedPiece) {
        this.movedPiece = movedPiece;
    }

    /**
     * Javadoc Comment.
     */
",INSERT,null,,,NO,,,INSERT_VAR,4,
82260,Move,(120-121;118-119),"        String color = movedPiece.getColor();
        char endX = (char) this.endX;
","        String color = movedPiece.getColor();
        char endX = (char) (this.endX - 1);
",REPLACE,0.35355338,CHANGE_OPERATOR,,YES,NO,,INSERT_CODE,44,
83462,Move,(96-97;96-97),"        String a = """";
        int b = movedPiece.getCoordinatesX();
","        String a = """";
        int b = this.endX;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,INSERT_KEY,2,"Break, return"
83462,Move,(114-116;114-117),"        }
        String s = this.getMovedPiece().getColor() + ""-R""
                + a + movedPiece.getCoordinatesY();
","        }
        String s = this.getMovedPiece().getColor() + ""-""
                + this.getMovedPiece().getSymbol()
                + a + this.endY;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,REPLACE_CODE,14,Thay ?“?i 1 ?oa?n code ph??c ta?p
83421,Move,(7-7;5-7),"   private int endY;
","   private int endY;
   private Piece movedPiece;
   private Piece killedPiece;
",INSERT,0.35355338,INSERT_VAR,,YES,PACKAGE,,GEN_STRING,33,"~ test, trim()"
83421,Move,(22-22;21-22),"        this.endY = endY;
","        this.endY = endY;
        this.movedPiece = movedPiece;
",INSERT,0.35355338,INIT_CONSTRUCT,,YES,CLASS,,ADD_CONDITION,11,
83421,Move,(40-40;38-40),"        this.endY = endY;
","        this.endY = endY;
        this.movedPiece = movedPiece;
        this.killedPiece = killedPiece;
",INSERT,null,INIT_CONSTRUCT,,YES,CLASS,,CONVERT,1,Convert char -> String
83421,Piece,(24-24;23-24),"        this.coordinatesX = coordinatesX;
","        this.coordinatesX = coordinatesX;
        this.coordinatesY = coordinatesY;
",INSERT,null,INIT_CONSTRUCT,,YES,CLASS,,REPLACE_METHOD,1,
83421,Piece,(28-29;28-29),"    public int getCoordinatesX() {
        return coordinatesX;
","    public int getCoordinatesX() {
        return this.coordinatesX;
",REPLACE,0.35355338,,,NO,,,CHANGE_PARAMS,1,ÿString fullName = line.substring(tmp); TO
83421,Piece,(36-37;36-37),"    public int getCoordinatesY() {
        return coordinatesY;
","    public int getCoordinatesY() {
        return this.coordinatesY;
",REPLACE,0.35355338,,,NO,,,,,"String fullName = line.substring(0,ÿtmp);"
83421,Piece,(44-45;44-45),"    public String getColor() {
        return color;
","    public String getColor() {
        return this.color;
",REPLACE,0.35355338,,,NO,,,,,
82138,Board,(24-24;24-28),"
","
    /**
     * ham.
     * @param piece ham.
     */
",INSERT,null,,,NO,,,,,
82138,Move,(90-90;90-94),"
","
    /**
     * ham.
     * @return ham.
     */
",INSERT,null,,,NO,,,,,
82138,Move,(92-117;96-113),"        String a = """";
        switch (this.getMovedPiece().getCoordinatesX()) {
            case 1:
                a = ""a"";
                break;
            case 2:
                a = ""b"";
                break;
            case 3:
                a = ""c"";
                break;
            case 4:
                a = ""d"";
                break;
            case 5:
                a = ""e"";
                break;
            case 6:
                a = ""f"";
                break;
            case 7:
                a = ""g"";
                break;
            case 8:
                a = ""h"";
                break;
","        String a = """";
        int b = this.endX;
        if (b == 1) {
            a = ""a"";
        } else if (b == 2) {
            a = ""b"";
        } else if (b == 3) {
            a = ""c"";
        } else if (b == 4) {
            a = ""d"";
        } else if (b == 5) {
            a = ""e"";
        } else if (b == 6) {
            a = ""f"";
        } else if (b == 7) {
            a = ""g"";
        } else if (b == 8) {
            a = ""h"";
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,,,
82138,Move,(118-119;114-117),"        }
        String s = this.getMovedPiece().getColor() + ""-R"" + a + this.getMovedPiece().getCoordinatesY();
","        }
        String s = this.getMovedPiece().getColor() + ""-""
                + this.getMovedPiece().getSymbol()
                + a + this.endY;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,,,
82136,Board,(11-11;11-17),"
","
    /**
     * ham.
     * @param x ham.
     * @param y ham.
     * @return ham.
     */
",INSERT,null,,,NO,,,,,
82136,Board,(18-18;24-28),"
","
    /**
     * ham.
     * @param piece ham.
     */
",INSERT,null,,,NO,,,,,
82136,Board,(22-22;34-40),"
","
    /**
     * ham.
     * @param x ham.
     * @param y ham.
     * @return ham.
     */
",INSERT,null,,,NO,,,,,
82136,Board,(31-31;49-54),"
","
    /**
     * ham.
     * @param x ham.
     * @param y ham.
     */
",INSERT,null,,,NO,,,,,
82136,Move,(11-11;21-22),"        this.endY = endY;
","        this.endY = endY;
        this.movedPiece = movedPiece;
",INSERT,null,INIT_CONSTRUCT,,YES,,,,,
82136,Move,(70-70;90-94),"
","
    /**
     * ham.
     * @return ham.
     */
",INSERT,null,,,NO,,,,,
82136,Move,(71-72;95-117),"    public String toString() {
        String s = """";
","    public String toString() {
        String a = """";
        int b = this.endX;
        if (b == 1) {
            a = ""a"";
        } else if (b == 2) {
            a = ""b"";
        } else if (b == 3) {
            a = ""c"";
        } else if (b == 4) {
            a = ""d"";
        } else if (b == 5) {
            a = ""e"";
        } else if (b == 6) {
            a = ""f"";
        } else if (b == 7) {
            a = ""g"";
        } else if (b == 8) {
            a = ""h"";
        }
        String s = this.getMovedPiece().getColor() + ""-""
                + this.getMovedPiece().getSymbol()
                + a + this.endY;
",REPLACE,0.35355338,LINE,,YES,CLASS,,,,
82831,Board,(20-20;20-26),"
","
    /**
     * Kiem tra vi tri quan co.
     * @param x x.
     * @param y y.
     * @return tra ve dung neu vi tri cho phep.
     */
",INSERT,null,,,NO,,,,,
82831,Move,(8-8;8-16),"
","
    /**
     * khoi tao lop di chuyen.
     * @param startX vi tri bat dau.
     * @param endX vi tri ket thuc x.
     * @param startY vi tri bat dau y.
     * @param endY vi tri ket thuc y.
     * @param movedPiece quan co di chuyen.
     */
",INSERT,null,,,NO,,,,,
82831,Move,(16-16;24-33),"
","
    /**
     * khoi tao lop di chuyen.
     * @param startX vi tri bat dau.
     * @param endX vi tri ket thuc x.
     * @param startY vi tri bat dau y.
     * @param endY vi tri ket thuc y.
     * @param movedPiece quan co di chuyen.
     * @param killedPiece quan co bi giet.
     */
",INSERT,0.35355338,,,NO,,,,,
82831,Move,(74-75;91-92),"    public String toString() {
        char x = (char)(endX + 47 + 48);
","    public String toString() {
        char x = (char) (endX + 47 + 49);
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,NO,,,,
82831,Piece,(5-5;5-10),"
","
    /**
     * khoi tao quan co.
     * @param coordinatesX tai x.
     * @param coordinatesY tai y.
     */
",INSERT,null,,,NO,,,,,
82831,Piece,(11-11;16-22),"
","
    /**
     * khoi tao quan co.
     * @param coordinatesX tai x.
     * @param coordinatesY tai y.
     * @param color mau.
     */
",INSERT,null,,,NO,,,,,
82774,Move,(22-22;21-22),"      this.endX = endX;
","      this.endX = endX;
      this.startY = startY;
",INSERT,0.35355338,INIT_CONSTRUCT,,YES,CLASS,,,,
82774,Move,(39-39;38-39),"      this.endX = endX;
","      this.endX = endX;
      this.startY = startY;
",INSERT,null,INIT_CONSTRUCT,,YES,CLASS,,,,
82094,Piece,(81-81;81-84),"
","
   /**
    * c.
    */
",INSERT,null,,,NO,,,,,
82094,Move,(52-52;52-55),"
","
   /**
    * c.
    */
",INSERT,null,,,NO,,,,,
81431,Move,(48-49;48-49),"      String[] letterPos = {""0"", ""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h""};
      String position = letterPos[movedPiece.getCoordinatesX()] + movedPiece.getCoordinatesY();
","      String[] letterPos = {""0"", ""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h""};
      String position = letterPos[endX] + endY;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,,,
81431,Rook,(37-37;37-38),"      }
","      }

",INSERT,null,,,NO,,,,,
81687,Move,(29-29;29-30),"        this.movedPiece = movedPiece;
","        this.movedPiece = movedPiece;
        this.killedPiece = killedPiece;
",INSERT,null,INIT_CONSTRUCT,,YES,,,,,
81687,Move,(35-37;36-38),"                + ""-"" + movedPiece.getSymbol()
                + (char) (movedPiece.getCoordinatesX() - 1 + 'a')
                + movedPiece.getCoordinatesY();
","                + ""-"" + movedPiece.getSymbol()
                + (char) (endX - 1 + 'a')
                + endY;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,,,
81674,Board,(21-21;21-24),"
","
    /**
     * check validate.
     */
",INSERT,null,,,NO,,,,,
83982,Piece,(25-25;25-48),"
","
    /**
     * method.
     */

    public String algebraicNotation() {
        if (getCoordinatesX() == 1) {
            return ""a"";
        } else if (getCoordinatesX() == 2) {
            return ""b"";
        } else if (getCoordinatesX() == 3) {
            return ""c"";
        } else if (getCoordinatesX() == 4) {
            return ""d"";
        } else if (getCoordinatesX() == 5) {
            return ""e"";
        } else if (getCoordinatesX() == 6) {
            return ""f"";
        } else if (getCoordinatesX() == 7) {
            return ""g"";
        }
        return ""h"";
    }

",INSERT,0.35355338,INSERT_CODE,,YES,,,,,
83982,Piece,(49-72;72-72),"
    /**
     * method.
     */

    public String algebraicNotation() {
       if (getCoordinatesX() == 1) {
           return ""a"";
       } else if (getCoordinatesX() == 2) {
           return ""b"";
       } else if (getCoordinatesX() == 3) {
           return ""c"";
       } else if (getCoordinatesX() == 4) {
           return ""d"";
       } else if (getCoordinatesX() == 5) {
           return ""e"";
       } else if (getCoordinatesX() == 6) {
           return ""f"";
       } else if (getCoordinatesX() == 7) {
           return ""g"";
       }
       return ""h"";
    }

","
",DELETE,0.35355338,DELETE,,YES,,,,,
83982,Move,(35-35;35-36),"    public String toString() {
","    public String toString() {
        Rook rook = new Rook(endX, endY);
",INSERT,null,INIT_OBJECT,,,,,,,
83982,Move,(37-39;38-40),"                + movedPiece.getSymbol()
                + movedPiece.algebraicNotation()
                + movedPiece.getCoordinatesY();
","                + movedPiece.getSymbol()
                + rook.algebraicNotation()
                + rook.getCoordinatesY();
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,,,
83889,Board,(49-49;49-53),"
","
    /**
     * method.
     */

",INSERT,null,,,NO,,,,,
83879,Board,(7-7;7-10),"
","
    /**
     * Method.
     */
",INSERT,null,,,NO,,,,,
83879,Board,(14-14;17-21),"
","
    /**
     * method.
     */

",INSERT,null,,,NO,,,,,
83879,Board,(29-29;36-40),"
","
    /**
     * method.
     */

",INSERT,null,,,NO,,,,,
83879,Board,(38-38;49-53),"
","
    /**
     * method.
     */

",INSERT,null,,,NO,,,,,
83879,Piece,(5-5;5-9),"
","
    /**
     * constructor.
     */

",INSERT,null,,,NO,,,,,
83879,Piece,(11-11;15-19),"
","
    /**
     * constructor.
     */

",INSERT,null,,,NO,,,,,
83879,Piece,(17-17;25-48),"
","
    /**
     * method.
     */

    public String algebraicNotation() {
        if (getCoordinatesX() == 1) {
            return ""a"";
        } else if (getCoordinatesX() == 2) {
            return ""b"";
        } else if (getCoordinatesX() == 3) {
            return ""c"";
        } else if (getCoordinatesX() == 4) {
            return ""d"";
        } else if (getCoordinatesX() == 5) {
            return ""e"";
        } else if (getCoordinatesX() == 6) {
            return ""f"";
        } else if (getCoordinatesX() == 7) {
            return ""g"";
        }
        return ""h"";
    }

",INSERT,null,INSERT_CODE,,YES,,,,,
83879,Piece,(41-60;72-72),"
    public String algebraicNotation() {
       if (getCoordinatesX() == 1) {
           return ""a"";
       } else if (getCoordinatesX() == 2) {
           return ""b"";
       } else if (getCoordinatesX() == 3) {
           return ""c"";
       } else if (getCoordinatesX() == 4) {
           return ""d"";
       } else if (getCoordinatesX() == 5) {
           return ""e"";
       } else if (getCoordinatesX() == 6) {
           return ""f"";
       } else if (getCoordinatesX() == 7) {
           return ""g"";
       }
       return ""h"";
    }

","
",DELETE,0.35355338,DELETE,,YES,,,,,
83879,Move,(27-28;35-37),"    public String toString() {
        return ""'"" + movedPiece.getColor() + ""-""
","    public String toString() {
        Rook rook = new Rook(endX, endY);
        return movedPiece.getColor() + ""-""
",REPLACE,0.35355338,INSERT_OBJECT,,YES,PACKAGE,,,,
83879,Move,(29-31;38-40),"                + movedPiece.getSymbol()
                + movedPiece.algebraicNotation()
                + movedPiece.getCoordinatesY() + ""'"";
","                + movedPiece.getSymbol()
                + rook.algebraicNotation()
                + rook.getCoordinatesY();
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,PACKAGE,,,,
83344,Move,(37-38;37-38),"    public String toString() {
        int width = movedPiece.getCoordinatesX() + 96;
","    public String toString() {
        int col = endX + 96;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,PACKAGE,,,,
83344,Move,(39-40;39-40),"        String mpiece = movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + (char) width + movedPiece.getCoordinatesY();
","        String mpiece = movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + (char) col + endY;
",REPLACE,0.35355338,REPLACE_VAR,,LINE,CLASS,,,,
83324,Board,(9-9;9-12),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Board,(23-23;26-29),"
","
    /**
     * abc.
     */
",INSERT,0.35355338,,,NO,,,,,
83324,Board,(30-30;36-39),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Board,(39-39;48-51),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Piece,(7-7;7-10),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Piece,(13-13;16-19),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Piece,(47-47;53-56),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Move,(10-10;10-13),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Move,(18-18;21-24),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Move,(27-27;33-36),"
","
    /**
     * abc.
     */
",INSERT,null,,,NO,,,,,
83324,Move,(28-32;37-41),"    public String toString() {
        int width = movedPiece.getCoordinatesX() + 96;
        String mPiece = movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + (char) width + movedPiece.getCoordinatesY();
        return null;
","    public String toString() {
        int col = endX + 96;
        String mpiece = movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + (char) col + endY;
        return mpiece;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,,,
82699,Board,(20-20;20-23),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Board,(10-10;10-13),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Board,(17-17;20-23),"
","
    /**
     * .
     **/
",INSERT,0.35355338,,,NO,,,,,
82443,Board,(22-22;30-33),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Board,(30-30;41-44),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Piece,(8-8;8-11),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Piece,(14-14;17-20),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Move,(16-16;19-22),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Move,(25-25;31-34),"
","
    /**
     * .
     **/
",INSERT,null,,,NO,,,,,
82443,Move,(27-29;36-38),"        String s = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        char x = (char) ('a' + (movedPiece.getCoordinatesX() - 1));
        return s + x + movedPiece.getCoordinatesY();
","        String s = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        char x = (char) ('a' + (endX - 1));
        return s + x + endY;
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,CLASS,,,,
83427,Board,(7-7;7-10),"
","
    /**
     * alo.
     */
",INSERT,null,,,NO,,,,,
83427,Board,(14-14;17-21),"
","
    /**
     * alo.
     */

",INSERT,null,,,NO,,,,,
83427,Board,(24-24;27-28),"        }
","        }

",INSERT,null,,,NO,,,,,
83427,Board,(26-26;30-33),"
","
    /**
     * alo.
     */
",INSERT,null,,,NO,,,,,
83427,Board,(35-35;42-46),"
","
    /**
     * alo.
     */

",INSERT,null,,,NO,,,,,
83427,Board,(44-44;55-59),"
","
    /**
     * alo.
     */

",INSERT,null,,,NO,,,,,
83427,Board,(48-48;63-67),"
","
    /**
     * alo.
     */

",INSERT,null,,,NO,,,,,
83154,Board,(11-11;11-12),"    /**....*/
","    /**....*/

",INSERT,null,,,NO,,,,,
83144,Board,(10-10;10-11),"    }
","    }
    /**....*/
",INSERT,null,,,NO,,,,,
83144,Board,(21-21;22-23),"    }
","    }
    /**....*/
",INSERT,null,,,NO,,,,,
83144,Board,(31-31;33-34),"    }
","    }
    /**....*/
",INSERT,null,,,NO,,,,,
83144,Board,(40-40;43-44),"    }
","    }
    /**....*/
",INSERT,null,,,NO,,,,,
83135,Board,(12-12;13-20),"    public void addPiece(Piece piece) {
","    public void addPiece(Piece piece) {
        for (int i = 0; i < pieces.size(); i++) {
            if (pieces.get(i).getCoordinatesX() == piece.getCoordinatesX()
                    && pieces.get(i).getCoordinatesY() == piece.getCoordinatesY()
                    && pieces.get(i).getColor() == piece.getColor()) {
                return;
            }
        }
",INSERT,null,INSERT_CODE,,YES,,,,,
83135,Board,(14-14;22-23),"    }
","    }
    /**....*/
",INSERT,null,,,NO,,,,,
83135,Board,(24-24;33-34),"    }
","    }
    /**....*/
",INSERT,null,,,NO,,,,,
83135,Board,(33-33;43-44),"    }
","    }
    /**....*/
",INSERT,null,,,NO,,,,,
83430,Board,(26-26;29-32),"            }
","            }
            if (count == getPieces().size()) {
                pieces.add(piece);
            }
",INSERT,null,INSERT_CODE,,YES,,,,,
83430,Move,(46-46;46-47),"                cot += ""d"";
","                cot += ""d"";
                break;
",INSERT,null,INSERT_KEY,,YES,NO,,,,
83430,Move,(58-58;59-61),"                break;
","                break;
            default:
                break;
",INSERT,0.35355338,,,,,,,,
83430,Move,(59-60;62-63),"        }
        return ""`"" + movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
","        }
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
",REPLACE,0.35355338,GEN_STRING,,YES,NO,,,,
83381,Board,(27-27;36-50),"    /**
","    /**
     * Compare 2 piece.
     */
    public boolean compareTo(Piece piece1, Piece piece2) {
        if (piece1.getCoordinatesX() == piece2.getCoordinatesX()
        && piece1.getCoordinatesY() == piece2.getCoordinatesY()
        && piece1.getColor().equals(piece2.getColor())) {
            return true;
        } else {
            return false;
        }
    }


    /**
",INSERT,null,INSERT_CODE,,YES,,,,,
83381,Move,(33-36;33-64),"    public String toString() {
        return ""`"" + movedPiece.getColor() + "" - "" + movedPiece.getSymbol() + ""`""
                + "" : Qu?n c? **Xe** tr?ng di chuy?n t?i v? tr? c?t ""
                + this.endY + "" h?ng "" + this.endX + "" t??ng ?ng v?i `(x="" + this.endX + "", y="" + this.endY + "")`"";
","    public String toString() {
        String cot = """";
        switch (endX) {
            case 1:
                cot += ""a"";
                break;
            case 2:
                cot += ""b"";
                break;
            case 3:
                cot += ""c"";
                break;
            case 4:
                cot += ""d"";
                break;
            case 5:
                cot += ""e"";
                break;
            case 6:
                cot += ""f"";
                break;
            case 7:
                cot += ""g"";
                break;
            case 8:
                cot += ""h"";
                break;
            default:
                break;
        }
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + cot + endY;
",REPLACE,0.35355338,REPLACE_CODE,,YES,,,,,
81121,Move,(91-122;91-93),"    public String toString() {
        char signal = 'a';
        switch (movedPiece.getCoordinatesX()) {
            case 1:
                signal = 'a';
                break;
            case 2:
                signal = 'b';
                break;
            case 3:
                signal = 'c';
                break;
            case 4:
                signal = 'd';
                break;
            case 5:
                signal = 'e';
                break;
            case 6:
                signal = 'f';
                break;
            case 7:
                signal = 'g';
                break;
            case 8:
                signal = 'h';
                break;
            default:
                break;
        }
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + signal + movedPiece.getCoordinatesY();
","    public String toString() {
        return movedPiece.getColor() + '-' + movedPiece.getSymbol()
                + (char) (endX - 1 + 'a') + endY;
",REPLACE,0.35355338,REPLACE_CODE,,,,,,,
80825,Board,(20-20;20-25),"
","
    /**
     * Author.
     * Thuan
     * Trinh Van Thuan
     */
",INSERT,0.35355338,,,NO,,,,,
80825,Rook,(15-15;15-20),"
","
    /**
     * Author.
     * Thuan
     * Trinh Van Thuan
     */
",INSERT,null,,,NO,,,,,
80721,Move,(75-75;85-90),"
","
    /**
     * Author.
     * Thuan
     * Trinh Van Thuan
     */
",INSERT,null,,,NO,,,,,
80721,Move,(76-106;91-93),"    public String toString() {
        char signal = 'a';
        switch (movedPiece.getCoordinatesX()) {
            case 1:
                signal = 'a';
                break;
            case 2:
                signal = 'b';
                break;
            case 3:
                signal = 'c';
                break;
            case 4:
                signal = 'd';
                break;
            case 5:
                signal = 'e';
                break;
            case 6:
                signal = 'f';
                break;
            case 7:
                signal = 'g';
                break;
            case 8:
                signal = 'h';
                break;
            default:
                break;
        }
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + signal + movedPiece.getCoordinatesY();
","    public String toString() {
        return movedPiece.getColor() + '-' + movedPiece.getSymbol()
                + (char) (endX - 1 + 'a') + endY;
",REPLACE,0.35355338,REPLACE_CODE,,YES,,,,,
80721,Piece,(30-30;30-35),"
","
    /**
     * Author.
     * Thuan
     * Trinh Van Thuan
     */
",INSERT,null,,,NO,,,,,
80761,Piece,(94-94;94-107),"    }
","    }

    /**
     *  .
     * @param piece .
     * @return .
     */
    public boolean checkPosition(Piece piece) {
        if (piece.getCoordinatesX() >= 1 && piece.getCoordinatesX() <= 8
                && piece.getCoordinatesY() >= 1 && piece.getCoordinatesY() <= 8) {
            return true;
        }
        return false;
    }
",INSERT,0.35355338,,,NO,,,,,
80761,Move,(52-53;52-53),"    public String toString() {
        char character = (char)(movedPiece.getCoordinatesX() + 100);
","    public String toString() {
        char character = (char) (this.getEndX() + 96);
",REPLACE,0.35355338,CHANGE_OPERATOR,,YES,,,,,
80761,Move,(54-55;54-55),"        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + character + movedPiece.getCoordinatesY();
","        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + character + this.getEndY();
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,,,,,
80742,Move,(52-55;52-55),"    public String toString() {
        String character = Integer.toString(movedPiece.getCoordinatesX() + 96);
        return ""`"" + movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + character + movedPiece.getCoordinatesY() + ""`"";
","    public String toString() {
        char character = (char) (this.getEndX() + 96);
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + character + this.getEndY();
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
81415,Board,(49-49;49-50),"                pieces.remove(piece);
","                pieces.remove(piece);
                return;
",INSERT,0.35355338,INSERT_KEY,,YES,,,,,
81412,Move,(53-54;53-54),"        s.append(movedPiece.getSymbol());
        s.append((char) (movedPiece.getCoordinatesX() - 1 + 'a'));
","        s.append(movedPiece.getSymbol());
        s.append((char) (getEndX() - 1 + 'a'));
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
81479,Board,(10-10;10-15),"    }
","    }

    /**
     * gdfgdf.
     * @return
     */
",INSERT,null,,,NO,,,,,
81479,Board,(15-15;20-23),"
","
    /**
     * fasfa.
     */
",INSERT,null,,,NO,,,,,
81479,Board,(31-31;39-43),"
","
    /**
     * gfd.
     * @return
     */
",INSERT,null,,,NO,,,,,
81479,Board,(40-40;52-55),"
","
    /**
     * gdfgdf.
     */
",INSERT,null,,,NO,,,,,
81479,Board,(56-56;71-73),"    }
","    }


",INSERT,null,,,NO,,,,,
81479,Move,(8-8;8-11),"
","
    /**
     * fsdfsd.
     */
",INSERT,null,,,NO,,,,,
81479,Move,(16-16;19-22),"
","
    /**
     * fsdfsd.
     */
",INSERT,null,,,NO,,,,,
81479,Move,(25-25;31-35),"
","
    /**
     * fsdfsd.
     * @return
     */
",INSERT,null,,,NO,,,,,
81479,Move,(26-27;36-40),"    public String toString() {
        return null;
","    public String toString() {
        char codinateX = (char) (this.endX - 1 + 'a');
        char codinateY = (char) (this.endY + '0');
        String origin = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        return origin + codinateX + codinateY;
",REPLACE,0.35355338,GEN_STRING,,YES,,,,,
82190,Move,(37-39;37-39),"        String res = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        res += (char) (endY + 96);
        res += endX;
","        String res = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        res += (char) (endX + 96);
        res += endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
82131,Board,(13-13;13-16),"
","
    /**
     * add.
     */
",INSERT,null,,,NO,,,,,
82131,Board,(26-26;29-32),"
","
    /**
     * valid.
     */
",INSERT,null,,,NO,,,,,
82131,Board,(33-33;39-42),"
","
    /**
     * remove.
     */
",INSERT,0.35355338,,,NO,,,,,
82131,Board,(42-42;51-54),"
","
    /**
     * get.
     */
",INSERT,null,,,NO,,,,,
82131,Piece,(5-5;5-8),"
","
    /**
     * init.
     */
",INSERT,null,,,NO,,,,,
82131,Piece,(11-11;14-17),"
","
    /**
     * init2.
     */
",INSERT,null,,,NO,,,,,
82131,Piece,(18-18;24-28),"    public abstract String getSymbol();
","    public abstract String getSymbol();

    /**
     * canMove.
     */
",INSERT,null,,,NO,,,,,
82131,Piece,(44-44;54-57),"
","
    /**
     * check.
     */
",INSERT,null,,,NO,,,,,
82131,Move,(9-9;9-12),"
","
    /**
     * init.
     */
",INSERT,null,,,NO,,,,,
82131,Move,(17-17;20-23),"
","
    /**
     * move.
     */
",INSERT,null,,,NO,,,,,
82131,Move,(26-26;32-35),"
","
    /**
     * toString.
     */
",INSERT,null,,,NO,,,,,
82131,Move,(28-30;37-39),"        String res = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        res += (char) movedPiece.getCoordinatesY() + 96;
        res += movedPiece.getCoordinatesX();
","        String res = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        res += (char) (endX + 96);
        res += endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
81245,Board,(13-13;10-14),"
","
    /**
     * add piece to board.
     * @param piece piece.
     */
",INSERT,null,,,NO,,,,,
81245,Board,(36-36;32-38),"
","
    /**
     * get piece at x,y.
     * @param x coordinates x.
     * @param y coordinates y.
     * @return piece at coordinates x,y.
     */
",INSERT,null,,,NO,,,,,
81245,Board,(47-47;49-54),"
","
    /**
     * remove piece at x,y.
     * @param x coordinates x.
     * @param y coordinates y.
     */
",INSERT,null,,,NO,,,,,
80745,Move,(50-52;50-51),"        char add1 = (char) (this.endY + '0');
        ans += add + add1;
        return ans;
","        char add1 = (char) (this.endY + '0');
        return ans + add + add1;
",REPLACE,0.35355338,,,NO,,,,,
80732,Move,(48-50;48-50),"        String ans = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        char add = (char) (movedPiece.getCoordinatesX() - 1 + 'a');
        char add1 = (char) (movedPiece.getCoordinatesY() + '0');
","        String ans = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        char add = (char) (this.endX - 1 + 'a');
        char add1 = (char) (this.endY + '0');
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
80732,Rook,(27-27;27-30),"    public boolean canMove(Board board, int x, int y) {
","    public boolean canMove(Board board, int x, int y) {
        if (this.getCoordinatesX() != x && this.getCoordinatesY() != y) {
            return false;
        }
",INSERT,null,ADD_CONDITION,,YES,,,,,
80723,Board,(11-11;14-18),"
","
    /**
     *  .
     * @param newPiece .
     */
",INSERT,0.35355338,,,NO,,,,,
80723,Board,(18-18;25-31),"
","
    /**
     *  .
     * @param x .
     * @param y .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Board,(25-25;38-43),"
","
    /**
     *  .
     * @param x .
     * @param y .
     */
",INSERT,null,,,NO,,,,,
80723,Board,(34-34;52-56),"
","
    /**
     *  .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Board,(38-38;60-64),"
","
    /**
     *  .
     * @param pieces .
     */
",INSERT,null,,,NO,,,,,
80723,Board,(42-42;68-74),"
","
    /**
     *  .
     * @param x .
     * @param y .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(5-5;5-10),"
","
    /**
     *  .
     * @param coordinatesX .
     * @param coordinatesY .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(11-11;16-22),"
","
    /**
     *  .
     * @param coordinatesX .
     * @param coordinatesY .
     * @param color .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(17-17;28-32),"
","
    /**
     *  .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(21-21;36-40),"
","
    /**
     *  .
     * @param coordinatesX .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(25-25;44-48),"
","
    /**
     *  .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(29-29;52-56),"
","
    /**
     *  .
     * @param coordinatesY .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(33-33;60-64),"
","
    /**
     *  .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Piece,(37-37;68-72),"
","
    /**
     *  .
     * @param color .
     */
",INSERT,null,,,NO,,,,,
80723,Move,(8-8;8-16),"
","
    /**
     *  .
     * @param startX .
     * @param endX .
     * @param startY .
     * @param endY .
     * @param movedPiece .
     */
",INSERT,null,,,NO,,,,,
80723,Move,(16-16;24-33),"
","
    /**
     *  .
     * @param startX .
     * @param endX .
     * @param startY .
     * @param endY .
     * @param movedPiece .
     * @param killedPiece .
     */
",INSERT,null,,,NO,,,,,
80723,Move,(25-25;42-46),"
","
    /**
     *  .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Move,(27-29;48-50),"        String ans = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        char add = (char) (movedPiece.getCoordinatesX() - 1 + 'a');
        char add1 = (char) (movedPiece.getCoordinatesY() + '0');
","        String ans = movedPiece.getColor() + ""-"" + movedPiece.getSymbol();
        char add = (char) (this.endX - 1 + 'a');
        char add1 = (char) (this.endY + '0');
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
80723,Move,(32-32;53-57),"
","
    /**
     *  .
     * @return .
     */
",INSERT,null,,,NO,,,,,
80723,Rook,(5-5;10-16),"
","
    /**
     *  .
     * @param coordinatesX .
     * @param coordinatesY .
     * @param color .
     */
",INSERT,null,,,NO,,,,,
84009,Move,(120-122;120-122),"    public String toString() {
        char a = (char) (endX + 96);
        String s = String.valueOf(a);
","    public String toString() {
        char init = (char) (endX + 96);
        String s = String.valueOf(init);
",REPLACE,0.35355338,,,NO,,,,,
84009,Move,(123-124;123-124),"        s += String.valueOf(endY);
        return movedPiece.getColor() + "" "" + movedPiece.getSymbol() + s;
","        s += String.valueOf(endY);
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + s;
",REPLACE,0.35355338,,,NO,,,,,
80716,Board,(19-19;19-23),"
","
    /**
     * cmt.
     *
     */
",INSERT,null,,,NO,,,,,
81357,Board,(24-24;24-27),"
","
    /**
     * Add piece to list.
     */
",INSERT,null,,,NO,,,,,
81356,Move,(9-9;9-12),"
","
    /**
     * Move.
     */
",INSERT,null,,,NO,,,,,
81356,Move,(17-17;20-23),"
","
    /**
     * Move.
     */
",INSERT,0.35355338,,,NO,,,,,
81356,Move,(76-77;82-83),"    public String toString() {
        String endXinString = String.valueOf((char) (endX + 95));
","    public String toString() {
        String endXinString = String.valueOf((char) (endX + 96));
",REPLACE,0.35355338,CHANGE_OPERATOR,,YES,,,,,
80776,Move,(0-0;0-2),,"import java.nio.channels.Pipe;

",INSERT,0.35355338,,,NO,,,,,
80776,Move,(84-85;86-87),"        String indexX = null;
        switch (movedPiece.getCoordinatesX()) {
","        String indexX = null;
        switch (this.getEndX()) {
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
80776,Move,(109-109;111-112),"                break;
","                break;
            default:
",INSERT,null,,,NO,,,,,
80776,Move,(110-112;113-115),"        }
        return ""`"" + movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + indexX
                + String.valueOf(movedPiece.getCoordinatesY()) + ""`"";
","        }
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + indexX
                + String.valueOf(this.getEndY());
",REPLACE,0.35355338,REPLACE_VAR,,YES,,,,,
80776,Move,(113-113;116-117),"    }
","    }

",INSERT,null,,,NO,,,,,
80776,Piece,(0-0;0-1),,"
",INSERT,null,,,NO,,,,,
80776,Piece,(8-8;9-16),"     */
","     */
    public Piece() {
    }


    /**
     * phuong thuc khoi tao.
     */
",INSERT,null,,,NO,,,,,
80770,Move,(84-93;86-112),"        String indexX = null;
        switch (movedPiece.getCoordinatesX()) {
            case 1 : indexX = ""a""; break;
            case 2 : indexX = ""b""; break;
            case 3 : indexX = ""c""; break;
            case 4 : indexX = ""d""; break;
            case 5 : indexX = ""e""; break;
            case 6 : indexX = ""f""; break;
            case 7 : indexX = ""g""; break;
            case 8 : indexX = ""h""; break;
","        String indexX = null;
        switch (this.getEndX()) {
            case 1 :
                indexX = ""a"";
                break;
            case 2 :
                indexX = ""b"";
                break;
            case 3 :
                indexX = ""c"";
                break;
            case 4 :
                indexX = ""d"";
                break;
            case 5 :
                indexX = ""e"";
                break;
            case 6 :
                indexX = ""f"";
                break;
            case 7 :
                indexX = ""g"";
                break;
            case 8 :
                indexX = ""h"";
                break;
            default:
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
80770,Move,(94-95;113-115),"        }
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + indexX + movedPiece.getCoordinatesY();
","        }
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + indexX
                + String.valueOf(this.getEndY());
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
80770,Move,(96-96;116-117),"    }
","    }

",INSERT,null,,,NO,,,,,
81171,Move,(36-37;36-37),"        return movedPiece.getColor() + '-' + movedPiece.getSymbol()
                + (char) (movedPiece.getCoordinatesX() - 1 + 'a') + movedPiece.getCoordinatesY();
","        return movedPiece.getColor() + '-' + movedPiece.getSymbol()
                + (char) (endX - 1 + 'a') + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
80699,Rook,(41-41;41-42),"            if (destY < thisY) {
","            if (destY < thisY) {
                thisY--;
",INSERT,null,INSERT_CODE,,YES,,,,,
82765,Board,(7-7;7-8),"
","
    /** Add piece into the board. */
",INSERT,null,,,NO,,,,,
82765,Board,(13-13;14-15),"
","
    /** Check validate position. */
",INSERT,null,,,NO,,,,,
82765,Board,(17-17;19-20),"
","
    /** Remove piece at position (x, y) from the board. */
",INSERT,0.35355338,,,NO,,,,,
82763,Board,(11-11;14-15),"
","
    /** Check validate position. */
",INSERT,null,,,NO,,,,,
82763,Board,(15-15;19-20),"
","
    /** Remove piece at position (x, y) from the board. */
",INSERT,null,,,NO,,,,,
82763,Board,(20-20;25-26),"
","
    /** Get piece at position x, y. */
",INSERT,null,,,NO,,,,,
82758,Piece,(5-5;5-6),"
","
    /** Constructor. */
",INSERT,null,,,NO,,,,,
82758,Piece,(11-11;12-13),"
","
    /** Constructor. */
",INSERT,null,,,NO,,,,,
82758,Piece,(44-44;46-47),"
","
    /** Check valid position. */
",INSERT,null,,,NO,,,,,
82758,Move,(8-8;8-9),"
","
    /** Constructor. */
",INSERT,null,,,NO,,,,,
82758,Move,(17-17;18-19),"
","
    /** Constructor. */
",INSERT,null,,,NO,,,,,
82758,Move,(26-27;28-29),"        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + (""a"" + (endX - 1)).toString() + endY;
","        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol()
                + (char) ('a' + (endX - 1)) + endY;
",REPLACE,0.35355338,CONVERT,,YES,,,,,
81734,Move,(34-35;34-35),"    public String toString() {
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + columns[endY] + endX;
","    public String toString() {
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + columns[endX] + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
81717,Board,(11-11;11-14),"
","
    /**
     * add a new piece to the board.
     */
",INSERT,0.35355338,,,NO,,,,,
81717,Board,(25-25;28-31),"
","
    /**
     * return the piece at given position.
     */
",INSERT,null,,,NO,,,,,
81717,Board,(38-38;44-47),"
","
    /**
     * remove the piece at given position.
     */
",INSERT,null,,,NO,,,,,
81717,Piece,(9-9;9-12),"
","
    /**
     * initialize method.
     */
",INSERT,null,,,NO,,,,,
81717,Piece,(15-15;18-21),"
","
    /**
     * initialize method.
     */
",INSERT,null,,,NO,,,,,
81717,Move,(17-17;20-23),"
","
    /**
     * initialize method.
     */
",INSERT,null,,,NO,,,,,
81717,Move,(28-29;34-35),"    public String toString() {
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + columns[endY] + endX;
","    public String toString() {
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + columns[endX] + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
81717,Bishop,(5-5;5-8),"
","
    /**
     * initialize method.
     */
",INSERT,null,,,NO,,,,,
81831,Board,(80-80;67-85),"    }
","    }

    /**
     * Tra ve false neu o co do da co quan co khac.
     * @param x q?e
     * @param y q?e
     * @return q?e
     */
    public boolean locationPlaced(int x, int y) {
        for (int i = 0; i < pieces.size(); i++) {
            if (pieces.get(i).getCoordinatesX() == x
                    && pieces.get(i).getCoordinatesY() == y) {
                return false;
            }
        }
        return true;
    }


",INSERT,null,INSERT_CODE,,YES,,,,,
81815,Board,(75-75;67-85),"    }
","    }

    /**
     * Tra ve false neu o co do da co quan co khac.
     * @param x q?e
     * @param y q?e
     * @return q?e
     */
    public boolean locationPlaced(int x, int y) {
        for (int i = 0; i < pieces.size(); i++) {
            if (pieces.get(i).getCoordinatesX() == x
                    && pieces.get(i).getCoordinatesY() == y) {
                return false;
            }
        }
        return true;
    }


",INSERT,null,INSERT_CODE,,YES,,,,,
84513,Board,(11-11;11-15),"
","
    /**
     * to add pieces.
     * @param piece  dfs
     */
",INSERT,null,,,NO,,,,,
84513,Board,(18-18;22-28),"
","
    /**
     *  to check valid place in board.
     * @param x fd
     * @param y df
     * @return df
     */
",INSERT,null,,,NO,,,,,
84513,Board,(25-25;35-40),"
","
    /**
     * remove chess at x, y.
     * @param x df
     * @param y df
     */
",INSERT,null,,,NO,,,,,
84513,Board,(29-29;44-50),"
","
    /**
     * sd.
     * @param x sd
     * @param y sd
     * @return piece at x, y.
     */
",INSERT,null,,,NO,,,,,
84513,Piece,(9-9;9-14),"
","
    /**
     * ham khoi tao 2 tham so.
     * @param coordinatesX df
     * @param coordinatesY df
     */
",INSERT,null,,,NO,,,,,
84513,Piece,(14-14;19-25),"
","
    /**
     * ham khoi tao 3 tham so.
     * @param coordinatesX sd
     * @param coordinatesY df
     * @param color df
     */
",INSERT,null,,,NO,,,,,
84513,Move,(13-13;13-21),"
","
    /**
     * ham khoi tao 5 tham so.
     * @param startX df
     * @param startY df
     * @param endX df
     * @param endY df
     * @param movedPiece df
     */
",INSERT,null,,,NO,,,,,
84513,Move,(21-21;29-38),"
","
    /**
     * ham khoi tao 6 tham so.
     * @param startX df
     * @param startY df
     * @param endX df
     * @param endY df
     * @param movedPiece df
     * @param killedPiece df
     */
",INSERT,null,,,NO,,,,,
84513,Move,(32-33;49-50),"    public String toString() {
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + column[endX] + endY;
","    public String toString() {
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + column[endX - 1] + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
,,,,,,,CHANGE_OPERATOR,,YES,,,,,
81732,Board,(65-65;67-85),"    }
","    }

    /**
     * Tra ve false neu o co do da co quan co khac.
     * @param x q?e
     * @param y q?e
     * @return q?e
     */
    public boolean locationPlaced(int x, int y) {
        for (int i = 0; i < pieces.size(); i++) {
            if (pieces.get(i).getCoordinatesX() == x
                    && pieces.get(i).getCoordinatesY() == y) {
                return false;
            }
        }
        return true;
    }


",INSERT,null,INSERT_CODE,,YES,,,,,
81711,Board,(24-24;35-50),"
","
    /**
     * remove chess at x, y.
     * @param x df
     * @param y df
     */
    public void removeAt(int x, int y) {
        pieces.remove(getAt(x, y));
    }

    /**
     * sd.
     * @param x sd
     * @param y sd
     * @return piece at x, y.
     */
",INSERT,null,,,NO,,,,,
81711,Board,(49-49;67-85),"    }
","    }

    /**
     * Tra ve false neu o co do da co quan co khac.
     * @param x q?e
     * @param y q?e
     * @return q?e
     */
    public boolean locationPlaced(int x, int y) {
        for (int i = 0; i < pieces.size(); i++) {
            if (pieces.get(i).getCoordinatesX() == x
                    && pieces.get(i).getCoordinatesY() == y) {
                return false;
            }
        }
        return true;
    }


",INSERT,null,INSERT_CODE,,YES,,,,,
81696,Board,(15-15;15-21),"
","
    /**
     * check whether coordinate is valid.
     * @param x coordinatesX
     * @param y coordinatesY
     * @return this coordinate is valid or not
     */
",INSERT,null,,,NO,,,,,
81696,Board,(21-21;27-31),"
","
    /**
     * add new piece.
     * @param piece new piece to add
     */
",INSERT,0.35355338,,,NO,,,,,
81696,Board,(35-35;45-51),"
","
    /**
     * get piece in this coordinate of board.
     * @param x coordinateX
     * @param y coordinateY
     * @return piece in this coordinate
     */
",INSERT,null,,,NO,,,,,
81696,Board,(46-46;62-67),"
","
    /**
     * remove piece in this coordinate of board.
     * @param x coordinateX
     * @param y coordinateY
     */
",INSERT,null,,,NO,,,,,
81696,Piece,(12-12;12-18),"
","
    /**
     * .
     * @param coordinatesX int
     * @param coordinatesY int
     * @param color String
     */
",INSERT,null,,,NO,,,,,
81696,Piece,(42-42;48-52),"
","
    /**
     * .
     * @param color String
     */
",INSERT,null,,,NO,,,,,
81696,Move,(12-12;12-20),"
","
    /**
     * when there isn't killedPiece.
     * @param startX coordinate
     * @param startY coordinate
     * @param endX coordinate
     * @param endY coordinate
     * @param movedPiece piece
     */
",INSERT,null,,,NO,,,,,
81696,Move,(27-29;35-38),"    public String toString() {
        char column = (char)(endY - 1 + (int)'a');
        return String.format(""%s-%s%c%d"", movedPiece.getColor(), movedPiece.getSymbol(), column, endX);
","    public String toString() {
        char column = (char) (endX - 1 + (int) 'a');
        return String.format(""%s-%s%c%d"",
                movedPiece.getColor(), movedPiece.getSymbol(), column, endY);
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
82775,Board,(23-23;23-27),"
","
    /**
     * Th?m cbdj.
     * @param piece quan.
     */
",INSERT,0.35355338,,,NO,,,,,
81733,Move,(96-97;96-97),"                + ""-"" + movedPiece.getSymbol()
                + symbolAtX[endX]
","                + ""-"" + movedPiece.getSymbol()
                + symbolAtX[endX - 1]
",REPLACE,0.35355338,CHANGE_OPERATOR,,YES,CLASS,,,,
81733,Bishop,(18-18;18-22),"        boolean check = true;
","        boolean check = true;
        int dx = 0;
        int dy = 0;
        int ox = this.getCoordinatesX();
        int oy = this.getCoordinatesY();
",INSERT,0.35355338,INSERT_CODE,,YES,,,,,
81708,Move,(96-98;96-98),"                + ""-"" + movedPiece.getSymbol()
                + symbolAtX[movedPiece.getCoordinatesX()]
                + movedPiece.getCoordinatesY();
","                + ""-"" + movedPiece.getSymbol()
                + symbolAtX[endX - 1]
                + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
,,,,,,,CHANGE_OPERATOR,,YES,,,,,
81688,Board,(7-7;7-13),"
","
    /**
     * Check vi tri.
     * @param x toa do tai x.
     * @param y toa do tai y.
     * @return check.
     */
",INSERT,null,,,NO,,,,,
81688,Board,(17-17;23-27),"
","
    /**
     * Th?m cbdj.
     * @param piece quan.
     */
",INSERT,null,,,NO,,,,,
81688,Board,(21-21;33-39),"
","
    /**
     * lay piece tai x,y.
     * @param x toa do x.
     * @param y toa do y.
     * @return piece.
     */
",INSERT,null,,,NO,,,,,
81688,Move,(9-9;9-17),"
","
    /**
     * di chuyen.
     * @param startX x bat dau.
     * @param startY y bat dau.
     * @param endX x den.
     * @param endY y den.
     * @param movedPiece quan di chuyen.
     */
",INSERT,null,,,NO,,,,,
81688,Move,(17-17;25-34),"
","
    /**
     * di chuyen.
     * @param startX x bat dau.
     * @param startY y bat dau.
     * @param endX x den.
     * @param endY y den.
     * @param movedPiece quan di chuyen.
     * @param killedPiece quan bi ha.
     */
",INSERT,null,,,NO,,,,,
81688,Move,(79-81;96-98),"                + ""-"" + movedPiece.getSymbol()
                + symbolAtX[movedPiece.getCoordinatesX()]
                + movedPiece.getCoordinatesY();
","                + ""-"" + movedPiece.getSymbol()
                + symbolAtX[endX - 1]
                + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
,,,,,,,CHANGE_OPERATOR,,YES,,,,,
81688,Piece,(5-5;5-10),"
","
    /**
     * khoi tao.
     * @param coordinatesX x.
     * @param coordinatesY y.
     */
",INSERT,null,,,NO,,,,,
81688,Piece,(14-14;14-20),"
","
    /**
     * khoi tao.
     * @param coordinatesX x.
     * @param coordinatesY y.
     * @param color mau.
     */
",INSERT,null,,,NO,,,,,
82707,Board,(11-11;11-16),"
","
    /**
     * ham them quan co vao ban co.
     *
     * @param p la tham so.
     */
",INSERT,0.35355338,,,NO,,,,,
82707,Board,(18-18;23-29),"
","
    /**
     * kiem tra toa do.
     * @param x .
     * @param y .
     * @return .
     */
",INSERT,null,,,NO,,,,,
82707,Board,(23-23;34-39),"
","
    /**
     * xoa quan co.
     * @param x .
     * @param y .
     */
",INSERT,0.35355338,,,NO,,,,,
82707,Board,(30-30;46-52),"
","
    /**
     * lay quan co.
     * @param x .
     * @param y .
     * @return .
     */
",INSERT,null,,,NO,,,,,
81796,Board,(28-28;46-52),"
","
    /**
     * lay quan co.
     * @param x .
     * @param y .
     * @return .
     */
",INSERT,null,,,NO,,,,,
81796,Piece,(5-5;5-10),"
","
    /**
     * ham khoi tao co tham so.
     * @param coordinatesX .
     * @param coordinatesY .
     */
",INSERT,null,,,NO,,,,,
81796,Piece,(15-15;20-26),"
","
    /**
     * ham khoi tao co tham so.
     * @param coordinatesX .
     * @param coordinatesY .
     * @param color .
     */
",INSERT,null,,,NO,,,,,
81796,Move,(8-8;8-16),"
","
    /**
     * ham khoi tao co tham so.
     * @param startX .
     * @param startY .
     * @param endX .
     * @param endY .
     * @param movedPiece .
     */
",INSERT,null,,,NO,,,,,
81796,Move,(16-16;24-33),"
","
    /**
     * ham khoi tao co tham so.
     * @param startX .
     * @param startY .
     * @param endX .
     * @param endY .
     * @param movedPiece .
     * @param killedPiece .
     */
",INSERT,null,,,NO,,,,,
81796,Move,(29-30;46-47),"                + movedPiece.getSymbol()
                + (char) ('a' + endX) + endY;
","                + movedPiece.getSymbol()
                + (char) ('a' + endX - 1) + endY;
",REPLACE,0.35355338,CHANGE_OPERATOR,,YES,,,,,
81746,Move,(29-31;46-47),"                + movedPiece.getSymbol()
                + ('a' + movedPiece.getCoordinatesY())
                + movedPiece.getCoordinatesX();
","                + movedPiece.getSymbol()
                + (char) ('a' + endX - 1) + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
81846,Board,(10-10;10-14),"
","
    /**
     * addPiece.
     * @param piece piece
     */
",INSERT,null,,,NO,,,,,
81846,Board,(21-21;25-31),"
","
    /**
     * remove piece on board.
     * @param x coordinate x
     * @param y coordinate y
     */

",INSERT,null,,,NO,,,,,
81846,Board,(31-31;37-44),"
","
    /**
     * get piece on board.
     * @param x coordinate x
     * @param y coordinate y
     * @return
     */

",INSERT,0.35355338,,,NO,,,,,
81846,Piece,(8-8;8-15),"
","
    /**
     * constructor.
     * @param coordinatesX coordinate x
     * @param coordinatesY coordinate y
     * @param color color
     */

",INSERT,null,,,NO,,,,,
81846,Move,(9-9;9-18),"
","
    /**
     * constructor.
     * @param startX start X
     * @param startY start Y
     * @param endX end X
     * @param endY end Y
     * @param movedPiece movedPiece
     */

",INSERT,null,,,NO,,,,,
81846,Move,(17-17;26-35),"
","
    /**
     * constructor.
     * @param startX start X
     * @param startY start Y
     * @param endX end X
     * @param endY end Y
     * @param movedPiece movedPiece
     * @param killedPiece killedPiece
     */
",INSERT,null,,,NO,,,,,
81846,Move,(26-28;44-51),"
    public String toString(){
        char c = (char) (endX + 'a');
","
    /**
     * to string.
     * @return string
     */

    public String toString() {
        char c = (char) (endX + 'a' - 1);
",REPLACE,0.35355338,CHANGE_OPERATOR,,YES,CLASS,,,,
81846,Bishop,(17-17;17-20),"    public boolean canMove(Board board, int x, int y) {
","    public boolean canMove(Board board, int x, int y) {
        if (board == null) {
            return false;
        }
",INSERT,null,INSERT_CODE,,YES,CLASS,,,,
81841,Board,(23-23;23-29),"
","
    /**
     * check if there is a duplicated piece in the x,y position.
     * @param x x axis of piece
     * @param y y axis of piece
     * @return if the piece is in the list or not
     */
",INSERT,null,,,NO,,,,,
81841,Move,(8-8;8-16),"
","
    /**
     * Move constructer with start,end and moved piece.
     * @param startX startX
     * @param startY startY
     * @param endX endX
     * @param endY endY
     * @param movedPiece moved piece
     */
",INSERT,null,,,NO,,,,,
81841,Move,(16-16;24-33),"
","
    /**
     * Move constructer with start,end, moved piece and killed piece.
     * @param startX startX
     * @param startY startY
     * @param endX endX
     * @param endY endY
     * @param movedPiece movedPiece
     * @param killedPiece killedPiece
     */
",INSERT,0.35355338,,,NO,,,,,
,,,,,,,REPLACE_VAR,,YES,CLASS,,,,
81841,Move,(75-77;92-97),"    public String toString() {
        char c = (char) (endX + 'a');
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + c + movedPiece.getCoordinatesY();
","    public String toString() {
        char c = (char) (endX + 'a' - 1);
        return movedPiece.getColor()
                + ""-"" + movedPiece.getSymbol()
                + c
                + endY;
",REPLACE,0.35355338,CHANGE_OPERATOR,,YES,CLASS,,,,
81841,Piece,(45-45;45-46),"    public abstract String getSymbol();
","    public abstract String getSymbol();

",INSERT,null,,,NO,,,,,
81899,Board,(11-11;11-16),"
","
    /**
     * add.
     *
     * @param piece pi
     */
",INSERT,null,,,NO,,,,,
81899,Board,(26-26;32-38),"
","
    /**
     * remove pi.
     *
     * @param x x
     * @param y y
     */
",INSERT,0.35355338,,,NO,,,,,
81899,Board,(43-43;55-62),"
","
    /**
     * get pi.
     *
     * @param x x
     * @param y y
     * @return pi
     */
",INSERT,null,,,NO,,,,,
81868,Move,(8-8;8-17),"
","
    /**
     * Constructor.
     *
     * @param startX     startX
     * @param startY     startY
     * @param endX       endX
     * @param endY       endY
     * @param movedPiece movedPiece
     */
",INSERT,null,,,NO,,,,,
81868,Move,(70-71;79-81),"    public String toString() {
        return movedPiece.getColor() + ""-"" + movedPiece.getSymbol() + (char) ('h' - 8 + movedPiece.getCoordinatesX()) + movedPiece.getCoordinatesY();
","    public String toString() {
        return movedPiece.getColor() + ""-""
                + movedPiece.getSymbol() + (char) ('h' - 8 + endX) + endY;
",REPLACE,0.35355338,REPLACE_VAR,,YES,CLASS,,,,
81845,Board,(19-19;32-38),"
","
    /**
     * remove pi.
     *
     * @param x x
     * @param y y
     */
",INSERT,null,,,NO,,,,,
81845,Board,(42-42;55-62),"
","
    /**
     * get pi.
     *
     * @param x x
     * @param y y
     * @return pi
     */
",INSERT,null,,,NO,,,,,
82915,SavingsAccount,(18-19;18-19),"      addTransaction(
          new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, amount, initialBalance, getBalance())
","      addTransaction(
          new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, amount, initialBalance, getBalance())
",REPLACE,0.4082483,REPLACE_VAR,,YES,CLASS,,,,
82913,Bank,(14-14;14-18),"
","
  /**
   * aldksfjlaskdf.
   * @param inputStream dklfjasl
   */
",INSERT,0.31622776,,,NO,,,,,
82913,Bank,(50-50;54-55),"    c.forEach(customer -> sb.append(customer.getCustomerInfo()).append('n'));
","    c.forEach(customer -> sb.append(customer.getCustomerInfo()).append('n'));
    sb.deleteCharAt(sb.length() - 1);
",INSERT,null,INSERT_CODE,,YES,,,,,
82913,Customer,(10-10;10-15),"
","
  /**
   * ldkjflkasjf.
   * @param idNumber d
   * @param fullName dk
   */
",INSERT,0.31622776,,,NO,,,,,
82913,Account,(13-13;13-18),"
","
  /**
   * xyz.
   * @param accountNumber xzy
   * @param balance xyz
   */
",INSERT,null,,,NO,,,,,
82913,Account,(19-19;24-27),"
","
  /**
   * xyz.
   */
",INSERT,null,,,NO,,,,,
82913,Account,(35-35;43-48),"
","
  /**
   * xyz.
   * @param amount xzy
   * @throws BankException xdkj
   */
",INSERT,null,,,NO,,,,,
82913,Account,(42-42;55-60),"
","
  /**
   * dkjaldf.
   * @param amount ddf
   * @throws BankException ddd
   */
",INSERT,null,,,NO,,,,,
82913,Account,(56-56;74-78),"
","
  /**
   * kldfjlaskdjfdlk.
   * @return asdlkfjsadkl
   */
",INSERT,null,,,NO,,,,,
82913,Account,(62-62;84-85),"    }
","    }
    builder.deleteCharAt(builder.length() - 1);
",INSERT,null,INSERT_CODE,,YES,,,,,
82913,Transaction,(15-15;15-23),"
","
  /**
   * lkasjflksdjf.
   *
   * @param type           kdjk
   * @param amount         kdjk
   * @param initialBalance kdjk
   * @param finalBalance   kdjk
   */
",INSERT,null,,,NO,,,,,
82913,Transaction,(22-22;30-36),"
","
  /**
   * lksdjflkasjfklj.
   *
   * @param t dkfjk
   * @return lkdjflkaj
   */
",INSERT,null,,,NO,,,,,
82913,Transaction,(37-37;51-56),"
","
  /**
   * kdjflksdjflk.
   *
   * @return kasjflsdak
   */
",INSERT,null,,,NO,,,,,
82913,SavingsAccount,(17-17;17-20),"      doWithdrawing(amount);
","      doWithdrawing(amount);
      addTransaction(
          new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, amount, initialBalance, getBalance())
      );
",INSERT,null,INSERT_CODE,,YES,,,,,
82913,SavingsAccount,(20-23;23-24),"    }
    addTransaction(
        new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, amount, initialBalance, getBalance())
    );
","    }

",REPLACE,0.31622776,,,,,,,,
82913,SavingsAccount,(30-30;31-34),"      doDepositing(amount);
","      doDepositing(amount);
      addTransaction(
          new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, amount, initialBalance, getBalance())
      );
",INSERT,null,INSERT_CODE,,YES,,,,,
82913,SavingsAccount,(33-36;37-37),"    }
    addTransaction(
        new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, amount, initialBalance, getBalance())
    );
","    }
",DELETE,0.31622776,DELETE,,YES,,,,,
82913,CheckingAccount,(11-11;11-14),"      doWithdrawing(amount);
","      doWithdrawing(amount);
      addTransaction(
          new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, amount, initialBalance, getBalance())
      );
",INSERT,null,INSERT_CODE,,YES,,,,,
82913,CheckingAccount,(14-17;17-18),"    }
    addTransaction(
        new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, amount, initialBalance, getBalance())
    );
","    }

",REPLACE,0.31622776,,,,,,,,
82913,CheckingAccount,(24-24;25-28),"      doDepositing(amount);
","      doDepositing(amount);
      addTransaction(
          new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, amount, initialBalance, getBalance())
      );
",INSERT,null,INSERT_CODE,,YES,,,,,
82913,CheckingAccount,(27-30;31-31),"    }
    addTransaction(
        new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, amount, initialBalance, getBalance())
    );
","    }
",DELETE,0.31622776,,,NO,,,,,
83998,Customer,(54-56;54-55),"    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber +
                "". H? t?n: "" + fullName + ""."";
","    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
",REPLACE,1,,,NO,,,,,
84084,Customer,(0-100;0-87),"import java.util.ArrayList;
import java.util.List;

/**
 * class Customer.
 */
public class Customer {

    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    /**
     * constructor.
     */
    public Customer() {

    }

    /**
     * constructor.
     */
    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName;
    }

    /**
     * getter.
     * @return .
     */
    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber
                + "". H? t?n: "" + fullName + ""."";
    }

    /**
     * addAccount.
     * @param account .
     */
    public void addAccount(Account account) {
        accountList.add(account);
    }

    /**
     * removeAccount.
     * @param account .
     */
    public void removeAccount(Account account) {
        accountList.remove(account);
    }

    /**
     * getter.
     * @return .
     */
    public long getIdNumber() {
        return idNumber;
    }

    /**
     * setter.
     * @param idNumber .
     */
    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    /**
     * getter.
     * @return .
     */
    public String getFullName() {
        return fullName;
    }

    /**
     * setter.
     * @param fullName .
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * getter.
     * @return .
     */
    public List<Account> getAccountList() {
        return accountList;
    }

    /**
     * setter.
     * @param accountList .
     */
    public void setAccountList(List<Account> accountList) {
        this.accountList = accountList;
    }
}
","import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 03/12/2020.
 */
public class Customer {

    private long idNumber;
    private String fullName;
    private List<Account> accountList;

    /**
     * ok.
     */
    public Customer() {
        accountList = new ArrayList<>();
    }

    /**
     * ok.
     */
    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName;
        accountList = new ArrayList<>();
    }

    /**
     * ok.
     */
    public void addAccount(Account account) {
        for (Account account1 : accountList) {
            if (account1.equals(account)) {
                return;
            }
        }
        accountList.add(account);
    }

    /**
     * ok.
     */
    public void removeAccount(Account account) {
        for (Account ac : accountList) {
            if (ac.equals(account)) {
                accountList.remove(account);
                return;
            }
        }
    }


    public long getIdNumber() {
        return idNumber;
    }

    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public List<Account> getAccountList() {
        return accountList;
    }

    public void setAccountList(List<Account> accountList) {
        this.accountList = accountList;
    }

    /**
     * ok.
     */
    public String getCustomerInfo() {
        String res = ""S? CMND: "" + this.idNumber;
        res += "". H? t?n: "" + this.fullName + ""."";
        return res;
    }
}
 
",REPLACE,0.42640144,INIT_CONSTRUCT,,YES,CLASS,,,,
84084,Bank,(0-92;0-104),"import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Comparator;
import java.util.Scanner;

/**
 * class Bank.
 */
public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * readCustomerList.
     * @param input .
     */
    public void readCustomerList(InputStream input) {
        Scanner scanner = new Scanner(input);

        while (scanner.hasNextLine()) {
            String[] words = scanner.nextLine().split("" "");

            if (words.length != 3) {
                String name = String.join("" "",
                        Arrays.copyOfRange(words, 0, words.length - 1));
                long id = Long.parseLong(words[words.length - 1]);
                customerList.add(new Customer(id, name));
            } else {

                long accountNumber = Long.parseLong(words[0]);
                String accountType = words[1];
                double accountBalance = Double.parseDouble(words[2]);

                if (accountType.equals(Account.CHECKING)) {
                    customerList.get(customerList.size() - 1)
                            .addAccount(new CheckingAccount(accountNumber, accountBalance));
                } else if (accountType.equals(Account.SAVINGS)) {
                    customerList.get(customerList.size() - 1)
                            .addAccount(new SavingsAccount(accountNumber, accountBalance));
                }
            }
        }
    }

    /**
     * getter.
     * @return .
     */
    public String getCustomersInfoByNameOrder() {
        List<Customer> nameOrder = new ArrayList<Customer>(customerList);
        nameOrder.sort(new Comparator<Customer>() {
            public int compare(Customer o1, Customer o2) {
                return o1.getFullName().compareTo(o2.getFullName());
            }
        });

        StringBuilder result = new StringBuilder();
        for (Customer customer : nameOrder) {
            result.append(customer.getCustomerInfo()).append(""n"");
        }
        return result.toString().trim();
    }

    /**
     * getter.
     * @return .
     */
    public String getCustomersInfoByIdOrder() {
        List<Customer> idOrder = new ArrayList<Customer>(customerList);
        idOrder.sort(new Comparator<Customer>() {
            @Override
            public int compare(Customer o1, Customer o2) {
                return (int) (o1.getIdNumber() - o2.getIdNumber());
            }
        });

        StringBuilder result = new StringBuilder();
        for (Customer customer : idOrder) {
            result.append(customer.getCustomerInfo()).append(""n"");
        }
        return result.toString().trim();
    }

    /**
     * getter.
     * @return .
     */
    public List<Customer> getCustomerList() {
        return customerList;
    }
}
","import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

/**
 * Created by CCNE on 03/12/2020.
 */
public class Bank {

    private List<Customer> customerList = new ArrayList<>();

    /**
     * ok.
     */
    public void readCustomerList(InputStream is) {
        Scanner scanner = new Scanner(is);
        Customer customer = new Customer();
        int cnt = 0;
        while (scanner.hasNext()) {
            String line = scanner.nextLine();

            if (line.charAt(0) < '0' || line.charAt(0) > '9') {
                cnt++;
                if (cnt != 1) {
                    customerList.add(customer);
                }

                int length = line.length();
                long id = Long.parseLong(line.substring(length - 9, length));

                String name = line.substring(0, length - 10);
                customer = new Customer();
                customer.setFullName(name);
                customer.setIdNumber(id);

            } else {
                String[] tokens = line.split("" "");
                long stk = Long.parseLong(tokens[0]);
                String type = tokens[1];
                double sodu = Double.parseDouble(tokens[2]);
                Account account;
                if (type.equals(""CHECKING"")) {
                    account = new CheckingAccount(stk, sodu);
                } else {
                    account = new SavingsAccount(stk, sodu);
                }
                customer.addAccount(account);
            }

        }
        customerList.add(customer);
    }

    /**
     * ok.
     */
    public String getCustomersInfoByNameOrder() {
        customerList.sort(new Comparator<Customer>() {
            @Override
            public int compare(Customer o1, Customer o2) {
                return o1.getFullName().compareTo(o2.getFullName());
            }
        });
        String res = """";
        for (Customer customer : customerList) {
            res += customer.getCustomerInfo() + 'n';
        }
        res = res.substring(0, res.length() - 1);
        return res;
    }

    /**
     * ok.
     */
    public String getCustomersInfoByIdOrder() {
        customerList.sort(new Comparator<Customer>() {
            @Override
            public int compare(Customer o1, Customer o2) {
                if (o1.getIdNumber() < o2.getIdNumber()) {
                    return -1;
                } else {
                    return 1;
                }
            }
        });
        String res = """";
        for (Customer customer : customerList) {
            res += customer.getCustomerInfo() + 'n';
        }
        res = res.substring(0, res.length() - 1);
        return res;
    }

    /**
     * ok.
     */
    public List<Customer> getCustomerList() {
        return customerList;
    }

}
 
",REPLACE,0.42640144,REPLACE_CODE,,,,,,,
83779,Bank,(24-27;24-24),"            if (line.charAt(0) < '0' || line.charAt(0) > '9') {
                int length = line.length();
                long id = Long.parseLong(line.substring(length - 9, length));
                String name = line.substring(0, length - 10);
","            if (line.charAt(0) < '0' || line.charAt(0) > '9') {
",DELETE,0.42640144,DELETE,,YES,,,,,
83779,Bank,(31-31;28-33),"                }
","                }

                int length = line.length();
                long id = Long.parseLong(line.substring(length - 9, length));

                String name = line.substring(0, length - 10);
",INSERT,0.42640144,INSERT_CODE,,YES,,,,,
83779,Bank,(36-37;38-39),"            } else {
                String tokens [] = line.split("" "");
","            } else {
                String[] tokens = line.split("" "");
",REPLACE,0.42640144,,,NO,,,,,
83778,Customer,(32-34;32-34),"    public void addAccount(Account account) {
        for(Account account1: accountList){
            if(account1.equals(account)) {
","    public void addAccount(Account account) {
        for (Account account1 : accountList) {
            if (account1.equals(account)) {
",REPLACE,0.42640144,,,NO,,,,,
83778,Bank,(33-34;35-36),"                customer.setFullName(name);
                customer.setIdNumber(cmnd);
","                customer.setFullName(name);
                customer.setIdNumber(id);
",REPLACE,0.42640144,REPLACE_VAR,,NO,CLASS,,,,
83778,Bank,(36-38;38-40),"            } else {
                String tokens[] = line.split("" "");
                long STK = Long.parseLong(tokens[0]);
","            } else {
                String[] tokens = line.split("" "");
                long stk = Long.parseLong(tokens[0]);
",REPLACE,0.42640144,,,NO,,,,,
83778,Bank,(42-43;44-45),"                if (type.equals(""CHECKING"")) {
                    account = new CheckingAccount(STK, sodu);
","                if (type.equals(""CHECKING"")) {
                    account = new CheckingAccount(stk, sodu);
",REPLACE,0.42640144,,,NO,,,,,
83778,Bank,(44-45;46-47),"                } else {
                    account = new SavingsAccount(STK, sodu);
","                } else {
                    account = new SavingsAccount(stk, sodu);
",REPLACE,0.42640144,,,NO,,,,,
83778,Bank,(82-82;82-84),"                    return -1;
","                    return -1;
                } else {
                    return 1;
",INSERT,null,,,NO,,,,,
84071,Customer,(11-11;5-7),"    private List<Account> accountList = new ArrayList<>();
","    private List<Account> accountList = new ArrayList<>();
    private String fullName = """";
    private long idNumber;
",INSERT,0.2236068,INSERT_VAR,,YES,,,,,
84071,Customer,(25-65;17-17),"        this.fullName = fullName;
    }

    /**
     * getter.
     * @return .
     */
    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber
                + "". H? t?n: "" + fullName + ""."";
    }

    /**
     * addAccount.
     * @param account .
     */
    public void addAccount(Account account) {
        accountList.add(account);
    }

    /**
     * removeAccount.
     * @param account .
     */
    public void removeAccount(Account account) {
        accountList.remove(account);
    }

    /**
     * getter.
     * @return .
     */
    public long getIdNumber() {
        return idNumber;
    }

    /**
     * setter.
     * @param idNumber .
     */
    public void setIdNumber(long idNumber) {
","        this.fullName = fullName;
",DELETE,0.42640144,DELETE,,YES,,,,,
84071,Bank,(0-0;0-4),,"import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
",INSERT,0.42640144,,,NO,,,,,
84071,Bank,(1-1;5-6),"import java.io.InputStream;
","import java.io.InputStream;
import java.io.InputStreamReader;
",INSERT,0.42640144,,,NO,,,,,
84071,Bank,(18-20;15-23),"     */
    public void readCustomerList(InputStream input) {
        Scanner scanner = new Scanner(input);
","     */
    public boolean isNumber(String s) {
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) > '9' || s.charAt(i) < '0') {
                return false;
            }
        }
        return true;
    }
",REPLACE,0.42640144,,,NO,,,,,
84071,Bank,(21-23;24-61),"
        while (scanner.hasNextLine()) {
            String[] words = scanner.nextLine().split("" "");
","
    /**
     * Javadoc.
     */
    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        BufferedReader reader = new BufferedReader(inputStreamReader);
        String line = """";
        Customer customer = new Customer();
        while (true) {
            try {
                if (((line = reader.readLine()) != null)) {
                    String[] ss = line.split("" "");
                    if (isNumber(ss[0])) {
                        if (ss[1].equals(""CHECKING"")) {
                            Account account = new CheckingAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        } else {
                            Account account = new SavingsAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        }
                    } else {
                        String name = """";
                        for (int i = 0; i < ss.length - 2; ++i) {
                            name = name + ss[i] + "" "";
                        }
                        name += ss[ss.length - 2];
                        customer = new Customer(name, Long.parseLong(ss[ss.length - 1]));
                        customerList.add(customer);
                    }
                } else {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
",REPLACE,0.42640144,,,NO,,,,,
84071,Bank,(24-30;62-64),"
            if (words.length != 3) {
                String name = String.join("" "",
                        Arrays.copyOfRange(words, 0, words.length - 1));
                long id = Long.parseLong(words[words.length - 1]);
                customerList.add(new Customer(id, name));
            } else {
","
        }
    }
",REPLACE,0.42640144,,,NO,,,,,
84071,Bank,(31-34;65-68),"
                long accountNumber = Long.parseLong(words[0]);
                String accountType = words[1];
                double accountBalance = Double.parseDouble(words[2]);
","
    public List<Customer> getCustomerList() {
        return customerList;
    }
",REPLACE,0.42640144,,,NO,,,,,
84071,Bank,(35-41;69-79),"
                if (accountType.equals(Account.CHECKING)) {
                    customerList.get(customerList.size() - 1)
                            .addAccount(new CheckingAccount(accountNumber, accountBalance));
                } else if (accountType.equals(Account.SAVINGS)){
                    customerList.get(customerList.size() - 1)
                            .addAccount(new SavingsAccount(accountNumber, accountBalance));
","
    /**
     * Javadoc.
     */
    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
                    Customer swap = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, swap);
",REPLACE,0.42640144,,,NO,,,,,
84071,Bank,(44-44;82-90),"        }
","        }
        String result = """";
        for (int i = 0; i < customerList.size(); ++i) {
            result = result + customerList.get(i).getCustomerInfo();
            if (i != customerList.size() - 1) {
                result += ""n"";
            }
        }
        return result;
",INSERT,0.42640144,,,NO,,,,,
84071,Bank,(51-55;96-104),"    public String getCustomersInfoByNameOrder() {
        List<Customer> nameOrder = new ArrayList<Customer>(customerList);
        nameOrder.sort(new Comparator<Customer>() {
            public int compare(Customer o1, Customer o2) {
                return o1.getFullName().compareTo(o2.getFullName());
","    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getFullName()
                        .compareTo(customerList.get(j).getFullName()) > 0) {
                    Customer swap = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, swap);
                }
",REPLACE,0.42640144,REPLACE_CODE,,NO,,,,,
84071,Bank,(56-61;105-105),"            }
        });

        StringBuilder result = new StringBuilder();
        for (Customer customer : nameOrder) {
            result.append(customer.getCustomerInfo()).append(""n"");
","            }
",DELETE,0.42640144,DELETE,,NO,,,,,
84071,Bank,(62-75;106-111),"        }
        return result.toString().trim();
    }

    /**
     * getter.
     * @return .
     */
    public String getCustomersInfoByIdOrder() {
        List<Customer> idOrder = new ArrayList<Customer>(customerList);
        idOrder.sort(new Comparator<Customer>() {
            @Override
            public int compare(Customer o1, Customer o2) {
                return (int) (o1.getIdNumber() - o2.getIdNumber());
","        }
        String result = """";
        for (int i = 0; i < customerList.size(); ++i) {
            result = result + customerList.get(i).getCustomerInfo();
            if (i != customerList.size() - 1) {
                result += ""n"";
",REPLACE,0.42640144,,,NO,,,,,
84071,Bank,(76-81;112-112),"            }
        });

        StringBuilder result = new StringBuilder();
        for (Customer customer : idOrder) {
            result.append(customer.getCustomerInfo()).append(""n"");
","            }
",DELETE,0.42640144,,,NO,,,,,
84071,Bank,(82-91;113-114),"        }
        return result.toString().trim();
    }

    /**
     * getter.
     * @return .
     */
    public List<Customer> getCustomerList() {
        return customerList;
","        }
        return result;
",REPLACE,0.42640144,,,NO,,,,,
83918,Customer,(0-53;0-71),"import java.util.ArrayList;
import java.util.List;

public class Customer {
    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    public Customer() {
    }

    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName;
    }

    /**
     * Javadoc.
     */
    public String getCustomerInfo() {
        String result = """";
        result += idNumber + "" "" + fullName + 'n';
        return result;
    }

    public void addAccount(Account account) {
        accountList.add(account);
    }

    public void removeAccount(Account account) {
        accountList.removeIf(temp -> temp.equals(account));
    }

    public long getIdNumber() {
        return idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    public List<Account> getAccountList() {
        return accountList;
    }
}
","import java.util.ArrayList;
import java.util.List;

public class Customer {
    private List<Account> accountList = new ArrayList<>();
    private String fullName = """";
    private long idNumber;

    public Customer() {

    }

    /**
     * Javadoc.
     */
    public Customer(String fullName, long idNumber) {
        this.fullName = fullName;
        this.idNumber = idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public long getIdNumber() {
        return idNumber;
    }

    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    public List<Account> getAccountList() {
        return accountList;
    }

    /**
     * Javadoc.
     */
    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
    }

    /**
     * Javadoc.
     */
    public void addAccount(Account a) {
        for (Account account : accountList) {
            if (account.equals(a)) {
                return;
            }
        }
        accountList.add(a);
    }

    /**
     * Javadoc.
     */
    public void removeAccount(Account a) {
        for (int i = 0; i < accountList.size(); ++i) {
            if (accountList.get(i).equals(a)) {
                accountList.remove(i);
                return;
            }
        }
    }
}
",REPLACE,0.6030227,,,NO,,,,,
83918,Bank,(0-106;0-116),"import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import static java.lang.Character.isDigit;

public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    public List<Customer> getCustomerList() {
        return customerList;
    }

    /**
     * Javadoc.
     */
    public void readCustomerList(InputStream inputStream) {
        Scanner scanner = new Scanner(inputStream);
        Customer tempCustomer;
        while (scanner.hasNext()) {
            String lineData = """";
            lineData = scanner.nextLine();
            if (isPersonInfoLine(lineData)) {
                tempCustomer = new Customer();
                int i = 0;
                String name = """";
                long id = 0;
                while (!isDigit(lineData.charAt(i))) {
                    name += lineData.charAt(i);
                    i++;
                }
                name = name.trim();
                id = Long.parseLong(lineData.substring(i));
                tempCustomer.setFullName(name);
                tempCustomer.setIdNumber(id);
                customerList.add(tempCustomer);
            } else {
                tempCustomer = customerList.get(customerList.size() - 1);
                Scanner scanner1 = new Scanner(lineData);
                long accountNumber = scanner1.nextLong();
                String type = scanner1.next();
                double balance = scanner1.nextDouble();
                if (type.equals(""CHECKING"")) {
                    CheckingAccount tempAccount = new CheckingAccount(accountNumber, balance);
                    tempCustomer.addAccount(tempAccount);
                } else if (type.equals(""SAVINGS"")) {
                    SavingsAccount tempAccount = new SavingsAccount(accountNumber, balance);
                    tempCustomer.addAccount(tempAccount);
                }
            }
        }
    }

    /**
     * Javadoc.
     */
    private boolean isPersonInfoLine(String str) {
        if (isDigit(str.charAt(0))) {
            return false;
        }
        return true;
    }

    /**
     * Javadoc.
     */
    public String getCustomersInfoByNameOrder() {
        List<Customer> list = new ArrayList<>(customerList);
        String result = """";
        for (int i = 0; i < list.size() - 1; i++) {
            for (int j = i + 1; j < list.size(); j++) {
                if (list.get(i).getFullName().compareTo(list.get(j).getFullName()) > 0) {
                    Customer temp = list.get(i);
                    list.set(i, list.get(j));
                    list.set(j, temp);
                }
            }
        }
        for (Customer customer : list) {
            result += ""S? CMND: "" + customer.getIdNumber() + "". H? t?n: "" + customer.getFullName() + "".n"";
        }
        return result;
    }

    /**
     * Javadoc.
     */
    public String getCustomersInfoByIdOrder() {
        List<Customer> list = new ArrayList<>(customerList);
        String result = """";
        for (int i = 0; i < list.size(); i++) {
            for (int j = i + 1; j < list.size(); j++) {
                if (list.get(i).getIdNumber() > list.get(j).getIdNumber()) {
                    Customer temp = list.get(i);
                    list.set(i, list.get(j));
                    list.set(j, temp);
                }
            }
        }
        for (Customer customer : list) {
            result += ""S? CMND: "" + customer.getIdNumber() + "". H? t?n: "" + customer.getFullName() + "".n"";
        }
        return result;
    }
}
","import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * Javadoc.
     */
    public boolean isNumber(String s) {
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) > '9' || s.charAt(i) < '0') {
                return false;
            }
        }
        return true;
    }

    /**
     * Javadoc.
     */
    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        BufferedReader reader = new BufferedReader(inputStreamReader);
        String line = """";
        Customer customer = new Customer();
        while (true) {
            try {
                if (((line = reader.readLine()) != null)) {
                    String[] ss = line.split("" "");
                    if (isNumber(ss[0])) {
                        if (ss[1].equals(""CHECKING"")) {
                            Account account = new CheckingAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        } else {
                            Account account = new SavingsAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        }
                    } else {
                        String name = """";
                        for (int i = 0; i < ss.length - 2; ++i) {
                            name = name + ss[i] + "" "";
                        }
                        name += ss[ss.length - 2];
                        customer = new Customer(name, Long.parseLong(ss[ss.length - 1]));
                        customerList.add(customer);
                    }
                } else {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    /**
     * Javadoc.
     */
    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
                    Customer swap = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, swap);
                }
            }
        }
        String result = """";
        for (int i = 0; i < customerList.size(); ++i) {
            result = result + customerList.get(i).getCustomerInfo();
            if (i != customerList.size() - 1) {
                result += ""n"";
            }
        }
        return result;
    }

    /**
     * Javadoc.
     */
    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getFullName()
                        .compareTo(customerList.get(j).getFullName()) > 0) {
                    Customer swap = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, swap);
                }
            }
        }
        String result = """";
        for (int i = 0; i < customerList.size(); ++i) {
            result = result + customerList.get(i).getCustomerInfo();
            if (i != customerList.size() - 1) {
                result += ""n"";
            }
        }
        return result;
    }
}
",REPLACE,0.6030227,,,,,,,,
83918,Account,(0-105;0-109),"import java.util.ArrayList;
import java.util.List;

public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";
    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {

    }

    /**
     * Javadoc.
     */
    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * Javadoc.
     */
    public void doWithdrawing(double x) throws BankException {
        if (x < 0) {
            throw new InvalidFundingAmountException(x);
        } else if (x > balance) {
            throw new InsufficientFundsException(x);
        }
        if (this instanceof SavingsAccount) {
            if (x > 1000) {
                throw new InvalidFundingAmountException(x);
            } else if (balance - x < 5000) {
                throw new InsufficientFundsException(x);
            }
        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, x, balance, balance - x);
        } else {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, x, balance, balance - x);
        }
        transactionList.add(transaction);
        balance -= x;
    }

    /**
     * Javadoc.
     */
    public void doDepositing(double x) throws BankException {
        if (x < 0) {
            throw new InvalidFundingAmountException(x);
        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, x, balance, balance + x);
        } else {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, x, balance, balance + x);
        }
        transactionList.add(transaction);
        balance += x;
    }

    public abstract void withdraw(double money);

    public abstract void deposit(double money);

    /**
     * Javadoc.
     */
    public String getTransactionHistory() {
        String s = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":"";
        for (Transaction transaction : transactionList) {
            s = s + ""n"" + transaction.getTransactionSummary();
        }
        return s;
    }

    /**
     * Javadoc.
     */
    public void addTransaction(Transaction a) {
        transactionList.add(a);
    }

    /**
     * Javadoc.
     */
    public boolean equals(Object o) {
        if (this.accountNumber == ((Account) o).accountNumber) {
            return true;
        }
        return false;
    }
}
","import java.util.ArrayList;
import java.util.List;

public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";
    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {

    }

    /**
     * Javadoc.
     */
    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * Javadoc.
     */
    public void doWithdrawing(double money) throws BankException {
        if (money < 0) {
            throw new InvalidFundingAmountException(money);
        } else if (money > balance) {
            throw new InsufficientFundsException(money);
        }
        if (this instanceof SavingsAccount) {
            if (money > 1000) {
                throw new InvalidFundingAmountException(money);
            } else if (balance - money < 5000) {
                throw new InsufficientFundsException(money);
            }
        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, money,
                    balance, balance - money);
        } else {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, money,
                    balance, balance - money);
        }
        transactionList.add(transaction);
        balance -= money;
    }

    /**
     * Javadoc.
     */
    public void doDepositing(double money) throws BankException {
        if (money < 0) {
            throw new InvalidFundingAmountException(money);
        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, money,
                    balance, balance + money);
        } else {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, money,
                    balance, balance + money);
        }
        transactionList.add(transaction);
        balance += money;
    }

    public abstract void withdraw(double money);

    public abstract void deposit(double money);

    /**
     * Javadoc.
     */
    public String getTransactionHistory() {
        String s = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":"";
        for (Transaction transaction : transactionList) {
            s = s + ""n"" + transaction.getTransactionSummary();
        }
        return s;
    }

    /**
     * Javadoc.
     */
    public void addTransaction(Transaction a) {
        transactionList.add(a);
    }

    /**
     * Javadoc.
     */
    public boolean equals(Object o) {
        if (this.accountNumber == ((Account) o).accountNumber) {
            return true;
        }
        return false;
    }
}
",REPLACE,0.2236068,,,,,,,,
83609,Bank,(6-6;5-6),"import java.util.ArrayList;
","import java.util.ArrayList;
import java.util.Comparator;
",INSERT,0.70710677,,,,,,,,
83603,Customer,(80-80;80-81),"    }
","    }

",INSERT,0.5,,,NO,,,,,
83600,Account,(78-79;78-80),"        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(""L?ch s? giao d?ch c?a t?i kho?n "").append(accountNumber).append("":n"");
","        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(""L?ch s? giao d?ch c?a t?i kho?n "")
                .append(accountNumber).append("":n"");
",REPLACE,0.5,,,NO,,,,,
83596,Bank,(65-77;65-65),"     */
    public String getCustomersInfoByIdOrder() {
        List<Customer> list = afterSort(""id"");
        StringBuilder stringBuilder = new StringBuilder();
        for (Customer customer : list) {
            stringBuilder.append(customer.getCustomerInfo() + ""n"");
        }
        return stringBuilder.toString();
    }

    /**
     * Functions.
     */
","     */
",DELETE,0.5,,,NO,,,,,
83596,Bank,(78-84;66-69),"    public String getCustomersInfoByNameOrder() {
        List<Customer> list = afterSort(""name"");
        StringBuilder stringBuilder = new StringBuilder();
        for (Customer customer : list) {
            stringBuilder.append(customer.getCustomerInfo() + ""n"");
        }
        return stringBuilder.toString();
","    public String getCustomersInfoByNameOrder() {
        List<Customer> tmp = new ArrayList<>(customerList);
        tmp.sort(Comparator.comparing(Customer::getFullName));
        return listToString(tmp);
",REPLACE,0.5,,,NO,,,,,
83596,Bank,(89-99;74-78),"     */
    private List<Customer> afterSort(String string) {
        List<Customer> list = customerList;
        Comparator<Customer> rankOrder;
        if (string.equals(""id"")) {
            rankOrder = Comparator.comparing(Customer::getIdNumber);
        } else {
            rankOrder = Comparator.comparing(Customer::getFullName);
        }
        list.sort(rankOrder);
        return list;
","     */
    public String getCustomersInfoByIdOrder() {
        List<Customer> tmp = new ArrayList<>(customerList);
        tmp.sort((o1, o2) -> (int) (o1.getIdNumber() - o2.getIdNumber()));
        return listToString(tmp);
",REPLACE,0.5,,,NO,,,,,
83596,Bank,(107-107;86-97),"    }
","    }

    /**
     * Functions.
     */
    private String listToString(List<Customer> list) {
        StringBuilder res = new StringBuilder();
        for (Customer customer : list) {
            res.append(customer.getCustomerInfo());
        }
        return res.toString().trim();
    }
",INSERT,null,,,NO,,,,,
83596,Account,(81-82;82-83),"        for (Transaction transaction : transactionList) {
            stringBuilder.append(transaction.getTransactionSumary());
","        for (Transaction transaction : transactionList) {
            stringBuilder.append(transaction.getTransactionSummary());
",REPLACE,0.70710677,,,NO,,,,,
83596,Transaction,(8-8;10-11),"    public static final int TYPE_WITHDRAW_SAVINGS = 3;
","    public static final int TYPE_WITHDRAW_SAVINGS = 3;
    private Map<Integer, String> map = new HashMap<>();
",INSERT,null,INSERT_VAR,,YES,,,,,
83596,Transaction,(13-13;16-19),"
","
    /**
     * Functions.
     */
",INSERT,null,,,NO,,,,,
83596,Transaction,(18-18;24-28),"        this.finalBalance = finalBalance;
","        this.finalBalance = finalBalance;
        map.put(0, ""N?p ti?n v?ng lai"");
        map.put(1, ""R?t ti?n v?ng lai"");
        map.put(2, ""N?p ti?n ti?t ki?m"");
        map.put(3, ""R?t ti?n ti?t ki?m"");
",INSERT,null,INSERT_CODE,,YES,,,,,
83596,Transaction,(20-30;30-32),"
    private String getTransactionTypeString(int type) {
        if (type == TYPE_DEPOSIT_CHECKING) {
            return ""N?p ti?n v?ng lai"";
        } else if (type == TYPE_WITHDRAW_CHECKING) {
            return ""R?t ti?n v?ng lai"";
        } else if (type == TYPE_DEPOSIT_SAVINGS) {
            return ""N?p ti?n ti?t ki?m"";
        } else {
            return ""R?t ti?n ti?t ki?m"";
        }
","
    private String getTransactionTypeString(int a) {
        return map.get(a);
",REPLACE,0.70710677,,,,,,,,
83596,Transaction,(32-34;34-47),"
    public String getTransactionSumary() {
        return String.format(""- Ki?u giao d?ch: %s. S? d? ban ??u: $%.2f. S? ti?n: $%.2f. S? d? cu?i: $%.2f."", getTransactionTypeString(type), initialBalance, amount, finalBalance);
","
    /**
     * Functions.
     */
    public String getTransactionSummary() {
        StringBuilder res = new StringBuilder();
        res.append(""- Ki?u giao d?ch: "")
                .append(getTransactionTypeString(type))
                .append("". S? d? ban ??u: $"").append(String.format(""%.2f"", initialBalance))
                .append("". S? ti?n: $"").append(String.format(""%.2f"", amount))
                .append("". S? d? cu?i: $"").append(String.format(""%.2f"", finalBalance))
                .append("".n"");

        return res.toString();
",REPLACE,0.5,,,,,,,,
84254,Bank,(4-4;3-4),"import java.util.Arrays;
","import java.util.Arrays;
import java.util.Comparator;
",INSERT,null,,,,,,,,
83318,Account,(3-3;3-6),"
","
/**
 * abstract class Account.
 */
",INSERT,0.28867513,,,NO,,,,,
83318,Account,(4-4;7-8),"public abstract class Account {
","public abstract class Account {

",INSERT,0.28867513,,,NO,,,,,
83318,Account,(6-6;10-11),"    public static final String SAVINGS = ""SAVINGS"";
","    public static final String SAVINGS = ""SAVINGS"";

",INSERT,0.73854893,,,NO,,,,,
83318,Account,(10-10;15-18),"
","
    /**
     * constructor.
     */
",INSERT,0.57735026,,,NO,,,,,
83318,Account,(22-22;30-34),"
","
    /**
     * getter.
     * @return .
     */
",INSERT,0.4082483,,,NO,,,,,
83318,Account,(26-26;38-42),"
","
    /**
     * getter.
     * @return .
     */
",INSERT,0.23570226,,,NO,,,,,
83318,Account,(33-38;50-70),"     */
    public void doWithdrawing(double money) throws BankException {
        if (money < 0) {
            throw new InvalidFundingAmountException(money);
        } else if (money > balance) {
            throw new InsufficientFundsException(money);
","     */
    public abstract void withdraw(double amount);

    /**
     * abstract method deposit.
     * @param amount .
     */
    public abstract void deposit(double amount);

    /**
     * doWithdrawing.
     * @param amount .
     * @throws InsufficientFundsException .
     */
    public void doWithdrawing(double amount)
            throws InsufficientFundsException, InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        }
        if (balance < amount) {
            throw new InsufficientFundsException(amount);
",REPLACE,0.23570226,REPLACE_CODE,,,,,,,
83318,Account,(40-44;72-77),"        if (this instanceof SavingsAccount) {
            if (money > 1000) {
                throw new InvalidFundingAmountException(money);
            } else if (balance - money < 5000) {
                throw new InsufficientFundsException(money);
","        if (this instanceof SavingsAccount) {
            if (balance - amount < 5000) {
                throw new InvalidFundingAmountException(amount);
            }
            if (amount > 1000) {
                throw new InsufficientFundsException(amount);
",REPLACE,0.23570226,CHANGE_CONDITION,,YES,CLASS,,,,
83318,Account,(46-56;79-79),"        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, money,
                    balance, balance - money);
        } else {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, money,
                    balance, balance - money);
        }
        transactionList.add(transaction);
        balance -= money;
","        }
",DELETE,0.23570226,,,NO,,,,,
83318,Account,(61-64;86-90),"     */
    public void doDepositing(double money) throws BankException {
        if (money < 0) {
            throw new InvalidFundingAmountException(money);
","     */
    public void doDepositing(double amount)
            throws InsufficientFundsException, InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
",REPLACE,0.23570226,,,NO,,,,,
83318,Account,(65-75;91-91),"        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, money,
                    balance, balance + money);
        } else {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, money,
                    balance, balance + money);
        }
        transactionList.add(transaction);
        balance += money;
","        }
",DELETE,0.23570226,,,NO,,,,,
83318,Account,(85-86;98-101),"    public String getTransactionHistory() {
        String s = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":"";
","    public String getTransactionHistory() {
        StringBuilder result =
                new StringBuilder(""L?ch s? giao d?ch c?a t?i kho?n ""
                + accountNumber + "":n"");
",REPLACE,0.23570226,GEN_STRING,,YES,,,,,
83318,Account,(87-88;102-105),"        for (Transaction transaction : transactionList) {
            s = s + ""n"" + transaction.getTransactionSummary();
","        for (Transaction transaction : transactionList) {
            result.append(transaction.getTransactionSummary())
                    .append(""n"")
            ;
",REPLACE,0.23570226,,,,,,,,
83318,Account,(89-90;106-107),"        }
        return s;
","        }
        return result.toString().trim();
",REPLACE,0.23570226,,,,,,,,
83318,Account,(102-102;122-123),"     */
","     */
    @Override
",INSERT,0.23570226,,,NO,,,,,
83318,Account,(103-104;124-125),"    public boolean equals(Object o) {
        if (this.accountNumber == ((Account) o).accountNumber) {
","    public boolean equals(Object o) {
        if (this == o) {
",REPLACE,0.23570226,CHANGE_CONDITION,,YES,,,,,
83318,Account,(106-107;127-132),"        }
        return false;
","        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Account account = (Account) o;
        return accountNumber == account.accountNumber;
",REPLACE,0.23570226,,,,,,,,
83318,Bank,(2-2;2-4),"import java.util.ArrayList;
","import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
",INSERT,null,,,NO,,,,,
83318,Bank,(3-3;5-6),"import java.util.List;
","import java.util.List;
import java.util.Scanner;
",INSERT,null,,,NO,,,,,
83318,Bank,(4-4;7-10),"
","
/**
 * class Bank.
 */
",INSERT,null,,,NO,,,,,
83318,Bank,(21-32;23-29),"
    /**
     * cmt.
     */
    public boolean isNumber(String s) {
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) > '9' || s.charAt(i) < '0') {
                return false;
            }
        }
        return true;
    }
","
            if (words.length != 3) {
                String name = String.join("" "",
                        Arrays.copyOfRange(words, 0, words.length - 1));
                long id = Long.parseLong(words[words.length - 1]);
                customerList.add(new Customer(id, name));
            } else {
",REPLACE,0.73854893,,,,,,,,
83318,Bank,(33-70;30-33),"
    /**
     * cmt.
     */
    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        BufferedReader reader = new BufferedReader(inputStreamReader);
        String line = """";
        Customer customer = new Customer();
        while (true) {
            try {
                if (((line = reader.readLine()) != null)) {
                    String[] ss = line.split("" "");
                    if (isNumber(ss[0])) {
                        if (ss[1].equals(""CHECKING"")) {
                            Account account = new CheckingAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        } else {
                            Account account = new SavingsAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        }
                    } else {
                        String name = """";
                        for (int i = 0; i < ss.length - 2; ++i) {
                            name = name + ss[i] + "" "";
                        }
                        name += ss[ss.length - 2];
                        customer = new Customer(name, Long.parseLong(ss[ss.length - 1]));
                        customerList.add(customer);
                    }
                } else {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
","
                long accountNumber = Long.parseLong(words[0]);
                String accountType = words[1];
                double accountBalance = Double.parseDouble(words[2]);
",REPLACE,0.73854893,,,,,,,,
83318,Bank,(71-88;34-40),"
        }
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    /**
     * cmt.
     */
    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
                    Customer swap = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, swap);
","
                if (accountType.equals(Account.CHECKING)) {
                    customerList.get(customerList.size() - 1)
                            .addAccount(new CheckingAccount(accountNumber, accountBalance));
                } else if (accountType.equals(Account.SAVINGS)) {
                    customerList.get(customerList.size() - 1)
                            .addAccount(new SavingsAccount(accountNumber, accountBalance));
",REPLACE,0.73854893,,,,,,,,
83318,Bank,(91-99;43-43),"        }
        String s = """";
        for (int i = 0; i < customerList.size(); ++i) {
            s = s + customerList.get(i).getCustomerInfo();
            if (i != customerList.size() - 1) {
                s += ""n"";
            }
        }
        return s;
","        }
",DELETE,0.4082483,,,,,,,,
83318,Bank,(105-113;50-54),"    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getFullName()
                        .compareTo(customerList.get(j).getFullName()) > 0) {
                    Customer swap = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, swap);
                }
","    public String getCustomersInfoByNameOrder() {
        List<Customer> nameOrder = new ArrayList<Customer>(customerList);
        nameOrder.sort(new Comparator<Customer>() {
            public int compare(Customer o1, Customer o2) {
                return o1.getFullName().compareTo(o2.getFullName());
",REPLACE,0.4082483,,,NO,,,,,
83318,Bank,(114-114;55-60),"            }
","            }
        });

        StringBuilder result = new StringBuilder();
        for (Customer customer : nameOrder) {
            result.append(customer.getCustomerInfo()).append(""n"");
",INSERT,null,,,,,,,,
83318,Bank,(115-120;61-74),"        }
        String s = """";
        for (int i = 0; i < customerList.size(); ++i) {
            s = s + customerList.get(i).getCustomerInfo();
            if (i != customerList.size() - 1) {
                s += ""n"";
","        }
        return result.toString().trim();
    }

    /**
     * getter.
     * @return .
     */
    public String getCustomersInfoByIdOrder() {
        List<Customer> idOrder = new ArrayList<Customer>(customerList);
        idOrder.sort(new Comparator<Customer>() {
            @Override
            public int compare(Customer o1, Customer o2) {
                return (int) (o1.getIdNumber() - o2.getIdNumber());
",REPLACE,0.4082483,,,,,,,,
83318,Bank,(121-121;75-80),"            }
","            }
        });

        StringBuilder result = new StringBuilder();
        for (Customer customer : idOrder) {
            result.append(customer.getCustomerInfo()).append(""n"");
",INSERT,null,,,,,,,,
83318,Bank,(122-123;81-90),"        }
        return s;
","        }
        return result.toString().trim();
    }

    /**
     * getter.
     * @return .
     */
    public List<Customer> getCustomerList() {
        return customerList;
",REPLACE,0.4082483,,,,,,,,
83318,Customer,(8-8;8-15),"
","
    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    /**
     * constructor.
     */
",INSERT,null,INSERT,,YES,,,,,
83318,Customer,(18-25;24-24),"        this.idNumber = idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
","        this.idNumber = idNumber;
",DELETE,0.4082483,,,,,,,,
83318,Customer,(28-28;27-56),"
","
    /**
     * getter.
     * @return .
     */
    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber
                + "". H? t?n: "" + fullName + ""."";
    }

    /**
     * addAccount.
     * @param account .
     */
    public void addAccount(Account account) {
        accountList.add(account);
    }

    /**
     * removeAccount.
     * @param account .
     */
    public void removeAccount(Account account) {
        accountList.remove(account);
    }

    /**
     * getter.
     * @return .
     */
",INSERT,null,,,,,,,,
83318,Customer,(32-32;60-64),"
","
    /**
     * setter.
     * @param idNumber .
     */
",INSERT,null,,,NO,,,,,
83318,Customer,(36-36;68-88),"
","
    /**
     * getter.
     * @return .
     */
    public String getFullName() {
        return fullName;
    }

    /**
     * setter.
     * @param fullName .
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * getter.
     * @return .
     */
",INSERT,null,,,,,,,,
83318,Customer,(43-69;96-98),"     */
    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
    }

    /**
     * cmt.
     */
    public void addAccount(Account a) {
        for (Account account : accountList) {
            if (account.equals(a)) {
                return;
            }
        }
        accountList.add(a);
    }

    /**
     * cmt.
     */
    public void removeAccount(Account a) {
        for (int i = 0; i < accountList.size(); ++i) {
            if (accountList.get(i).equals(a)) {
                accountList.remove(i);
                return;
            }
        }
","     */
    public void setAccountList(List<Account> accountList) {
        this.accountList = accountList;
",REPLACE,0.4082483,,,,,,,,
83318,Transaction,(0-0;0-3),,"/**
 * class Transaction.
 */
",INSERT,null,,,NO,,,,,
83318,Transaction,(1-1;4-5),"public class Transaction {
","public class Transaction {

",INSERT,null,,,NO,,,,,
83318,Transaction,(5-5;9-10),"    public static final int TYPE_WITHDRAW_SAVINGS = 4;
","    public static final int TYPE_WITHDRAW_SAVINGS = 4;

",INSERT,null,,,NO,,,,,
83318,Transaction,(10-10;15-22),"
","
    /**
     * constructor.
     * @param type .
     * @param amount .
     * @param initialBalance .
     * @param finalBalance .
     */
",INSERT,null,,,NO,,,,,
83318,Transaction,(20-23;34-37),"     */
    private String getTransactionTypeString(int num) {
        switch (num) {
            case 1:
","     */
    private String getTransactionType(int type) {
        switch (type) {
            case TYPE_DEPOSIT_CHECKING:
",REPLACE,0.57735026,,,NO,,,,,
83318,Transaction,(24-25;38-39),"                return ""N?p ti?n v?ng lai"";
            case 2:
","                return ""N?p ti?n v?ng lai"";
            case TYPE_WITHDRAW_CHECKING:
",REPLACE,0.4082483,,,NO,,,,,
83318,Transaction,(26-27;40-41),"                return ""R?t ti?n v?ng lai"";
            case 3:
","                return ""R?t ti?n v?ng lai"";
            case TYPE_DEPOSIT_SAVINGS:
",REPLACE,0.4082483,,,NO,,,,,
83318,Transaction,(28-29;42-43),"                return ""N?p ti?n ti?t ki?m"";
            default:
","                return ""N?p ti?n ti?t ki?m"";
            case TYPE_WITHDRAW_SAVINGS:
",REPLACE,0.4082483,,,NO,,,,,
83318,Transaction,(30-30;44-46),"                return ""R?t ti?n ti?t ki?m"";
","                return ""R?t ti?n ti?t ki?m"";
            default:
                return """";
",INSERT,null,,,NO,,,,,
83318,Transaction,(37-39;54-62),"    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type) + "". S? d? ban ??u: $""
                + initialBalance + "". S? ti?n: $"" + amount + "". S? d? cu?i: $"" + finalBalance + ""."";
","    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: ""
                + getTransactionType(type)
                + "". S? d? ban ??u: $""
                + String.format(""%.2f"", initialBalance)
                + "". S? ti?n: $""
                + String.format(""%.2f"", amount)
                + "". S? d? cu?i: $""
                + String.format(""%.2f"", finalBalance) + ""."";
",REPLACE,0.4082483,GEN_STRING,,YES,,,,,
83318,SavingsAccount,(1-1;4-10),"public class SavingsAccount extends Account {
","public class SavingsAccount extends Account {

    /**
     * constructor.
     * @param accountNumber .
     * @param balance .
     */
",INSERT,null,,,NO,,,,,
83318,SavingsAccount,(8-10;20-25),"        try {
            doWithdrawing(money);
        } catch (BankException e) {
","        try {
            doWithdrawing(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS,
                    amount, balance, balance - amount));
            balance -= amount;
        } catch (InsufficientFundsException | InvalidFundingAmountException e) {
",REPLACE,0.28867513,INSERT_CODE,,YES,,,,,
83318,SavingsAccount,(17-19;35-40),"        try {
            doDepositing(money);
        } catch (BankException e) {
","        try {
            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS,
                    amount, balance, balance + amount));
            balance += amount;
        } catch (InsufficientFundsException | InvalidFundingAmountException e) {
",REPLACE,0.28867513,INSERT_CODE,,YES,,,,,
83193,Customer,(0-90;0-89),"import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 03/12/2020.
 */

public class Customer {
    private long idNumber;
    private String fullName;
    private List<Account> accountList;

    /**
     * javadoc.
     */
    public Customer() {
        accountList = new ArrayList<>();
    }

    /**
     * javadoc.
     */
    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName;
        accountList = new ArrayList<>();
    }

    /**
     * javadoc.
     */
    public String getCustomerInfo() {
        String ret = ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
        return ret;
    }

    /**
     * javadoc.
     */
    public void addAccount(Account newAcc) {
        for (Account account : accountList) {
            if (account.equals(newAcc)) {
                return;
            }
        }
        accountList.add(newAcc);
    }

    /**
     * javadoc.
     */
    public void removeAccount(Account account) {
        accountList.remove(account);
    }

    /**
     * javadoc.
     */
    public long getIdNumber() {
        return idNumber;
    }

    /**
     * javadoc.
     */
    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    /**
     * javadoc.
     */
    public String getFullName() {
        return fullName;
    }

    /**
     * javadoc.
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * javadoc.
     */
    public List<Account> getAccountList() {
        return accountList;
    }
}
","import java.util.ArrayList;
import java.util.List;

public class Customer {
    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    /**
     * Yes.
     */
    public Customer() {

    }

    /**
     * Yes.
     */
    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName;
    }

    /**
     * Yes.
     */
    public String getCustomerInfo() {
        return ""S? CMND: "" + this.idNumber + "". H? t?n: "" + this.fullName + ""."";
    }

    /**
     * Yes.
     */
    public void addAccount(Account newAcc) {
        for (Account account : accountList) {
            if (account.equals(newAcc)) {
                return;
            }
        }
        accountList.add(newAcc);
    }

    /**
     * Yes.
     */
    public void removeAccount(Account acc) {
        for (int i = 0; i < accountList.size(); ++i) {
            if (acc.equals(accountList.get(i))) {
                accountList.remove(i);
                --i;
            }
        }
    }

    /**
     * Yes.
     */
    public long getIdNumber() {
        return idNumber;
    }

    /**
     * Yes.
     */
    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    /**
     * Yes.
     */
    public String getFullName() {
        return fullName;
    }

    /**
     * Yes.
     */
    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    /**
     * Yes.
     */
    public List<Account> getAccountList() {
        return accountList;
    }
}
",REPLACE,0.52223295,,,,,,,,
83193,Bank,(0-108;0-115),"import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
/**
 * Created by CCNE on 03/12/2020.
 */

public class Bank {
    private List<Customer> customerList;

    /**
     * javadoc.
     */
    public void readCustomerList(InputStream inputStream) {
        customerList = new ArrayList<Customer>();
        BufferedReader br;
        try {
            br = new BufferedReader(new InputStreamReader(inputStream));
            Customer customer = null;
            while (br.ready()) {
                String line = br.readLine();
                String[] word = line.split("" "");
                if (Character.isDigit(word[0].charAt(0))) {
                    Integer id = Integer.parseInt(word[0]);
                    Double money = Double.parseDouble(word[2]);
                    Account account;
                    if (word[1].compareTo(Account.CHECKING) == 0) {
                        CheckingAccount checkingAccount = new CheckingAccount(id, money);
                        account = (Account) checkingAccount;
                    } else {
                        SavingsAccount savingsAccount = new SavingsAccount(id, money);
                        account = (Account) savingsAccount;
                    }
                    customer.addAccount(account);

                } else {
                    int len = word.length;
                    String name = """";
                    for (int i = 0; i < len - 1; ++i) {
                        name += word[i];
                        if (i < len - 1 - 1) {
                            name = name + "" "";
                        }
                    }
                    Integer id = Integer.parseInt(word[len - 1]);
                    customer = new Customer(id, name);
                    customerList.add(customer);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * javadoc.
     */
    public String getCustomersInfoByNameOrder() {
        Collections.sort(customerList, new Comparator<Customer>() {
            @Override
            public int compare(Customer o1, Customer o2) {
                int cmp = o1.getFullName().compareTo(o2.getFullName());
                if (cmp == 0) {
                    return (o1.getIdNumber() > o2.getIdNumber() ? 1 : -1);
                } else {
                    return cmp;
                }
            }
        });

        String ret = """";
        for (Customer customer : customerList) {
            ret += customer.getCustomerInfo() + ""n"";
        }
        return ret;
    }

    /**
     * javadoc.
     */
    public String getCustomersInfoByIdOrder() {
        Collections.sort(customerList, new Comparator<Customer>() {
            @Override
            public int compare(Customer o1, Customer o2) {
                if (o1.getIdNumber() == o2.getIdNumber()) {
                    return o1.getFullName().compareTo(o2.getFullName());
                } else {
                    return (o1.getIdNumber() > o2.getIdNumber() ? 1 : -1);
                }
            }
        });

        String ret = """";
        for (Customer customer : customerList) {
            ret += customer.getCustomerInfo() + ""n"";
        }
        return ret;
    }

    /**
     * javadoc.
     */
    public List<Customer> getCustomerList() {
        return customerList;
    }
}
","import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * Yes.
     */
    public boolean isNumber(String s) {
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) > '9' || s.charAt(i) < '0') {
                return false;
            }
        }
        return true;
    }

    /**
     * Yes.
     */
    public void readCustomerList(InputStream in) {
        InputStreamReader inputStreamReader = new InputStreamReader(in);
        BufferedReader reader = new BufferedReader(inputStreamReader);
        String line = """";
        Customer customer = new Customer();
        while (true) {
            try {
                if (((line = reader.readLine()) != null)) {
                    String[] ss = line.split("" "");
                    if (isNumber(ss[0])) {
                        if (ss[1].equals(""CHECKING"")) {
                            Account account = new CheckingAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        } else {
                            Account account = new SavingsAccount(Long.parseLong(ss[0]),
                                    Double.parseDouble(ss[2]));
                            customer.addAccount(account);
                        }
                    } else {
                        String name = """";
                        for (int i = 0; i < ss.length - 2; ++i) {
                            name = name + ss[i] + "" "";
                        }
                        name += ss[ss.length - 2];
                        customer = new Customer(Long.parseLong(ss[ss.length - 1]), name);
                        customerList.add(customer);
                    }
                } else {
                    break;
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }

    /**
     * Yes.
     */
    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i)
                        .getFullName()
                        .compareTo(customerList.get(j).getFullName()) > 0) {
                    Collections.swap(customerList, i, j);
                }
            }
        }
        String res = """";
        for (int i = 0; i < customerList.size(); ++i) {
            res += customerList.get(i).getCustomerInfo();
            if (i + 1 != customerList.size()) {
                res += ""n"";
            }
        }
        return res;
    }

    /**
     * Yes.
     */
    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
                    Collections.swap(customerList, i, j);
                }
            }
        }
        String res = """";
        for (int i = 0; i < customerList.size(); ++i) {
            res += customerList.get(i).getCustomerInfo();
            if (i + 1 != customerList.size()) {
                res += ""n"";
            }
        }
        return res;
    }

    /**
     * Yes.
     */
    public List<Customer> getCustomerList() {
        return customerList;
    }
}
",REPLACE,0.52223295,,,,,,,,
83193,Account,(0-112;0-128),"import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 03/12/2020.
 */
public abstract class Account {
    private long accountNumber;
    private double balance;
    protected List<Transaction> transactionList;
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    /**
     * javadoc.
     */
    public Account() {
        transactionList = new ArrayList<Transaction>();
    }

    /**
     * javadoc.
     */
    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
        transactionList = new ArrayList<Transaction>();
    }

    /**
     * javadoc.
     */
    public long getAccountNumber() {
        return accountNumber;
    }

    /**
     * javadoc.
     */
    public double getBalance() {
        return balance;
    }

    /**
     * javadoc.
     */
    public abstract void deposit(double number);

    /**
     * javadoc.
     */
    public abstract void withdraw(double number);

    /**
     * javadoc.
     */
    public void doDepositing(double number) throws BankException {
        if (number < 0) {
            throw new InvalidFundingAmountException(number);
        } else {
            balance += number;
        }
    }

    /**
     * javadoc.
     */
    public void doWithdrawing(double number) throws BankException {
        if (number < 0) {
            throw new InvalidFundingAmountException(number);
        } else if (number > balance) {
            throw new InsufficientFundsException(number);
        } else {
            balance -= number;
        }
    }

    /**
     * javadoc.
     */
    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    /**
     * javadoc.
     */
    public String getTransactionHistory() {
        String ret = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":n"";
        for (int i = 0; i < transactionList.size(); ++i) {
            Transaction transaction = transactionList.get(i);
            ret += transaction.getTransactionSummary();
            if (i < transactionList.size() - 1) {
                ret += ""n"";
            }
        }
        return ret;
    }


    /**
     * javadoc.
     */
    public boolean equals(Object obj) {
        if (obj.getClass() != this.getClass()) {
            return false;
        }
        Account other = (Account) obj;
        return (other.getAccountNumber() == this.getAccountNumber());
    }
}

","import java.util.ArrayList;
import java.util.List;

public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";
    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    /**
     * Yes.
     */
    public Account() {

    }

    /**
     * Yes.
     */
    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    /**
     * Yes.
     */
    public long getAccountNumber() {
        return accountNumber;
    }

    /**
     * Yes.
     */
    public double getBalance() {
        return balance;
    }

    /**
     * Yes.
     */
    public void doWithdrawing(double money) throws BankException {
        if (money < 0) {
            throw new InvalidFundingAmountException(money);
        } else if (money > balance) {
            throw new InsufficientFundsException(money);
        }
        if (this instanceof SavingsAccount) {
            if (money > 1000) {
                throw new InvalidFundingAmountException(money);
            } else if (balance - money < 5000) {
                throw new InsufficientFundsException(money);
            }
        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, money,
                    balance, balance - money);
        } else {
            transaction = new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, money,
                    balance, balance - money);
        }
        transactionList.add(transaction);
        balance -= money;
    }

    /**
     * Yes.
     */
    public void doDepositing(double money) throws BankException {
        if (money < 0) {
            throw new InvalidFundingAmountException(money);
        }
        Transaction transaction;
        if (this instanceof CheckingAccount) {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, money,
                    balance, balance + money);
        } else {
            transaction = new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, money,
                    balance, balance + money);
        }
        transactionList.add(transaction);
        balance += money;
    }

    /**
     * Yes.
     */
    public abstract void withdraw(double x);

    /**
     * Yes.
     */
    public abstract void deposit(double x);

    /**
     * Yes.
     */
    public void addTransaction(Transaction a) {
        transactionList.add(a);
    }

    /**
     * Yes.
     */
    public String getTransactionHistory() {
        String s = ""L?ch s? giao d?ch c?a t?i kho?n ""
                + accountNumber
                + "":"";
        for (Transaction transaction : transactionList) {
            s = s
                    + ""n""
                    + transaction.getTransactionSummary();
        }
        return s;
    }

    /**
     * Yes.
     */
    public boolean equals(Object obj) {
        if (this.accountNumber == ((Account) obj).accountNumber) {
            return true;
        }
        return false;
    }
}
",REPLACE,0.52223295,,,,,,,,
83637,Bank,(84-86;84-86),"            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getFullName().
                        compareTo(customerList.get(j).getFullName()) > 0) {
","            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getFullName()
                        .compareTo(customerList.get(j).getFullName()) > 0) {
",REPLACE,0.70710677,,,NO,,,,,
83631,Bank,(7-7;7-8),"import java.util.ArrayList;
","import java.util.ArrayList;
import java.util.Collections;
",INSERT,0.52223295,,,,,,,,
83631,Bank,(43-44;42-44),"        BufferedReader reader = new BufferedReader(inputStreamReader);
        String line = """";
","        BufferedReader reader = new BufferedReader(inputStreamReader);
        String line;
        Customer customer = new Customer();
",REPLACE,0.52223295,,,,,,,,
83631,Bank,(46-47;46-46),"            try {
                Customer customer = new Customer();
","            try {
",DELETE,0.52223295,,,,,,,,
83631,Bank,(85-87;84-87),"            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getFullName().compareTo(customerList.get(j).getFullName()) > 0) {
                    swap(customerList, i, j);
","            for (int j = i + 1; j < customerList.size(); ++j) {
                if (customerList.get(i).getFullName()
                        .compareTo(customerList.get(j).getFullName()) > 0) {
                    Collections.swap(customerList, i, j);
",REPLACE,0.52223295,,,,,,,,
83631,Bank,(107-108;107-108),"                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
                    swap(customerList, i, j);
","                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
                    Collections.swap(customerList, i, j);
",REPLACE,0.52223295,,,,,,,,
83021,Bank,(15-16;15-17),"    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
","    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream,
                StandardCharsets.UTF_8);
",REPLACE,0.25,,,,,,,,
83021,Bank,(19-20;20-21),"        int data = 0;
        while(data != -1) {
","        int data = 0;
        while (data != -1) {
",REPLACE,0.35355338,,,NO,,,,,
83021,Bank,(67-70;68-72),"        String name = line.replace(id, """");
        name = name.trim();    id = id.trim();
        long CMND = Long.parseLong(id);
        return new Customer(CMND, name);
","        String name = line.replace(id, """");
        name = name.trim();
        id = id.trim();
        long cmnd = Long.parseLong(id);
        return new Customer(cmnd, name);
",REPLACE,0.28867513,,,NO,,,,,
83021,Bank,(78-79;80-83),"            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).getFullName().compareTo(customerList.get(j).getFullName()) > 0) {
","            for (int j = i + 1; j < customerList.size(); j++) {
                String nameA = customerList.get(i).getFullName();
                String nameB = customerList.get(j).getFullName();
                if (nameA.compareTo(nameB) > 0) {
",REPLACE,0.35355338,CHANGE_CONDITION,,YES,,,,,
83021,Bank,(86-89;90-95),"        StringBuilder ans = new StringBuilder();
        for (Customer customer: customerList) {
            ans.append(customer.getCustomerInfo());
            ans.append(""n"");
","        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            ans.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                ans.append(""n"");
            }
",REPLACE,0.8528029,ADD_CONDITION,,YES,,,,,
83021,Bank,(90-92;96-96),"        }
        ans.deleteCharAt(ans.length() - 1);
        ans.deleteCharAt(ans.length() - 1);
","        }
",DELETE,0.8528029,,,,,,,,
83021,Bank,(109-112;113-118),"        StringBuilder ans = new StringBuilder();
        for (Customer customer: customerList) {
            ans.append(customer.getCustomerInfo());
            ans.append(""n"");
","        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            ans.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                ans.append(""n"");
            }
",REPLACE,0.35355338,ADD_CONDITION,,YES,,,,,
83015,Customer,(8-8;8-11),"
","
    /**
     * .
     */
",INSERT,0.4082483,,,NO,,,,,
83015,Customer,(11-11;14-17),"
","
    /**
     * .
     */
",INSERT,0.8528029,,,NO,,,,,
83015,Customer,(16-16;22-25),"
","
    /**
     * .
     */
",INSERT,0.4472136,,,NO,,,,,
83015,Customer,(20-20;29-32),"
","
    /**
     * .
     */
",INSERT,0.35355338,,,NO,,,,,
83015,Customer,(24-24;36-39),"
","
    /**
     * .
     */
",INSERT,0.35355338,,,NO,,,,,
83015,Customer,(28-28;43-46),"
","
    /**
     * .
     */
",INSERT,0.4472136,,,NO,,,,,
83015,Customer,(32-32;50-53),"
","
    /**
     * .
     */
",INSERT,0.35355338,,,NO,,,,,
83015,Customer,(36-36;57-60),"
","
    /**
     * .
     */
",INSERT,0.35355338,,,NO,,,,,
83015,Customer,(40-40;64-67),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Customer,(44-44;71-74),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Bank,(11-11;11-14),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Bank,(12-13;15-17),"    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
","    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream,
                StandardCharsets.UTF_8);
",REPLACE,0.6030227,,,NO,,,,,
83015,Bank,(16-17;20-21),"        int data = 0;
        while(data != -1) {
","        int data = 0;
        while (data != -1) {
",REPLACE,0.6030227,,,NO,,,,,
83015,Bank,(40-40;44-47),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Bank,(53-53;60-63),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Bank,(58-61;68-72),"        String name = line.replace(id, """");
        name = name.trim();    id = id.trim();
        long CMND = Long.parseLong(id);
        return new Customer(CMND, name);
","        String name = line.replace(id, """");
        name = name.trim();
        id = id.trim();
        long cmnd = Long.parseLong(id);
        return new Customer(cmnd, name);
",REPLACE,0.6030227,,,NO,,,,,
83015,Bank,(63-63;74-77),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Bank,(66-67;80-83),"            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).fullName.compareTo(customerList.get(j).fullName) > 0) {
","            for (int j = i + 1; j < customerList.size(); j++) {
                String nameA = customerList.get(i).getFullName();
                String nameB = customerList.get(j).getFullName();
                if (nameA.compareTo(nameB) > 0) {
",REPLACE,0.5,,,,,,,,
83015,Bank,(74-77;90-95),"        StringBuilder ans = new StringBuilder();
        for (Customer customer: customerList) {
            ans.append(customer.getCustomerInfo());
            ans.append(""n"");
","        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            ans.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                ans.append(""n"");
            }
",REPLACE,0.5,DELETE,,,,,,,
,,,,,,,ADD_CONDITION,,YES,CLASS,,,,
83015,Bank,(78-80;96-96),"        }
        ans.deleteCharAt(ans.length() - 1);
        ans.deleteCharAt(ans.length() - 1);
","        }
",DELETE,0.5,,,,,,,,
83015,Bank,(83-83;99-102),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Bank,(86-87;105-106),"            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).idNumber > customerList.get(j).idNumber) {
","            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
",REPLACE,0.5,,,NO,,,,,
83015,Bank,(94-97;113-118),"        StringBuilder ans = new StringBuilder();
        for (Customer customer: customerList) {
            ans.append(customer.getCustomerInfo());
            ans.append(""n"");
","        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            ans.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                ans.append(""n"");
            }
",REPLACE,0.5,DELETE,,YES,,,,,
,,,,,,,ADD_CONDITION,,YES,CLASS,,,,
83015,Bank,(101-101;122-125),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Account,(10-10;10-13),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Account,(13-13;16-19),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Account,(18-18;24-27),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Account,(22-22;31-34),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Account,(31-32;47-48),"        if (balance - num < 0) {
            throw new InvalidFundingAmountException(balance);
","        if (balance - num < 0) {
            throw new InvalidFundingAmountException(num);
",REPLACE,0.4472136,,,NO,,,,,
83015,Account,(35-36;51-52),"            if (balance - num < 5000) {
                throw new InvalidFundingAmountException(balance);
","            if (balance - num < 5000) {
                throw new InvalidFundingAmountException(num);
",REPLACE,0.28867513,,,NO,,,,,
83015,Account,(60-61;80-81),"        } else {
            transaction.type = Transaction.TYPE_WITHDRAW_SAVINGS;
","        } else {
            transaction.type = Transaction.TYPE_DEPOSIT_SAVINGS;
",REPLACE,0.28867513,REPLACE_VAR,,YES,,,,,
83015,Account,(65-65;85-88),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Account,(67-68;90-92),"        StringBuilder ans = new StringBuilder();
        ans.append(""L?ch s? giao d?ch c?a t?i kho?n "").append(this.accountNumber).append("":"").append(""n"");
","        StringBuilder ans = new StringBuilder();
        ans.append(""L?ch s? giao d?ch c?a t?i kho?n "").append(this.accountNumber);
        ans.append("":"").append(""n"");
",REPLACE,0.28867513,,,NO,,,,,
83015,Account,(75-75;99-102),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,Transaction,(31-31;37-40),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,SavingsAccount,(2-2;2-5),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,SavingsAccount,(6-6;9-12),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,SavingsAccount,(15-15;21-24),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83015,SavingsAccount,(23-24;32-32),"    }

","    }
",DELETE,0.5,,,NO,,,,,
83012,Account,(30-30;46-49),"        }
","        }
        if (balance - num < 0) {
            throw new InvalidFundingAmountException(num);
        }
",INSERT,null,INSERT_CODE,,,,,,,
83012,Account,(31-31;50-53),"        if (this instanceof SavingsAccount) {
","        if (this instanceof SavingsAccount) {
            if (balance - num < 5000) {
                throw new InvalidFundingAmountException(num);
            }
",INSERT,null,ADD_CONDITION,,YES,,,,,
83012,Account,(34-40;56-56),"            }
            if (balance - num < 5000) {
                throw new InvalidFundingAmountException(balance);
            }
        }
        if (balance - num < 0) {
            throw new InvalidFundingAmountException(balance);
","            }
",DELETE,0.31622776,DELETE,,,,,,,
83012,Account,(44-58;60-60),"        if (this instanceof CheckingAccount) {
            transaction.type = Transaction.TYPE_DEPOSIT_CHECKING;
        } else {
            transaction.type = Transaction.TYPE_DEPOSIT_SAVINGS;
        }
        balance = balance - num;
    }

    public void doDepositing(double num) throws InvalidFundingAmountException, InsufficientFundsException {
        if (num < 0) {
            throw new InsufficientFundsException(num);
        }
        Transaction transaction = new Transaction(num, balance, balance + num);
        transactionList.add(transaction);
        if (this instanceof CheckingAccount) {
","        if (this instanceof CheckingAccount) {
",DELETE,0.31622776,DELETE,,,,,,,
83012,Account,(62-62;64-82),"        }
","        }
        balance = balance - num;
    }

    /**
     * .
     */
    public void doDepositing(double num)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (num < 0) {
            throw new InsufficientFundsException(num);
        }
        Transaction transaction = new Transaction(num, balance, balance + num);
        transactionList.add(transaction);
        if (this instanceof CheckingAccount) {
            transaction.type = Transaction.TYPE_DEPOSIT_CHECKING;
        } else {
            transaction.type = Transaction.TYPE_DEPOSIT_SAVINGS;
        }
",INSERT,null,INSERT_CODE,,,,,,,
83012,Transaction,(35-36;44-45),"                + "". S? ti?n: $"" +  String.format(""%.2f"", this.amount)
                + "". S? d? cu?i: $"" +  String.format(""%.2f"", this.finalBalance);
","                + "". S? ti?n: $"" +  String.format(""%.2f"", this.amount)
                + "". S? d? cu?i: $"" +  String.format(""%.2f"", this.finalBalance) + ""."";
",REPLACE,0.6324555,GEN_STRING,,YES,,,,,
83010,Bank,(12-14;15-18),"    public void readCustomerList(InputStream inputStream) {
        InputStreamReader istreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
        BufferedReader bufferedReader = new BufferedReader(istreamReader);
","    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream,
                StandardCharsets.UTF_8);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
",REPLACE,0.73854893,,,NO,,,,,
83010,Bank,(81-81;99-102),"
","
    /**
     * .
     */
",INSERT,null,,,,,,,,
83010,Bank,(84-85;105-106),"            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).idNumber > customerList.get(j).idNumber) {
","            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
",REPLACE,0.4082483,,,NO,,,,,
83010,Bank,(92-95;113-118),"        StringBuilder ans = new StringBuilder();
        for (Customer customer: customerList) {
            ans.append(customer.getCustomerInfo());
            ans.append(""n"");
","        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            ans.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                ans.append(""n"");
            }
",REPLACE,0.4082483,ADD_CONDITION,,YES,,,,,
83010,Bank,(99-99;122-125),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
83010,Transaction,(33-36;42-45),"        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(this.type)
                + "". S? d? ban ??u: $""  + this.initialBalance
                + "". S? ti?n: $"" + this.amount
                + "". S? d? cu?i: $"" + this.finalBalance;
","        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(this.type)
                + "". S? d? ban ??u: $""  + String.format(""%.2f"", this.initialBalance)
                + "". S? ti?n: $"" +  String.format(""%.2f"", this.amount)
                + "". S? d? cu?i: $"" +  String.format(""%.2f"", this.finalBalance) + ""."";
",REPLACE,0.57735026,GEN_STRING,,YES,,,,,
82998,Bank,(0-0;0-1),,"import java.io.BufferedReader;
",INSERT,null,,,NO,,,,,
82998,Bank,(2-2;3-5),"import java.io.InputStream;
","import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
",INSERT,null,,,NO,,,,,
82998,Bank,(8-8;11-14),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,Bank,(9-9;15-18),"    public void readCustomerList(InputStream inputStream) {
","    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream,
                StandardCharsets.UTF_8);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
",INSERT,null,INSERT_CODE,,YES,,,,,
82998,Bank,(11-12;20-21),"        int data = 0;
        while(data != -1) {
","        int data = 0;
        while (data != -1) {
",REPLACE,0.8528029,,,NO,,,,,
82998,Bank,(13-14;22-23),"            try {
                data = inputStream.read();
","            try {
                data = bufferedReader.read();
",REPLACE,0.8528029,,,NO,,,,,
82998,Bank,(35-35;44-47),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,Bank,(48-48;60-63),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,Bank,(53-56;68-72),"        String name = line.replace(id, """");
        name = name.trim();    id = id.trim();
        long CMND = Long.parseLong(id);
        return new Customer(CMND, name);
","        String name = line.replace(id, """");
        name = name.trim();
        id = id.trim();
        long cmnd = Long.parseLong(id);
        return new Customer(cmnd, name);
",REPLACE,0.8528029,,,NO,,,,,
82998,Bank,(58-58;74-77),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,Bank,(61-62;80-83),"            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).fullName.compareTo(customerList.get(j).fullName) > 0) {
","            for (int j = i + 1; j < customerList.size(); j++) {
                String nameA = customerList.get(i).getFullName();
                String nameB = customerList.get(j).getFullName();
                if (nameA.compareTo(nameB) > 0) {
",REPLACE,0.35355338,,,NO,,,,,
82998,Bank,(69-72;90-95),"        StringBuilder ans = new StringBuilder();
        for (Customer customer: customerList) {
            ans.append(customer.getCustomerInfo());
            ans.append(""n"");
","        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            ans.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                ans.append(""n"");
            }
",REPLACE,0.35355338,ADD_CONDITION,,YES,,,,,
82998,Bank,(76-76;99-102),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,Bank,(79-80;105-106),"            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).idNumber > customerList.get(j).idNumber) {
","            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
",REPLACE,0.35355338,,,NO,,,,,
82998,Bank,(87-90;113-118),"        StringBuilder ans = new StringBuilder();
        for (Customer customer: customerList) {
            ans.append(customer.getCustomerInfo());
            ans.append(""n"");
","        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            ans.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                ans.append(""n"");
            }
",REPLACE,0.35355338,ADD_CONDITION,,YES,,,,,
82998,Bank,(94-94;122-125),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,Account,(26-34;38-45),"
    public void doWithdrawing(double num) throws InsufficientFundsException, InvalidFundingAmountException {
        if (this instanceof SavingsAccount) {
            if (num > 1000) {
                throw new InvalidFundingAmountException(num);
            }
            if (balance - num < 5000) {
                throw new InsufficientFundsException(balance);
            }
","
    /**
     * .
     */
    public void doWithdrawing(double num)
            throws InsufficientFundsException, InvalidFundingAmountException {
        if (num < 0) {
            throw new InsufficientFundsException(num);
",REPLACE,0.7905694,REPLACE_CODE,LINES,,,,,,
82998,Account,(36-37;47-56),"        if (balance - num < 0) {
            throw new InsufficientFundsException(balance);
","        if (balance - num < 0) {
            throw new InvalidFundingAmountException(num);
        }
        if (this instanceof SavingsAccount) {
            if (balance - num < 5000) {
                throw new InvalidFundingAmountException(num);
            }
            if (num > 1000) {
                throw new InsufficientFundsException(num);
            }
",REPLACE,0.35355338,,,,,,,,
82998,Account,(40-40;59-64),"        transactionList.add(transaction);
","        transactionList.add(transaction);
        if (this instanceof CheckingAccount) {
            transaction.type = Transaction.TYPE_WITHDRAW_CHECKING;
        } else {
            transaction.type = Transaction.TYPE_WITHDRAW_SAVINGS;
        }
",INSERT,null,INSERT_CODE,LINES,,,,,,
82998,Account,(45-46;73-74),"        if (num < 0) {
            throw new InvalidFundingAmountException(num);
","        if (num < 0) {
            throw new InsufficientFundsException(num);
",REPLACE,0.35355338,REPLACE_METHOD,LINE,YES,,,,,
82998,Account,(49-49;77-82),"        transactionList.add(transaction);
","        transactionList.add(transaction);
        if (this instanceof CheckingAccount) {
            transaction.type = Transaction.TYPE_DEPOSIT_CHECKING;
        } else {
            transaction.type = Transaction.TYPE_DEPOSIT_SAVINGS;
        }
",INSERT,null,INSERT_CODE,LINES,,,,,,
82998,Account,(52-52;85-88),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,Account,(54-55;90-92),"        StringBuilder ans = new StringBuilder();
        ans.append(""L?ch s? giao d?ch c?a t?i kho?n "").append(this.accountNumber).append("":"").append(""n"");
","        StringBuilder ans = new StringBuilder();
        ans.append(""L?ch s? giao d?ch c?a t?i kho?n "").append(this.accountNumber);
        ans.append("":"").append(""n"");
",REPLACE,0.35355338,,,NO,,,,,
82998,Account,(62-62;99-102),"
","
    /**
     * .
     */
",INSERT,null,,,NO,,,,,
82998,SavingsAccount,(19-20;28-29),"            doDepositing(num);
        } catch (InvalidFundingAmountException e) {
","            doDepositing(num);
        } catch (InvalidFundingAmountException | InsufficientFundsException e) {
",REPLACE,0.35355338,,,,,,,,
83097,Bank,(36-37;36-37),"        double balance = Double.parseDouble(info[2]);
        if (info[1].equals(Account.CHECKING))
","        double balance = Double.parseDouble(info[2]);
        if (info[1].equals(Account.CHECKING)) {
",REPLACE,0.6,,,NO,,,,,
83097,Bank,(38-38;38-39),"            return new CheckingAccount(accountNumber, balance);
","            return new CheckingAccount(accountNumber, balance);
        }
",INSERT,null,,,NO,,,,,
83097,Account,(31-33;31-37),"     */
    public void doWithdrawing(double amount) throws InsufficientFundsException {
        if (amount <= 0 || amount > balance)
","     */
    public void doWithdrawing(double amount)
        throws InsufficientFundsException, InvalidFundingAmountException {
        if (amount <= 0) {
            throw new InvalidFundingAmountException(amount);
        }
        if (amount > balance) {
",REPLACE,0.4472136,GEN_STRING,,YES,,,,,
83097,Account,(34-34;38-39),"            throw new InsufficientFundsException(amount);
","            throw new InsufficientFundsException(amount);
        }
",INSERT,null,,,NO,,,,,
83097,Account,(41-42;46-47),"    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount <= 0)
","    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount <= 0) {
",REPLACE,0.4472136,,,NO,,,,,
83097,Account,(43-43;48-49),"            throw new InvalidFundingAmountException(amount);
","            throw new InvalidFundingAmountException(amount);
        }
",INSERT,null,,,NO,,,,,
83097,SavingsAccount,(16-16;16-17),"            if (amount <= withdrawLimit && balance - amount >= minBalance) {
","            if (amount <= withdrawLimit && balance - amount >= minBalance) {
                double initialBalance = balance;
",INSERT,null,INSERT_CODE,,,,,,,
83097,SavingsAccount,(17-17;18-22),"                doWithdrawing(amount);
","                doWithdrawing(amount);
                addTransaction(
                    new Transaction(
                        Transaction.TYPE_WITHDRAW_SAVINGS,
                        amount, initialBalance, balance));
",INSERT,null,INSERT_CODE,,YES,,,,,
83097,SavingsAccount,(29-29;34-35),"        try {
","        try {
            double initialBalance = balance;
",INSERT,null,INSERT_CODE,,YES,,,,,
83097,SavingsAccount,(30-30;36-40),"            doDepositing(amount);
","            doDepositing(amount);
            addTransaction(
                new Transaction(
                    Transaction.TYPE_DEPOSIT_SAVINGS,
                    amount, initialBalance, balance));
",INSERT,null,INSERT_CODE,,YES,,,,,
83097,CheckingAccount,(12-12;12-13),"        try {
","        try {
            double initialBalance = balance;
",INSERT,null,INSERT_CODE,,NO,,,,,
83097,CheckingAccount,(13-13;14-18),"            doWithdrawing(amount);
","            doWithdrawing(amount);
            addTransaction(
                new Transaction(
                    Transaction.TYPE_WITHDRAW_CHECKING,
                    amount, initialBalance, balance));
",INSERT,null,INSERT_CODE,,YES,,,,,
83097,CheckingAccount,(24-24;29-30),"        try {
","        try {
            double initialBalance = balance;
",INSERT,null,,,,,,,,
83097,CheckingAccount,(25-25;31-35),"            doDepositing(amount);
","            doDepositing(amount);
            addTransaction(
                new Transaction(
                    Transaction.TYPE_DEPOSIT_CHECKING,
                    amount, initialBalance, balance));
",INSERT,null,INSERT_CODE,,YES,,,,,
84230,Customer,(2-2;1-2),"import java.util.ArrayList;
","import java.util.ArrayList;
import java.util.List;
",INSERT,0.42640144,,,NO,,,,,
84230,Account,(118-119;118-119),"    public boolean equals(Object o) {
        if(accountNumber == ((Account) o).accountNumber) {
","    public boolean equals(Object o) {
        if (accountNumber == ((Account) o).accountNumber) {
",REPLACE,0.42640144,,,NO,,,,,
84228,Customer,(12-12;12-15),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(17-17;20-23),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(22-22;28-31),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(31-31;40-43),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(40-40;52-55),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(44-44;59-62),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(48-48;66-69),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(52-52;73-76),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Customer,(56-56;80-83),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Bank,(21-21;24-27),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Bank,(59-59;65-68),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Bank,(80-80;89-92),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
84228,Bank,(100-100;112-115),"
","
    /**
     * tt.
     */
",INSERT,null,,,NO,,,,,
83526,Account,(44-44;44-53),"        } else {
","        } else {
            Transaction transaction;
            if (this instanceof CheckingAccount) {
                transaction = new Transaction(Transaction.TYPE_WITHDRAW_CHECKING,
                        amount, balance, balance - amount);
            } else {
                transaction = new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS,
                        amount, balance, balance - amount);
            }
            addTransaction(transaction);
",INSERT,0.5,INSERT_CODE,,YES,,,,,
83526,Account,(55-55;64-73),"        } else {
","        } else {
            Transaction transaction;
            if (this instanceof CheckingAccount) {
                transaction = new Transaction(Transaction.TYPE_DEPOSIT_CHECKING,
                        amount, balance, balance + amount);
            } else {
                transaction = new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS,
                        amount, balance, balance + amount);
            }
            addTransaction(transaction);
",INSERT,0.5,INSERT_CODE,,YES,,,,,
83526,Account,(81-82;99-100),"        StringBuilder res = new StringBuilder(String.format(
                ""L?ch s? giao d?ch c?a t?i kho?n %d: "", accountNumber
","        StringBuilder res = new StringBuilder(String.format(
                ""L?ch s? giao d?ch c?a t?i kho?n %d:n"", accountNumber
",REPLACE,0.70710677,GEN_STRING,,YES,,,,,
83526,Account,(84-85;102-102),"        for (Transaction transaction : transactionList) {
            res.append(""n"");
","        for (Transaction transaction : transactionList) {
",DELETE,0.70710677,DELETE,,,,,,,
83526,Account,(86-86;103-104),"            res.append(transaction.getTransactionSummary());
","            res.append(transaction.getTransactionSummary());
            res.append(""n"");
",INSERT,null,INSERT_CODE,LINE,YES,,,,,
83526,Customer,(8-8;8-11),"
","
    /**
     * Constructor.
     */
",INSERT,null,,,NO,,,,,
83526,Customer,(12-12;15-18),"
","
    /**
     * Constructor 2.
     */
",INSERT,null,,,NO,,,,,
83526,Bank,(63-66;63-68),"        StringBuilder res = new StringBuilder();
        for (Customer customer : customerList) {
            res.append(customer.getCustomerInfo());
            res.append(""n"");
","        StringBuilder res = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            res.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                res.append(""n"");
            }
",REPLACE,0.5,ADD_CONDITION,,YES,,,,,
83526,Bank,(81-84;83-88),"        StringBuilder res = new StringBuilder();
        for (Customer customer : customerList) {
            res.append(customer.getCustomerInfo());
            res.append(""n"");
","        StringBuilder res = new StringBuilder();
        for (int i = 0; i < customerList.size(); i++) {
            res.append(customerList.get(i).getCustomerInfo());
            if (i != customerList.size() - 1) {
                res.append(""n"");
            }
",REPLACE,0.5,ADD_CONDITION,,YES,,,,,
83526,SavingsAccount,(1-1;1-4),"public class SavingsAccount extends Account {
","public class SavingsAccount extends Account {
    /**
     * Constructor.
     */
",INSERT,null,,,NO,,,,,
83000,Customer,(46-47;46-47),"    public String getCustomerInfo() {
        return String.format(""S? CMND: %d. H? t?n: %s"",
","    public String getCustomerInfo() {
        return String.format(""S? CMND: %d. H? t?n: %s."",
",REPLACE,0.35355338,GEN_STRING,,YES,,,,,
83000,Transaction,(45-47;45-47),"  public String getTransactionSummary() {
    return String.format(""- Ki?u giao d?ch: %s. S? d? ban ??u: $%.2f. "" +
                    ""S? ti?n: $%.2f. S? d? cu?i: $%.2f."",
","  public String getTransactionSummary() {
    return String.format(""- Ki?u giao d?ch: %s. S? d? ban ??u: $%.2f. ""
                    + ""S? ti?n: $%.2f. S? d? cu?i: $%.2f."",
",REPLACE,0.35355338,,,NO,,,,,
83000,SavingsAccount,(11-12;11-12),"      addTransaction(
              new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, money, initialMoney, balance));
","      addTransaction(
              new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, money, initialMoney, balance));
",REPLACE,0.5,REPLACE_VAR,LINE,YES,,,,,
83000,SavingsAccount,(29-30;29-30),"      addTransaction(
              new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, money, initialMoney, balance));
","      addTransaction(
              new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, money, initialMoney, balance));
",REPLACE,0.35355338,REPLACE_VAR,LINE,YES,,,,,
83000,CheckingAccount,(23-24;23-24),"      addTransaction(
              new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, money, initialMoney, balance));
","      addTransaction(
              new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, money, initialMoney, balance));
",REPLACE,0.35355338,REPLACE_AR,LINE,YES,,,,,
83446,Customer,(48-49;48-49),"            if (accountList.get(i).equals(acc)) {
                return ;
","            if (accountList.get(i).equals(acc)) {
                return;
",REPLACE,0.25,,,NO,,,,,
83446,Account,(86-88;86-89),"     */
    public void doWithdrawing(double b) throws InvalidFundingAmountException, InsufficientFundsException {
        if(b < 0) {
","     */
    public void doWithdrawing(double b)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (b < 0) {
",REPLACE,0.25,,,NO,,,,,
83444,Account,(46-49;46-49),"    public String getTransactionHistory() {
        String res = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber +
                "": n"";
        for(int i = 0; i < transactionList.size(); i++) {
","    public String getTransactionHistory() {
        String res = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber
                + "":n"";
        for (int i = 0; i < transactionList.size(); i++) {
",REPLACE,0.5,GEN_STRING,,YES,,,,,
83444,Account,(50-51;50-51),"            res = res + transactionList.get(i).getTransactionSummary();
            if(i < transactionList.size() - 1) {
","            res = res + transactionList.get(i).getTransactionSummary();
            if (i < transactionList.size() - 1) {
",REPLACE,0.35355338,,,,,,,,
83444,Transaction,(43-44;43-44),"        return ""- Ki?u giao d?ch: "" + getTransactionTypeString()
                + "". S? d? ban ??u: $"" + decimalFormat.format(initialBalance) 
","        return ""- Ki?u giao d?ch: "" + getTransactionTypeString()
                + "". S? d? ban ??u: $"" + decimalFormat.format(initialBalance)
",REPLACE,0.5,,,NO,,,,,
83444,SavingsAccount,(22-24;22-24),"            doDepositing(b);
        } catch(BankException ex) {
            System.out.println(ex.getMess());
","            doDepositing(b);
        } catch (InvalidFundingAmountException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.5,,,,,,,,
83444,SavingsAccount,(30-31;30-31),"        if (b > 1000 || getBalance() < 5000) {
            return ;
","        if (b > 1000 || getBalance() < 5000) {
            return;
",REPLACE,0.35355338,,,NO,,,,,
83444,SavingsAccount,(34-36;34-36),"            doWithdrawing(b);
        } catch(BankException ex) {
            System.out.println(ex.getMess());
","            doWithdrawing(b);
        } catch (InvalidFundingAmountException | InsufficientFundsException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.28867513,,,NO,,,,,
83444,BankException,(8-13;7-8),"    public BankException(String mess) {
        this.mess = mess;
    }

    public String getMess() {
        return mess;
","    public BankException(String mess) {
        super(mess);
",REPLACE,0.35355338,INIT_CONSTRUCT,,YES,,,,,
83444,CheckingAccount,(16-18;16-18),"            doDepositing(b);
        } catch(BankException ex) {
            System.out.println(ex.getMess());
","            doDepositing(b);
        } catch (InvalidFundingAmountException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.28867513,,,,,,,,
83444,CheckingAccount,(25-27;25-27),"            doWithdrawing(b);
        } catch(BankException ex) {
            System.out.println(ex.getMess());
","            doWithdrawing(b);
        } catch (InvalidFundingAmountException | InsufficientFundsException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.35355338,,,,,,,,
83443,Account,(43-43;42-45),"
","
    /**
     * transaction history.
     */
",INSERT,null,,,NO,,,,,
83443,Account,(44-47;46-49),"    public String getTransactionHistory() {
        String res = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber +
                "": n"";
        for(int i = 0; i < transactionList.size(); i++) {
","    public String getTransactionHistory() {
        String res = ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber
                + "":n"";
        for (int i = 0; i < transactionList.size(); i++) {
",REPLACE,0.5,GEN_STRING,,YES,,,,,
83443,Account,(48-49;50-51),"            res = res + transactionList.get(i).getTransactionSummary();
            if(i < transactionList.size() - 1) {
","            res = res + transactionList.get(i).getTransactionSummary();
            if (i < transactionList.size() - 1) {
",REPLACE,0.5,,,NO,,,,,
83443,Account,(59-59;61-64),"
","
    /**
     * check equals.
     */
",INSERT,null,,,NO,,,,,
83443,Account,(75-77;83-92),"
    public void doWithdrawing(double b) throws BankException {
        if (b > maxWithdraw || b > balance || balance - b < minBalance) {
","
    /**
     * do withdraw.
     */
    public void doWithdrawing(double b)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (b < 0) {
            throw new InvalidFundingAmountException(b);
        }
        if (b > balance) {
",REPLACE,0.5,REPLACE_CODE,,,,,,,
83443,Account,(79-80;94-95),"        }
        transactionList.add(new Transaction(typeAccountToInt + 1, b, balance, balance + b));
","        }
        transactionList.add(new Transaction(typeAccountToInt + 1, b, balance, balance - b));
",REPLACE,0.5,CHANGE_OPERATOR,,YES,,,,,
83443,Bank,(8-8;9-12),"
","
    /**
     * Read Customer List.
     */
",INSERT,null,,,NO,,,,,
83443,Bank,(15-16;19-20),"                x = reader.read();
                if(x == -1) {
","                x = reader.read();
                if (x == -1) {
",REPLACE,0.8528029,,,NO,,,,,
83443,Bank,(29-31;33-34),"                        currentCustomer.addAccount(new SavingsAccount(id, balance));
                    }
                    else {
","                        currentCustomer.addAccount(new SavingsAccount(id, balance));
                    } else {
",REPLACE,0.8528029,,,NO,,,,,
83443,Bank,(33-35;36-37),"                    }
                }
                else {
","                    }
                } else {
",REPLACE,0.8528029,,,NO,,,,,
83443,Bank,(54-54;55-58),"
","
    /**
     * sort customer list by id.
     */
",INSERT,null,,,NO,,,,,
83443,Bank,(66-66;70-73),"
","
    /**
     * sort customer list by name.
     */
",INSERT,null,,,NO,,,,,
83443,Bank,(69-70;76-78),"            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).getFullName().compareTo(customerList.get(j).getFullName()) > 0) {
","            for (int j = i + 1; j < customerList.size(); j++) {
                if (customerList.get(i).getFullName()
                        .compareTo(customerList.get(j).getFullName()) > 0) {
",REPLACE,0.35355338,,,NO,,,,,
83443,Bank,(78-78;86-89),"
","
    /**
     * get customer info.
     */
",INSERT,null,,,NO,,,,,
83443,Bank,(83-84;94-95),"            res = res + customerList.get(i).getCustomerInfo();
            if(i < customerList.size() - 1) {
","            res = res + customerList.get(i).getCustomerInfo();
            if (i < customerList.size() - 1) {
",REPLACE,0.35355338,,,NO,,,,,
83443,Bank,(94-94;105-108),"
","
    /**
     * get customer info.
     */
",INSERT,null,,,NO,,,,,
83443,Bank,(99-100;113-114),"            res = res + customerList.get(i).getCustomerInfo();
            if(i < customerList.size() - 1) {
","            res = res + customerList.get(i).getCustomerInfo();
            if (i < customerList.size() - 1) {
",REPLACE,0.35355338,,,NO,,,,,
83443,Customer,(42-42;42-45),"
","
    /**
     * add acc.
     */
",INSERT,null,,,NO,,,,,
83443,Customer,(43-46;46-49),"    public void addAccount(Account acc) {
        for(int i = 0; i < accountList.size(); i++) {
            if(accountList.get(i).equals(acc)) {
                return ;
","    public void addAccount(Account acc) {
        for (int i = 0; i < accountList.size(); i++) {
            if (accountList.get(i).equals(acc)) {
                return;
",REPLACE,0.8528029,,,NO,,,,,
83443,Customer,(51-51;54-57),"
","
    /**
     * remove acc.
     */
",INSERT,null,,,NO,,,,,
83443,BankException,(10-12;6-8),"
    public String getMess() {
        return mess;
","
    public BankException(String mess) {
        super(mess);
",REPLACE,0.53033006,,,NO,,,,,
83443,Transaction,(23-23;23-26),"
","
    /**
     * create an instance.
     */
",INSERT,null,,,NO,,,,,
83443,Transaction,(34-34;37-40),"
","
    /**
     * get transaction summary.
     */
",INSERT,null,,,NO,,,,,
83443,Transaction,(36-40;42-46),"        DecimalFormat decimalFormat = new DecimalFormat(""0.00"");
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString() +
                "". S? d? ban ??u: $"" + decimalFormat.format(initialBalance) +
                "". S? ti?n: $"" + decimalFormat.format(amount) +
                "". S? d? cu?i: $"" + decimalFormat.format(finalBalance) + ""."";
","        DecimalFormat decimalFormat = new DecimalFormat(""0.00"");
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString()
                + "". S? d? ban ??u: $"" + decimalFormat.format(initialBalance)
                + "". S? ti?n: $"" + decimalFormat.format(amount)
                + "". S? d? cu?i: $"" + decimalFormat.format(finalBalance) + ""."";
",REPLACE,0.5,,,NO,,,,,
83443,SavingsAccount,(2-2;2-5),"
","
    /**
     * create an instance.
     */
",INSERT,null,,,NO,,,,,
83443,SavingsAccount,(20-23;22-24),"            doDepositing(b);
        }
        catch(BankException ex) {
            System.out.println(ex.getMess());
","            doDepositing(b);
        } catch (InvalidFundingAmountException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.35355338,,,NO,,,,,
83443,SavingsAccount,(28-28;29-32),"    public void withdraw(double b) {
","    public void withdraw(double b) {
        if (b > 1000 || getBalance() < 5000) {
            return;
        }
",INSERT,null,,,,,,,,
83443,SavingsAccount,(30-33;34-36),"            doWithdrawing(b);
        }
        catch(BankException ex) {
            System.out.println(ex.getMess());
","            doWithdrawing(b);
        } catch (InvalidFundingAmountException | InsufficientFundsException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.35355338,,,,,,,,
83443,CheckingAccount,(16-19;16-18),"            doDepositing(b);
        }
        catch(BankException ex) {
            System.out.println(ex.getMess());
","            doDepositing(b);
        } catch (InvalidFundingAmountException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.25,,,,,,,,
83443,CheckingAccount,(26-29;25-27),"            doWithdrawing(b);
        }
        catch(BankException ex) {
            System.out.println(ex.getMess());
","            doWithdrawing(b);
        } catch (InvalidFundingAmountException | InsufficientFundsException ex) {
            System.out.println(ex.getMessage());
",REPLACE,0.25,,,,,,,,
83442,Account,(69-70;77-78),"        if (b < 0) {
            throw new InsufficientFundsException(b);
","        if (b < 0) {
            throw new InvalidFundingAmountException(b);
",REPLACE,0.5,,,,,,,,
83442,Account,(75-77;83-89),"
    public void doWithdrawing(double b) throws BankException{
        if (b > maxWithdraw || b > balance || balance - b < minBalance) {
","
    /**
     * do withdraw.
     */
    public void doWithdrawing(double b)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (b < 0) {
",REPLACE,0.5,,,,,,,,
83442,Account,(79-80;91-95),"        }
        transactionList.add(new Transaction(typeAccountToInt + 1, b, balance, balance + b));
","        }
        if (b > balance) {
            throw new InsufficientFundsException(b);
        }
        transactionList.add(new Transaction(typeAccountToInt + 1, b, balance, balance - b));
",REPLACE,0.5,CHANGE_OPERATOR,,YES,,,,,
83442,Customer,(19-20;19-20),"    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? v? t?n: "" + fullName + ""."";
","    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
",REPLACE,0.5,GEN_STRING,,YES,,,,,
83442,Transaction,(0-0;0-1),,"import java.text.DecimalFormat;
",INSERT,null,,,NO,,,,,
83442,Transaction,(22-22;23-26),"
","
    /**
     * create an instance.
     */
",INSERT,null,,,NO,,,,,
83442,Transaction,(33-33;37-40),"
","
    /**
     * get transaction summary.
     */
",INSERT,null,,,NO,,,,,
83442,Transaction,(34-38;41-46),"    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString() +
                "". S? d? ban ??u: $"" + initialBalance +
                "". S? ti?n: $"" + amount +
                "". S? d? cu?i: $"" + finalBalance + ""."";
","    public String getTransactionSummary() {
        DecimalFormat decimalFormat = new DecimalFormat(""0.00"");
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString()
                + "". S? d? ban ??u: $"" + decimalFormat.format(initialBalance)
                + "". S? ti?n: $"" + decimalFormat.format(amount)
                + "". S? d? cu?i: $"" + decimalFormat.format(finalBalance) + ""."";
",REPLACE,0.5,GEN_STRING,,YES,,,,,
84030,Customer,(33-34;33-34),"        return ""S? CMND: "" + idNumber
                + "". H? v? t?n: "" + fullName + ""."";
","        return ""S? CMND: "" + idNumber
                + "". H? t?n: "" + fullName + ""."";
",REPLACE,0.42640144,GEN_STRING,LINE,YES,,,,,
84030,Bank,(33-34;37-38),"                            .addAccount(new CheckingAccount(accountNumber, accountBalance));
                } else if (accountType.equals(Account.SAVINGS)){
","                            .addAccount(new CheckingAccount(accountNumber, accountBalance));
                } else if (accountType.equals(Account.SAVINGS)) {
",REPLACE,0.42640144,,,,,,,,
83064,Bank,(98-99;98-99),"        }
        return res.toString();
","        }
        return res.toString().trim();
",REPLACE,1,GEN_STRING,LINE,YES,,,,,
83055,Bank,(11-11;11-14),"
","
    /**
     * doc toan bo customer tu inputstream.
     */
",INSERT,0.42640144,,,NO,,,,,
83055,Bank,(17-18;20-21),"                String line = reader.readLine();
                String ar[] = line.split("" "");
","                String line = reader.readLine();
                String[] ar = line.split("" "");
",REPLACE,0.42640144,,,,,,,,
83055,Bank,(41-42;44-45),"                }
                if (account != null)
","                }
                if (account != null) {
",REPLACE,0.42640144,,,NO,,,,,
83055,Bank,(43-43;46-47),"                    customer.addAccount(account);
","                    customer.addAccount(account);
                }
",INSERT,null,,,NO,,,,,
83055,Bank,(49-49;53-54),"        } catch (IOException e) {
","        } catch (IOException e) {
            e.printStackTrace();
",INSERT,null,,,NO,,,,,
83055,Bank,(56-56;61-64),"
","
    /**
     * tra ve danh sach customer sap xep theo name.
     */
",INSERT,null,,,NO,,,,,
83055,Bank,(67-67;75-78),"
","
    /**
     * tra ve danh sach customer sap xep theo id.
     */
",INSERT,0.42640144,,,NO,,,,,
83055,Bank,(87-88;98-99),"        }
        return res.toString();
","        }
        return res.toString().trim();
",REPLACE,0.42640144,GEN_STRING,,YES,,,,,
83055,Customer,(46-46;46-49),"
","
    /**
     * return all info customer.
     */
",INSERT,null,,,NO,,,,,
83453,Account,(0-89;0-96),"import java.util.ArrayList;
import java.util.List;

public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {}

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * This is comment.
     */
    public void doWithdrawing(double out) throws BankException {
        if (out < 0.0) {
            throw new InvalidFundingAmountException(out);
        } else {
            if (out > balance) {
                throw new InsufficientFundsException(out);
            } else {
                balance -= out;
            }
        }
    }

    /**
     * This is comment.
     */
    public void doDepositing(double in) throws BankException {
        if (in < 0.0) {
            throw new InvalidFundingAmountException(in);
        } else {
            balance += in;
        }
    }

    public abstract void withdraw(double out);

    public abstract void deposit(double in);

    /**
     * This is comment.
     */
    public String getTransactionHistory() {
        StringBuilder res = new StringBuilder();
        res.append(""L?ch s? giao d?ch c?a t?i kho?n "");
        res.append(accountNumber);
        res.append("":"" + ""n"");

        for (Transaction transaction : transactionList) {
            res.append(transaction.getTransactionSummary()).append(""n"");
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    } 

    /**
     * This is comment.
     */
    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof Account) {
            Account oth = (Account) obj;
            return (oth.accountNumber == accountNumber);
        } else {
            return false;
        }
    }
}
","import java.util.ArrayList;
import java.util.List;

public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    private long accountNumber;
    private double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {
    }

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public abstract void deposit(double amount);

    public abstract void withdraw(double amount);

    /**
     * javadoc.
     */
    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else {
            balance += amount;
        }
    }

    /**
     * javadoc.
     */
    public void doWithdrawing(double amount)
    throws InvalidFundingAmountException, InsufficientFundsException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else if (amount > balance) {
            throw new InsufficientFundsException(amount);
        } else {
            balance -= amount;
        }
    }

    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    /**
     * javadoc.
     */
    public String getTransactionHistory() {
        StringBuilder res = new StringBuilder();
        res.append(""L?ch s? giao d?ch c?a t?i kho?n "");
        res.append(accountNumber);
        res.append("":"" + ""n"");

        for (Transaction transaction : transactionList) {
            res.append(transaction.getTransactionSummary()).append(""n"");
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Account account = (Account) o;

        return accountNumber == account.accountNumber;
    }

    @Override
    public int hashCode() {
        return (int) (accountNumber ^ (accountNumber >>> 32));
    }
}
 
",REPLACE,0.23570226,REPLACE_CODE,,,,,,,
83453,Transaction,(0-47;0-51),"import java.text.DecimalFormat;

public class Transaction {
    public static final int TYPE_DEPOSIT_CHECKING = 0;
    public static final int TYPE_WITHDRAW_CHECKING = 1;
    public static final int TYPE_DEPOSIT_SAVINGS = 2;
    public static final int TYPE_WITHDRAW_SAVINGS = 3;

    private int type;
    private double amount;
    private double initialBalance;
    private double finalBalance;

    /**
     * This is comment.
     */
    public Transaction(int type, double amount, double initialBalance, double finalBalance) {
        this.type = type;
        this.amount = amount;
        this.initialBalance = initialBalance;
        this.finalBalance = finalBalance;
    }

    /**
     * This is comment.
     */
    private String getTransactionTypeString(int t) {
        switch (t) {
            case TYPE_DEPOSIT_CHECKING: return ""Na?p ti??n va?ng lai"";
            case TYPE_DEPOSIT_SAVINGS: return ""Na?p ti??n ti??t ki??m"";
            case TYPE_WITHDRAW_CHECKING: return ""Ru?t ti??n va?ng lai"";
            case TYPE_WITHDRAW_SAVINGS: return ""Ru?t ti??n ti??t ki??m"";
            default: return """";
        }
    }

    /**
     * This is comment.
     */
    public String getTransactionSummary() {
        DecimalFormat df2 = new DecimalFormat(""0.00"");
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + df2.format(initialBalance)
                + "". S? ti?n: $"" + df2.format(amount)
                + "". S? d? cu?i: $"" + df2.format(finalBalance) + ""."";
    }
}
","import java.text.DecimalFormat;

/**
 * Created by CCNE on 03/12/2020.
 */
public class Transaction {
    public static final int TYPE_DEPOSIT_CHECKING = 1;
    public static final int TYPE_WITHDRAW_CHECKING = 2;
    public static final int TYPE_DEPOSIT_SAVINGS = 3;
    public static final int TYPE_WITHDRAW_SAVINGS = 4;

    private int type;
    private double amount;
    private double initialBalance;
    private double finalBalance;

    /**
     * javadoc.
     */
    public Transaction(int type, double amount, double initialBalance, double finalBalance) {
        this.type = type;
        this.amount = amount;
        this.initialBalance = initialBalance;
        this.finalBalance = finalBalance;
    }

    private String getTransactionTypeString(int type) {
        //""N?p ti?n v?ng lai"", ""R?t ti?n v?ng lai"", ""N?p ti?n ti?t ki?m"", ""R?t ti?n ti?t ki?m""
        if (type == 1) {
            return ""N?p ti?n v?ng lai"";
        } else if (type == 2) {
            return ""R?t ti?n v?ng lai"";
        } else if (type == 3) {
            return ""N?p ti?n ti?t ki?m"";
        } else {
            return ""R?t ti?n ti?t ki?m"";
        }
    }

    /**
     * javadoc.
     */
    public String getTransactionSummary() {
        DecimalFormat df2 = new DecimalFormat(""0.00"");
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + df2.format(initialBalance)
                + "". S? ti?n: $"" + df2.format(amount)
                + "". S? d? cu?i: $"" + df2.format(finalBalance) + ""."";
    }
}
 
",REPLACE,0.73854893,REPLACE_CODE,,,,,,,
83453,Customer,(0-50;0-50),"import java.util.ArrayList;
import java.util.List;

public class Customer {
    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    public Customer() {}

    public Customer(long id, String name) {
        this.idNumber = id;
        this.fullName = name;
    }

    /**
     * This is comment.
     */
    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
    }

    public void addAccount(Account account) {
        accountList.add(account);
    }

    public void removeAccount(Account account) {
        accountList.remove(account);
    }

    public long getIdNumber() {
        return idNumber;
    }

    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public List<Account> getAccountList() {
        return accountList;
    }
}
","import java.util.ArrayList;
import java.util.List;

public class Customer {
    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    public Customer() {

    }

    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName;
    }

    public long getIdNumber() {
        return idNumber;
    }

    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public List<Account> getAccountList() {
        return accountList;
    }

    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
    }

    public void addAccount(Account account) {
        accountList.add(account);
    }

    public void removeAccount(Account account) {
        accountList.remove(account);
    }
}
 
",REPLACE,0.73854893,,,,,,,,
83453,Bank,(0-94;0-133),"import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * This is comment.
     */
    public void readCustomerList(InputStream inputStream) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        try {
            String line = reader.readLine();
            Customer customer = null;
            while (line != null) {
                if (line.contains(Account.SAVINGS) || line.contains(Account.CHECKING)) {
                    String[] infors = line.split("" "", -1);
                    long accountNumber = Long.valueOf(infors[0]);
                    String type = infors[1];
                    double balance = Double.valueOf(infors[2]);
                    if (type.equals(Account.SAVINGS)) {
                        customer.addAccount(new SavingsAccount(accountNumber, balance));
                    } else {
                        customer.addAccount(new CheckingAccount(accountNumber, balance));
                    }
                } else {
                    if (customer != null) {
                        customerList.add(customer);
                        customer = new Customer();
                    } else {
                        customer = new Customer();
                    }
                    int index = line.lastIndexOf("" "");
                    String name = line.substring(0, index);
                    long idNumber = Long.valueOf(line.substring(index + 1));
                    customer.setFullName(name);
                    customer.setIdNumber(idNumber);
                }
                line = reader.readLine();
            }
            if (customer != null) {
                customerList.add(customer);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This is comment.
     */
    public String getCustomersInfoByNameOrder() {
        Collections.sort(customerList, new Comparator<Customer>() {
            public int compare(Customer obj1, Customer obj2) {
                return obj1.getFullName().compareTo(obj2.getFullName());
            }
        });
        StringBuilder res = new StringBuilder();
        for (Customer i : customerList) {
            res.append(i.getCustomerInfo()).append('n');
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    /**
     * This is comment.
     */
    public String getCustomersInfoByIdOrder() {
        Collections.sort(customerList, new Comparator<Customer>() {
            public int compare(Customer obj1, Customer obj2) {
                return obj1.getIdNumber() < obj2.getIdNumber() ? -1 : 1;
            }
        });
        StringBuilder res = new StringBuilder();
        for (Customer i : customerList) {
            res.append(i.getCustomerInfo()).append('n');
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    /**
     * This is comment.
     */
    public List<Customer> getCustomerList() {
        return customerList;
    }
}
","import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    public List<Customer> getCustomerList() {
        return customerList;
    }

    /**
     * javadoc.
     */
    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        StringBuilder data = new StringBuilder();
        int x;
        char c;
        try {
            while ((x = inputStreamReader.read()) != -1) {
                // converts integer to character
                c = (char) x;
                data.append(c);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        //System.out.println(data);
        String[] lines = data.toString().split(""n"");

        Customer currentCustomer = new Customer();
        for (String line : lines) {
            String[] parseLine = line.split("" "");

            if (!('0' <= parseLine[0].charAt(0) && parseLine[0].charAt(0) <= '9')) {
                StringBuilder name = new StringBuilder();
                for (int i = 0; i < parseLine.length - 1; ++i) {
                    name.append(parseLine[i]);
                    if (i < parseLine.length - 2) {
                        name.append("" "");
                    }
                }

                String id = parseLine[parseLine.length - 1].substring(0, 9);
                long idNumber = Long.parseLong(id);
                currentCustomer = new Customer(idNumber, name.toString());
                customerList.add(currentCustomer);
                //System.out.println(name.toString() + ""hihi"");
                //System.out.println(id);
            } else {
                if (parseLine[1].equals(Account.CHECKING)) {
                    currentCustomer.addAccount(new CheckingAccount(Long.parseLong(parseLine[0]),
                            Double.parseDouble(parseLine[2])));
                } else {
                    currentCustomer.addAccount(new SavingsAccount(Long.parseLong(parseLine[0]),
                            Double.parseDouble(parseLine[2])));
                }
            }
        }
    }

    /**
     * javadoc.
     */
    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                Customer a = customerList.get(i);
                Customer b = customerList.get(j);
                if (a.getIdNumber() > b.getIdNumber()) {
                    customerList.set(j, a);
                    customerList.set(i, b);
                }
            }
        }


        StringBuilder res = new StringBuilder();
        for (Customer i : customerList) {
            res.append(i.getCustomerInfo()).append('n');
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    /**
     * javadoc.
     */
    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                Customer a = customerList.get(i);
                Customer b = customerList.get(j);
                if (a.getFullName().compareTo(b.getFullName()) > 0) {
                    customerList.set(j, a);
                    customerList.set(i, b);
                }
            }
        }

        StringBuilder res = new StringBuilder();
        for (Customer i : customerList) {
            res.append(i.getCustomerInfo()).append('n');
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    /**
     * javadoc.
     */
    public static void main(String[] args) {
        /*
        Bank bank = new Bank();
        bank.readCustomerList(new FileInputStream(""src/test.txt""));
        System.out.println(bank.getCustomersInfoByNameOrder());
        List<Customer> customers = bank.getCustomerList();
        customers.get(2).getAccountList().get(0).withdraw(-1000.00);
        for (Customer customer : customers) {
            for (Account account : customer.getAccountList()) {
                System.out.println(account.getBalance() + "" ""
                        + account.getAccountNumber() + "" "" + (account instanceof CheckingAccount));
            }
        }
        */
    }
}
 
",REPLACE,0.57735026,,,,,,,,
83453,SavingsAccount,(0-37;0-29),"public class SavingsAccount extends Account {
    /**
     * This is comment.
     */
    public SavingsAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    /**
     * This is comment.
     */
    @Override
    public void withdraw(double out) {
        if (out > 1000 || balance < 5000) {
            return;
        }
        try {
            doWithdrawing(out);
            transactionList.add(new Transaction(3, out, balance + out, balance));
        } catch (BankException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This is comment.
     */
    @Override
    public void deposit(double in) {
        try {
            doDepositing(in);
            transactionList.add(new Transaction(2, in, balance - in, balance));
        } catch (BankException e) {
            System.out.println(e.getMessage());
        }
    }
}
","public class SavingsAccount extends Account {
    public SavingsAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    public void deposit(double amount) {
        try {
            doDepositing(amount);
            addTransaction(new Transaction(3, amount, getBalance() - amount, getBalance()));
        } catch (InvalidFundingAmountException e) {
            System.out.println(e.getMessage());
        }
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 1000 || getBalance() < 5000) {
            return;
        }

        try {
            doWithdrawing(amount);
            addTransaction(new Transaction(4, amount, getBalance() + amount, getBalance()));
        } catch (InvalidFundingAmountException | InsufficientFundsException e) {
            System.out.println(e.getMessage());
        }
    }
}
",REPLACE,0.4082483,,,,,,,,
83453,CheckingAccount,(0-32;0-26),"public class CheckingAccount extends Account {
    /**
     * This is comment.
     */
    public CheckingAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    /**
     * This is comment.
     */
    public void withdraw(double out) {
        try {
            doWithdrawing(out);
            transactionList.add(new Transaction(1, out, balance + out, balance));
        } catch (BankException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This is comment.
     */
    public void deposit(double in) {
        try {
            doDepositing(in);
            transactionList.add(new Transaction(0, in, balance - in, balance));
        } catch (BankException e) {
            System.out.println(e.getMessage());
        }
    }
}
","public class CheckingAccount extends Account {
    public CheckingAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    public void deposit(double amount) {
        try {
            doDepositing(amount);
            addTransaction(new Transaction(1, amount, getBalance() - amount, getBalance()));
        } catch (InvalidFundingAmountException e) {
            System.out.println(e.getMessage());
        }

    }

    @Override
    public void withdraw(double amount) {
        try {
            doWithdrawing(amount);
            addTransaction(new Transaction(2, amount, getBalance() + amount, getBalance()));
        } catch (InvalidFundingAmountException | InsufficientFundsException e) {
            System.out.println(e.getMessage());
        }
    }
}
",REPLACE,0.35355338,,,,,,,,
83102,Account,(42-42;42-45),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,,,,,,
83102,Account,(69-70;72-73),"        }
        //res.deleteCharAt(res.lastIndexOf(""n""));
","        }
        res.deleteCharAt(res.lastIndexOf(""n""));
",REPLACE,0.70710677,,,,,,,,
83102,Transaction,(45-46;45-46),"        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: "" + df2.format(initialBalance)
","        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + df2.format(initialBalance)
",REPLACE,0.4082483,GEN_STRING,,YES,,,,,
83096,Transaction,(43-43;43-44),"    public String getTransactionSummary() {
","    public String getTransactionSummary() {
        DecimalFormat df2 = new DecimalFormat(""0.00"");
",INSERT,null,INSERT_CODE,,,,,,,
83096,Transaction,(44-47;45-48),"        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: "" + initialBalance
                + "". S? ti?n: $"" + new DecimalFormat(""0.00"").format(amount)
                + "". S? d? cu?i: $"" + finalBalance + ""."";
","        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + df2.format(initialBalance)
                + "". S? ti?n: $"" + df2.format(amount)
                + "". S? d? cu?i: $"" + df2.format(finalBalance) + ""."";
",REPLACE,0.6324555,GEN_STRING,,YES,,,,,
83399,Bank,(0-98;0-133),"import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * This is comment.
     */
    public void readCustomerList(InputStream inputStream) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        try {
            String line = reader.readLine();
            Customer customer = null;
            while (line != null) {
                if (line.contains(Account.SAVINGS) || line.contains(Account.CHECKING)) {
                    String[] infors = line.split("" "", -1);
                    long accountNumber = Long.valueOf(infors[0]);
                    String type = infors[1];
                    double balance = Double.valueOf(infors[2]);
                    if (type.equals(Account.SAVINGS)) {
                        customer.addAccount(new SavingsAccount(accountNumber, balance));
                    } else {
                        customer.addAccount(new CheckingAccount(accountNumber, balance));
                    }
                } else {
                    if (customer != null) {
                        customerList.add(customer);
                        customer = new Customer();
                    } else {
                        customer = new Customer();
                    }
                    int index = line.lastIndexOf("" "");
                    String name = line.substring(0, index);
                    long idNumber = Long.valueOf(line.substring(index + 1));
                    customer.setFullName(name);
                    customer.setIdNumber(idNumber);
                }
                line = reader.readLine();
            }
            if (customer != null) {
                customerList.add(customer);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This is comment.
     */
    public String getCustomersInfoByNameOrder() {
        Collections.sort(customerList, new Comparator<Customer>() {
            public int compare(Customer obj1, Customer obj2) {
                return obj1.getFullName().compareTo(obj2.getFullName());
            }
        });
        String customerInfoList = """";
        for (int i = 0; i < customerList.size(); i++) {
            customerInfoList += customerList.get(i).getCustomerInfo();
            if (i < customerList.size() - 1) {
                customerInfoList += 'n';
            }
        }
        return customerInfoList;
    }

    /**
     * This is comment.
     */
    public String getCustomersInfoByIdOrder() {
        Collections.sort(customerList, new Comparator<Customer>() {
            public int compare(Customer obj1, Customer obj2) {
                return obj1.getIdNumber() < obj2.getIdNumber() ? -1 : 1;
            }
        });
        String customerInfoList = """";
        for (int i = 0; i < customerList.size(); i++) {
            customerInfoList += customerList.get(i).getCustomerInfo();
            if (i < customerList.size() - 1) {
                customerInfoList += 'n';
            }
        }
        return customerInfoList;
    }

    /**
     * This is comment.
     */
    public List<Customer> getCustomerList() {
        return customerList;
    }
}
","import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    public List<Customer> getCustomerList() {
        return customerList;
    }

    /**
     * javadoc.
     */
    public void readCustomerList(InputStream inputStream) {
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
        StringBuilder data = new StringBuilder();
        int x;
        char c;
        try {
            while ((x = inputStreamReader.read()) != -1) {
                // converts integer to character
                c = (char) x;
                data.append(c);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        //System.out.println(data);
        String[] lines = data.toString().split(""n"");

        Customer currentCustomer = new Customer();
        for (String line : lines) {
            String[] parseLine = line.split("" "");

            if (!('0' <= parseLine[0].charAt(0) && parseLine[0].charAt(0) <= '9')) {
                StringBuilder name = new StringBuilder();
                for (int i = 0; i < parseLine.length - 1; ++i) {
                    name.append(parseLine[i]);
                    if (i < parseLine.length - 2) {
                        name.append("" "");
                    }
                }

                String id = parseLine[parseLine.length - 1].substring(0, 9);
                long idNumber = Long.parseLong(id);
                currentCustomer = new Customer(idNumber, name.toString());
                customerList.add(currentCustomer);
                //System.out.println(name.toString() + ""hihi"");
                //System.out.println(id);
            } else {
                if (parseLine[1].equals(Account.CHECKING)) {
                    currentCustomer.addAccount(new CheckingAccount(Long.parseLong(parseLine[0]),
                            Double.parseDouble(parseLine[2])));
                } else {
                    currentCustomer.addAccount(new SavingsAccount(Long.parseLong(parseLine[0]),
                            Double.parseDouble(parseLine[2])));
                }
            }
        }
    }

    /**
     * javadoc.
     */
    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                Customer a = customerList.get(i);
                Customer b = customerList.get(j);
                if (a.getIdNumber() > b.getIdNumber()) {
                    customerList.set(j, a);
                    customerList.set(i, b);
                }
            }
        }


        StringBuilder res = new StringBuilder();
        for (Customer i : customerList) {
            res.append(i.getCustomerInfo()).append('n');
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    /**
     * javadoc.
     */
    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
            for (int j = i + 1; j < customerList.size(); ++j) {
                Customer a = customerList.get(i);
                Customer b = customerList.get(j);
                if (a.getFullName().compareTo(b.getFullName()) > 0) {
                    customerList.set(j, a);
                    customerList.set(i, b);
                }
            }
        }

        StringBuilder res = new StringBuilder();
        for (Customer i : customerList) {
            res.append(i.getCustomerInfo()).append('n');
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    /**
     * javadoc.
     */
    public static void main(String[] args) {
        /*
        Bank bank = new Bank();
        bank.readCustomerList(new FileInputStream(""src/test.txt""));
        System.out.println(bank.getCustomersInfoByNameOrder());
        List<Customer> customers = bank.getCustomerList();
        customers.get(2).getAccountList().get(0).withdraw(-1000.00);
        for (Customer customer : customers) {
            for (Account account : customer.getAccountList()) {
                System.out.println(account.getBalance() + "" ""
                        + account.getAccountNumber() + "" "" + (account instanceof CheckingAccount));
            }
        }
        */
    }
}
 
",REPLACE,0.73854893,REPLACE_CODE,,,,,,,
83399,Account,(0-88;0-96),"import java.util.ArrayList;
import java.util.List;

public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {}

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * This is comment.
     */
    public void doWithdrawing(double out) throws BankException {
        if (out < 0.0) {
            throw new InvalidFundingAmountException(out);
        } else {
            if (out > balance) {
                throw new InsufficientFundsException(out);
            } else {
                balance -= out;
            }
        }
    }

    /**
     * This is comment.
     */
    public void doDepositing(double in) throws BankException {
        if (in < 0.0) {
            throw new InvalidFundingAmountException(in);
        } else {
            balance += in;
        }
    }

    public abstract void withdraw(double out);

    public abstract void deposit(double in);

    /**
     * This is comment.
     */
    public String getTransactionHistory() {
        String transactionHistory = String.format(""L?ch s? giao d?ch c?a t?i kho?n %d:%n"", 
            accountNumber);
        for (int i = 0; i < transactionList.size(); i++) {
            transactionHistory += transactionList.get(i).getTransactionSummary();
            if (i < transactionList.size() - 1) {
                transactionHistory += 'n';
            }
        }
        return transactionHistory;
    }

    /**
     * This is comment.
     */
    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof Account) {
            Account oth = (Account) obj;
            return (oth.accountNumber == accountNumber);
        } else {
            return false;
        }
    }
}
","import java.util.ArrayList;
import java.util.List;

public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    private long accountNumber;
    private double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {
    }

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public abstract void deposit(double amount);

    public abstract void withdraw(double amount);

    /**
     * javadoc.
     */
    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else {
            balance += amount;
        }
    }

    /**
     * javadoc.
     */
    public void doWithdrawing(double amount)
    throws InvalidFundingAmountException, InsufficientFundsException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else if (amount > balance) {
            throw new InsufficientFundsException(amount);
        } else {
            balance -= amount;
        }
    }

    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    /**
     * javadoc.
     */
    public String getTransactionHistory() {
        StringBuilder res = new StringBuilder();
        res.append(""L?ch s? giao d?ch c?a t?i kho?n "");
        res.append(accountNumber);
        res.append("":"" + ""n"");

        for (Transaction transaction : transactionList) {
            res.append(transaction.getTransactionSummary()).append(""n"");
        }
        res.deleteCharAt(res.lastIndexOf(""n""));
        return res.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Account account = (Account) o;

        return accountNumber == account.accountNumber;
    }

    @Override
    public int hashCode() {
        return (int) (accountNumber ^ (accountNumber >>> 32));
    }
}
 
",REPLACE,0.5477226,REPLACE_CODE,,,,,,,
83399,Transaction,(0-46;0-51),"public class Transaction {
    public static final int TYPE_DEPOSIT_CHECKING = 0;
    public static final int TYPE_WITHDRAW_CHECKING = 1;
    public static final int TYPE_DEPOSIT_SAVINGS = 2;
    public static final int TYPE_WITHDRAW_SAVINGS = 3;

    private int type;
    private double amount;
    private double initialBalance;
    private double finalBalance;

    /**
     * This is comment.
     */
    public Transaction(int type, double amount, double initialBalance, double finalBalance) {
        this.type = type;
        this.amount = amount;
        this.initialBalance = initialBalance;
        this.finalBalance = finalBalance;
    }

    /**
     * This is comment.
     */
    private String getTransactionTypeString(int t) {
        switch (t) {
            case TYPE_DEPOSIT_CHECKING: return ""Na?p ti??n va?ng lai"";
            case TYPE_DEPOSIT_SAVINGS: return ""Na?p ti??n ti??t ki??m"";
            case TYPE_WITHDRAW_CHECKING: return ""Ru?t ti??n va?ng lai"";
            case TYPE_WITHDRAW_SAVINGS: return ""Ru?t ti??n ti??t ki??m"";
            default: return """";
        }
    }

    /**
     * This is comment.
     */
    public String getTransactionSummary() {
        return String.format(
    ""- Ki??u giao di?ch: %s. S?? d? ban ???u: $%.2f. S?? ti??n: $%.2f. S?? d? cu??i: $%.2f."",
                            getTransactionTypeString(type),
                            initialBalance,
                            amount,
                            finalBalance);
    }
}
","import java.text.DecimalFormat;

/**
 * Created by CCNE on 03/12/2020.
 */
public class Transaction {
    public static final int TYPE_DEPOSIT_CHECKING = 1;
    public static final int TYPE_WITHDRAW_CHECKING = 2;
    public static final int TYPE_DEPOSIT_SAVINGS = 3;
    public static final int TYPE_WITHDRAW_SAVINGS = 4;

    private int type;
    private double amount;
    private double initialBalance;
    private double finalBalance;

    /**
     * javadoc.
     */
    public Transaction(int type, double amount, double initialBalance, double finalBalance) {
        this.type = type;
        this.amount = amount;
        this.initialBalance = initialBalance;
        this.finalBalance = finalBalance;
    }

    private String getTransactionTypeString(int type) {
        //""N?p ti?n v?ng lai"", ""R?t ti?n v?ng lai"", ""N?p ti?n ti?t ki?m"", ""R?t ti?n ti?t ki?m""
        if (type == 1) {
            return ""N?p ti?n v?ng lai"";
        } else if (type == 2) {
            return ""R?t ti?n v?ng lai"";
        } else if (type == 3) {
            return ""N?p ti?n ti?t ki?m"";
        } else {
            return ""R?t ti?n ti?t ki?m"";
        }
    }

    /**
     * javadoc.
     */
    public String getTransactionSummary() {
        DecimalFormat df2 = new DecimalFormat(""0.00"");
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + df2.format(initialBalance)
                + "". S? ti?n: $"" + df2.format(amount)
                + "". S? d? cu?i: $"" + df2.format(finalBalance) + ""."";
    }
}
 
",REPLACE,0.57735026,,,,,,,,
83084,Bank,(11-11;14-17),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,NO,,,,,
83084,Bank,(51-52;57-58),"                    currentCustomer.addAccount(new CheckingAccount(Long.parseLong(parseLine[0]),
                                                                   Double.parseDouble(parseLine[2])));
","                    currentCustomer.addAccount(new CheckingAccount(Long.parseLong(parseLine[0]),
                            Double.parseDouble(parseLine[2])));
",REPLACE,0.73854893,,,NO,,,,,
83084,Bank,(54-55;60-61),"                    currentCustomer.addAccount(new SavingsAccount(Long.parseLong(parseLine[0]),
                                                                  Double.parseDouble(parseLine[2])));
","                    currentCustomer.addAccount(new SavingsAccount(Long.parseLong(parseLine[0]),
                            Double.parseDouble(parseLine[2])));
",REPLACE,0.73854893,,,NO,,,,,
83084,Bank,(60-60;66-69),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,NO,,,,,
83084,Bank,(61-62;70-71),"    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i)
","    public String getCustomersInfoByIdOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
",REPLACE,0.4082483,,,NO,,,,,
83084,Bank,(70-70;79-81),"            }
","            }
        }

",INSERT,null,,,NO,,,,,
83084,Bank,(75-75;86-87),"        }
","        }
        res.deleteCharAt(res.lastIndexOf(""n""));
",INSERT,null,,,NO,,,,,
83084,Bank,(78-78;90-93),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,NO,,,,,
83084,Bank,(79-80;94-95),"    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i)
","    public String getCustomersInfoByNameOrder() {
        for (int i = 0; i < customerList.size(); ++i) {
",REPLACE,0.4082483,,,,,,,,
83084,Bank,(88-88;103-104),"            }
","            }
        }
",INSERT,null,,,NO,,,,,
83084,Bank,(93-93;109-110),"        }
","        }
        res.deleteCharAt(res.lastIndexOf(""n""));
",INSERT,null,,,NO,,,,,
83084,Account,(31-31;31-34),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,NO,,,,,
83084,Account,(53-53;60-63),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,NO,,,,,
83084,Account,(62-62;72-73),"        }
","        }
        res.deleteCharAt(res.lastIndexOf(""n""));
",INSERT,null,,,NO,,,,,
83084,Transaction,(0-0;0-2),,"import java.text.DecimalFormat;

",INSERT,null,,,NO,,,,,
83084,Transaction,(14-14;16-19),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,NO,,,,,
83084,Transaction,(34-34;39-42),"
","
    /**
     * javadoc.
     */
",INSERT,null,,,NO,,,,,
83084,Transaction,(37-40;45-48),"        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: "" + initialBalance
                + "". S? ti?n: $"" + amount
                + "". S? d? cu?i: $"" + finalBalance + ""."";
","        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + df2.format(initialBalance)
                + "". S? ti?n: $"" + df2.format(amount)
                + "". S? d? cu?i: $"" + df2.format(finalBalance) + ""."";
",REPLACE,0.57735026,GEN_STRING,,YES,,,,,
82746,Transaction,(26-27;26-27),"            case TYPE_DEPOSIT_CHECKING:
                return ""N?p ti?n v?ng l?i"";
","            case TYPE_DEPOSIT_CHECKING:
                return ""N?p ti?n v?ng lai"";
",REPLACE,0.25,GEN_STRING,,YES,,,,,
82746,Transaction,(28-29;28-29),"            case TYPE_WITHDRAW_CHECKING:
                return ""R?t ti?n v?ng l?i"";
","            case TYPE_WITHDRAW_CHECKING:
                return ""R?t ti?n v?ng lai"";
",REPLACE,0.4472136,,,,,,,,
82745,Account,(29-29;29-30),"
","
    /** Withdraw. */
",INSERT,0.35355338,,,NO,,,,,
82745,Account,(40-40;41-42),"
","
    /** Deposit. */
",INSERT,0.5,,,NO,,,,,
82745,Account,(53-53;55-56),"
","
    /** Transaction history. */
",INSERT,0.4472136,,,NO,,,,,
82745,Account,(54-55;57-59),"    public String getTransactionHistory() {
        StringBuilder result = new StringBuilder(""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":n"");
","    public String getTransactionHistory() {
        StringBuilder result = new StringBuilder(
                ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":n"");
",REPLACE,0.4472136,,,NO,,,,,
82745,Transaction,(43-44;43-44),"                + String.format(""$%.2f"", amount) + "". S? d? cu?i: ""
                + String.format(""$%.2f"", finalBalance);
","                + String.format(""$%.2f"", amount) + "". S? d? cu?i: ""
                + String.format(""$%.2f."", finalBalance);
",REPLACE,0.31622776,,,NO,,,,,
82745,Bank,(13-13;13-14),"
","
    /** Initialize. */
",INSERT,0.31622776,,,NO,,,,,
82745,Bank,(46-46;47-48),"
","
    /** Name order. */
",INSERT,0.31622776,,,NO,,,,,
82745,Bank,(64-64;66-67),"
","
    /** Id order. */
",INSERT,null,,,NO,,,,,
82745,CheckingAccount,(13-15;13-15),"            doWithdrawing(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_CHECKING
                    , amount, oldBalance, balance));
","            doWithdrawing(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_CHECKING,
                    amount, oldBalance, balance));
",REPLACE,0.31622776,,,NO,,,,,
82745,CheckingAccount,(25-27;25-27),"            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_CHECKING
                    , amount, oldBalance, balance));
","            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_CHECKING,
                    amount, oldBalance, balance));
",REPLACE,0.31622776,,,NO,,,,,
82740,Bank,(51-54;53-56),"                if (Customer.NAME_ORDER.compare(customerList.get(j), customerList.get(j - 1)) < 0) {
                    Customer tmp = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, tmp);
","                if (Customer.NAME_ORDER.compare(customerList.get(j), customerList.get(j - 1)) < 0) {
                    Customer tmp = customerList.get(j);
                    customerList.set(j, customerList.get(j - 1));
                    customerList.set(j - 1, tmp);
",REPLACE,0.31622776,REPLACE_VAR,,YES,,,,,
82740,Bank,(69-72;72-75),"                if (Customer.ID_ORDER.compare(customerList.get(j), customerList.get(j - 1)) < 0) {
                    Customer tmp = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, tmp);
","                if (Customer.ID_ORDER.compare(customerList.get(j), customerList.get(j - 1)) < 0) {
                    Customer tmp = customerList.get(j);
                    customerList.set(j, customerList.get(j - 1));
                    customerList.set(j - 1, tmp);
",REPLACE,0.4472136,REPLACE_VAR,,YES,,,,,
82740,Transaction,(21-21;22-23),"
","
    /** Get type. */
",INSERT,null,,,NO,,,,,
82740,Transaction,(24-25;26-27),"            case TYPE_DEPOSIT_CHECKING:
                return ""N?p ti?n v?ng l?i"";
","            case TYPE_DEPOSIT_CHECKING:
                return ""N?p ti?n v?ng lai"";
",REPLACE,0.4472136,GEN_STRING,,YES,,,,,
82740,Transaction,(26-27;28-29),"            case TYPE_WITHDRAW_CHECKING:
                return ""R?t ti?n v?ng l?i"";
","            case TYPE_WITHDRAW_CHECKING:
                return ""R?t ti?n v?ng lai"";
",REPLACE,0.4472136,GEN_STRING,,YES,,,,,
82740,Transaction,(31-31;33-35),"                return ""R?t ti?n ti?t ki?m"";
","                return ""R?t ti?n ti?t ki?m"";
            default:
                return """";
",INSERT,null,INSERT_CODE,,,,,,,
82740,Transaction,(35-35;38-39),"
","
    /** Summary. */
",INSERT,null,,,NO,,,,,
82740,Transaction,(36-37;40-41),"    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type) + "". S? d? ban ??u ""
","    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type) + "". S? d? ban ??u: ""
",REPLACE,0.4472136,GEN_STRING,,YES,,,,,
82740,Transaction,(39-40;43-44),"                + String.format(""$%.2f"", amount) + "". S? d? cu?i: ""
                + String.format(""$%.2f"", finalBalance);
","                + String.format(""$%.2f"", amount) + "". S? d? cu?i: ""
                + String.format(""$%.2f."", finalBalance);
",REPLACE,0.4472136,GEN_STRING,,YES,,,,,
82740,SavingsAccount,(11-12;11-14),"        try {
            if (amount > 1000) throw new InvalidFundingAmountException(amount);
","        try {
            if (amount > 1000) {
                throw new InvalidFundingAmountException(amount);
            }
",REPLACE,0.31622776,,,NO,,,,,
82740,SavingsAccount,(18-19;20-22),"            }
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, amount, oldBalance, balance));
","            }
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS,
                    amount, oldBalance, balance));
",REPLACE,0.31622776,,,NO,,,,,
82740,SavingsAccount,(29-30;32-34),"            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, amount, oldBalance, balance));
","            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS,
                    amount, oldBalance, balance));
",REPLACE,0.31622776,,,,,,,,
82740,CheckingAccount,(13-14;13-15),"            doWithdrawing(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, amount, oldBalance, balance));
","            doWithdrawing(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_CHECKING,
                    amount, oldBalance, balance));
",REPLACE,0.31622776,,,,,,,,
82740,CheckingAccount,(24-25;25-27),"            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, amount, oldBalance, balance));
","            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_CHECKING,
                    amount, oldBalance, balance));
",REPLACE,0.31622776,REPLACE_VAR,,YES,,,,,
82736,Bank,(14-14;13-14),"
","
    /** Initialize. */
",INSERT,null,,,NO,,,,,
82736,Bank,(42-43;42-43),"            reader.close();
        } catch(IOException e) {
","            reader.close();
        } catch (IOException e) {
",REPLACE,0.73854893,,,NO,,,,,
82736,Bank,(47-47;47-48),"
","
    /** Name order. */
",INSERT,null,,,NO,,,,,
82736,Bank,(51-55;52-56),"            for (int j = i; j > 0; j--) {
                if (Customer.NAME_ORDER.compare(customerList.get(j), customerList.get(i)) < 0) {
                    Customer tmp = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, tmp);
","            for (int j = i; j > 0; j--) {
                if (Customer.NAME_ORDER.compare(customerList.get(j), customerList.get(j - 1)) < 0) {
                    Customer tmp = customerList.get(j);
                    customerList.set(j, customerList.get(j - 1));
                    customerList.set(j - 1, tmp);
",REPLACE,0.4082483,REPLACE_VAR,,YES,,,,,
82736,Bank,(65-65;66-67),"
","
    /** Id order. */
",INSERT,null,,,NO,,,,,
82736,Bank,(69-73;71-75),"            for (int j = i; j > 0; j--) {
                if (Customer.ID_ORDER.compare(customerList.get(j), customerList.get(i)) < 0) {
                    Customer tmp = customerList.get(i);
                    customerList.set(i, customerList.get(j));
                    customerList.set(j, tmp);
","            for (int j = i; j > 0; j--) {
                if (Customer.ID_ORDER.compare(customerList.get(j), customerList.get(j - 1)) < 0) {
                    Customer tmp = customerList.get(j);
                    customerList.set(j, customerList.get(j - 1));
                    customerList.set(j - 1, tmp);
",REPLACE,0.4082483,REPLACE_VAR,,YES,,,,,
82736,Account,(28-28;29-30),"
","
    /** Withdraw. */
",INSERT,null,,,NO,,,,,
82736,Account,(39-39;41-42),"
","
    /** Deposit. */
",INSERT,null,,,NO,,,,,
82736,Account,(52-52;55-56),"
","
    /** Transaction history. */
",INSERT,null,,,NO,,,,,
82736,Account,(53-54;57-59),"    public String getTransactionHistory() {
        StringBuilder result = new StringBuilder(""L?ch s? gioa d?ch c?a t?i kho?n "" + accountNumber + "":n"");
","    public String getTransactionHistory() {
        StringBuilder result = new StringBuilder(
                ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":n"");
",REPLACE,0.57735026,GEN_STRING,,YES,,,,,
82736,Transaction,(23-27;25-35),"        switch (type) {
            case TYPE_DEPOSIT_CHECKING: return ""N?p ti?n v?ng l?i"";
            case TYPE_WITHDRAW_CHECKING: return ""R?t ti?n v?ng l?i"";
            case TYPE_DEPOSIT_SAVINGS: return ""N?p ti?n ti?t ki?m"";
            case TYPE_WITHDRAW_SAVINGS: return ""R?t ti?n ti?t ki?m"";
","        switch (type) {
            case TYPE_DEPOSIT_CHECKING:
                return ""N?p ti?n v?ng lai"";
            case TYPE_WITHDRAW_CHECKING:
                return ""R?t ti?n v?ng lai"";
            case TYPE_DEPOSIT_SAVINGS:
                return ""N?p ti?n ti?t ki?m"";
            case TYPE_WITHDRAW_SAVINGS:
                return ""R?t ti?n ti?t ki?m"";
            default:
                return """";
",REPLACE,0.57735026,GEN_STRING,,YES,,,,,
82736,Transaction,(31-31;38-39),"
","
    /** Summary. */
",INSERT,null,,,NO,,,,,
82736,Transaction,(32-36;40-44),"    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type) + "". S? d? ban ??u ""
                + String.format(""%.2f"", initialBalance) + "". S? ti?n: ""
                + String.format(""%.2f"", amount) + "". S? d? cu?i: ""
                + String.format(""%.2f"", finalBalance);
","    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type) + "". S? d? ban ??u: ""
                + String.format(""$%.2f"", initialBalance) + "". S? ti?n: ""
                + String.format(""$%.2f"", amount) + "". S? d? cu?i: ""
                + String.format(""$%.2f."", finalBalance);
",REPLACE,0.4082483,GEN_STRING,,YES,,,,,
82735,Bank,(22-23;22-23),"                    int tmp = line.lastIndexOf("" "");
                    String fullName = line.substring(tmp);
","                    int tmp = line.lastIndexOf("" "");
                    String fullName = line.substring(0, tmp);
",REPLACE,0.797724,CHANGE_PARAMS,,YES,,,,,
82735,Transaction,(32-34;40-44),"    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type) + "". S? d? ban ??u ""
                + initialBalance + "". S? ti?n: "" + amount + "". S? d? cu?i: "" + finalBalance;
","    public String getTransactionSummary() {
        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type) + "". S? d? ban ??u: ""
                + String.format(""$%.2f"", initialBalance) + "". S? ti?n: ""
                + String.format(""$%.2f"", amount) + "". S? d? cu?i: ""
                + String.format(""$%.2f."", finalBalance);
",REPLACE,0.37796447,GEN_STRING,,YES,,,,,
82735,SavingsAccount,(14-16;16-22),"            doWithdrawing(amount);
            if (balance < 5000) throw new InsufficientFundsException(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, amount, oldBalance, balance));
","            doWithdrawing(amount);
            if (balance < 5000) {
                balance = oldBalance;
                throw new InsufficientFundsException(amount);
            }
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS,
                    amount, oldBalance, balance));
",REPLACE,0.5345225,REPLACE_CODE,,,,,,,
82735,SavingsAccount,(26-27;32-34),"            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, amount, oldBalance, balance));
","            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS,
                    amount, oldBalance, balance));
",REPLACE,0.37796447,,,,,,,,
82728,Bank,(0-0;0-2),,"import java.io.BufferedReader;
import java.io.IOException;
",INSERT,null,,,NO,,,,,
82728,Bank,(1-1;3-4),"import java.io.InputStream;
","import java.io.InputStream;
import java.io.InputStreamReader;
",INSERT,null,,,NO,,,,,
82728,Bank,(11-11;13-14),"
","
    /** Initialize. */
",INSERT,null,,,NO,,,,,
82728,Bank,(12-12;15-24),"    public void readCustomerList(InputStream inputStream) {
","    public void readCustomerList(InputStream inputStream) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line = """";
            Customer customer = null;
            while ((line = reader.readLine()) != null && !line.isEmpty()) {
                if ((!line.contains(""CHECKING"") && !line.contains(""SAVINGS""))) {
                    int tmp = line.lastIndexOf("" "");
                    String fullName = line.substring(0, tmp);
                    long idNumber = Long.parseLong(line.substring(tmp + 1));
",INSERT,null,,REPLACE_CODE,,,,,,
82728,Bank,(13-13;25-45),"
","
                    customer = new Customer(idNumber, fullName);
                    customerList.add(customer);
                } else {
                    String[] parts = line.split("" "");

                    long accountNumber = Long.parseLong(parts[0]);
                    String type = parts[1];
                    double balance = Double.parseDouble(parts[2]);

                    if (type.equals(Account.CHECKING)) {
                        customer.addAccount(new CheckingAccount(accountNumber, balance));
                    } else {
                        customer.addAccount(new SavingsAccount(accountNumber, balance));
                    }
                }
            }
            reader.close();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
",INSERT,null,,,,,,,,
82728,Bank,(15-15;47-48),"
","
    /** Name order. */
",INSERT,null,,,NO,,,,,
82728,Bank,(33-33;66-67),"
","
    /** Id order. */
",INSERT,null,,,NO,,,,,
82728,SavingsAccount,(11-11;11-14),"        try {
","        try {
            if (amount > 1000) {
                throw new InvalidFundingAmountException(amount);
            }
",INSERT,null,,,,,,,,
82728,SavingsAccount,(13-14;16-22),"            doWithdrawing(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, amount, oldBalance, balance));
","            doWithdrawing(amount);
            if (balance < 5000) {
                balance = oldBalance;
                throw new InsufficientFundsException(amount);
            }
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS,
                    amount, oldBalance, balance));
",REPLACE,0.5,REPLACE_CODE,,,,,,,
82728,SavingsAccount,(24-25;32-34),"            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, amount, oldBalance, balance));
","            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS,
                    amount, oldBalance, balance));
",REPLACE,0.35355338,,,,,,,,
82450,Customer,(75-75;81-82),"}
","}
 
",INSERT,null,,,,,,,,
82450,Bank,(1-1;1-2),"import java.io.BufferedReader;
","import java.io.BufferedReader;
import java.io.IOException;
",INSERT,null,,,,,,,,
82450,Bank,(2-2;3-4),"import java.io.InputStream;
","import java.io.InputStream;
import java.io.InputStreamReader;
",INSERT,null,,,,,,,,
82450,Bank,(12-12;13-14),"
","
    /** Initialize. */
",INSERT,null,,,,,,,,
82450,Bank,(13-13;15-24),"    public void readCustomerList(InputStream inputStream) {
","    public void readCustomerList(InputStream inputStream) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line = """";
            Customer customer = null;
            while ((line = reader.readLine()) != null && !line.isEmpty()) {
                if ((!line.contains(""CHECKING"") && !line.contains(""SAVINGS""))) {
                    int tmp = line.lastIndexOf("" "");
                    String fullName = line.substring(0, tmp);
                    long idNumber = Long.parseLong(line.substring(tmp + 1));
",INSERT,null,,,,,,,,
82450,Bank,(14-14;25-45),"
","
                    customer = new Customer(idNumber, fullName);
                    customerList.add(customer);
                } else {
                    String[] parts = line.split("" "");

                    long accountNumber = Long.parseLong(parts[0]);
                    String type = parts[1];
                    double balance = Double.parseDouble(parts[2]);

                    if (type.equals(Account.CHECKING)) {
                        customer.addAccount(new CheckingAccount(accountNumber, balance));
                    } else {
                        customer.addAccount(new SavingsAccount(accountNumber, balance));
                    }
                }
            }
            reader.close();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
",INSERT,null,,,,,,,,
82450,Bank,(16-16;47-48),"
","
    /** Name order. */
",INSERT,null,,,,,,,,
82450,Bank,(17-18;49-50),"    public String getCustomersInfoByNameOrder() {
        String result = """";
","    public String getCustomersInfoByNameOrder() {
        StringBuilder result = new StringBuilder();
",REPLACE,0.31622776,,,,,,,,
82450,Bank,(29-30;61-62),"        for (Customer customer : customerList) {
            result += customer.getCustomerInfo() + ""n"";
","        for (Customer customer : customerList) {
            result.append(customer.getCustomerInfo()).append(""n"");
",REPLACE,0.31622776,,,,,,,,
82450,Bank,(31-32;63-64),"        }
        return result;
","        }
        return result.toString().trim();
",REPLACE,0.31622776,GEN_STRING,,YES,,,,,
82450,Bank,(34-34;66-67),"
","
    /** Id order. */
",INSERT,null,,,,,,,,
82450,Bank,(35-36;68-69),"    public String getCustomersInfoByIdOrder() {
        String result = """";
","    public String getCustomersInfoByIdOrder() {
        StringBuilder result = new StringBuilder();
",REPLACE,0.31622776,,,,,,,,
82450,Bank,(47-48;80-81),"        for (Customer customer : customerList) {
            result += customer.getCustomerInfo() + ""n"";
","        for (Customer customer : customerList) {
            result.append(customer.getCustomerInfo()).append(""n"");
",REPLACE,0.31622776,,,,,,,,
82450,Bank,(49-50;82-83),"        }
        return result;
","        }
        return result.toString().trim();
",REPLACE,0.31622776,GEN_STRING,,YES,,,,,
82450,Bank,(56-56;89-90),"}
","}
 
",INSERT,null,,,,,,,,
82450,Account,(32-32;36-38),"            throw new InsufficientFundsException(amount);
","            throw new InsufficientFundsException(amount);
        } else {
            balance -= amount;
",INSERT,null,,,,,,,,
82450,Account,(35-35;41-42),"
","
    /** Deposit. */
",INSERT,null,,,NO,,,,,
82450,Account,(39-39;46-48),"            throw new InvalidFundingAmountException(amount);
","            throw new InvalidFundingAmountException(amount);
        } else {
            balance += amount;
",INSERT,null,INSERT_CODE,,,,,,,
82450,Account,(46-46;55-56),"
","
    /** Transaction history. */
",INSERT,null,,,NO,,,,,
82450,Account,(47-48;57-59),"    public String getTransactionHistory() {
        String result = ""L?ch s? gioa d?ch c?a t?i kho?n "" + accountNumber + ""n"";
","    public String getTransactionHistory() {
        StringBuilder result = new StringBuilder(
                ""L?ch s? giao d?ch c?a t?i kho?n "" + accountNumber + "":n"");
",REPLACE,0.4472136,GEN_STRING,,YES,,,,,
82450,Account,(49-50;60-61),"        for (Transaction transaction : transactionList) {
            result += transaction.getTransactionSummary() + ""n"";
","        for (Transaction transaction : transactionList) {
            result.append(transaction.getTransactionSummary()).append(""n"");
",REPLACE,0.4472136,,,,,,,,
82450,Account,(51-52;62-63),"        }
        return result;
","        }
        return result.toString().trim();
",REPLACE,0.4472136,GEN_STRING,,YES,,,,,
82450,CheckingAccount,(11-11;11-12),"        try {
","        try {
            double oldBalance = balance;
",INSERT,null,INSERT_CODE,,,,,,,
82450,CheckingAccount,(12-13;13-16),"            doWithdrawing(amount);
        } catch (InsufficientFundsException e) {
","            doWithdrawing(amount);
            addTransaction(new Transaction(Transaction.TYPE_WITHDRAW_CHECKING,
                    amount, oldBalance, balance));
        } catch (InsufficientFundsException | InvalidFundingAmountException e) {
",REPLACE,0.4472136,INSERT_CODE,,,,,,,
82450,CheckingAccount,(20-20;23-24),"        try {
","        try {
            double oldBalance = balance;
",INSERT,null,INSERT_CODE,,,,,,,
82450,CheckingAccount,(21-21;25-28),"            doDepositing(amount);
","            doDepositing(amount);
            addTransaction(new Transaction(Transaction.TYPE_DEPOSIT_CHECKING,
                    amount, oldBalance, balance));

",INSERT,null,INSERT_CODE,,,,,,,
82450,CheckingAccount,(26-26;33-34),"}
","}
 
",INSERT,null,,,,,,,,
82450,SavingsAccount,(18-18;39-40),"}
","}
 
",INSERT,null,,,,,,,,
82862,Transaction,(46-48;46-49),"        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + initialBalance
                + "". S? ti?n: $"" + amount + "". S? d? cu?i: $"" + finalBalance + ""."";
","        return ""- Ki?u giao d?ch: "" + getTransactionTypeString(type)
                + "". S? d? ban ??u: $"" + String.format(""%.2f"", initialBalance)
                + "". S? ti?n: $"" + String.format(""%.2f"", amount)
                + "". S? d? cu?i: $"" + String.format(""%.2f"", finalBalance) + ""."";
",REPLACE,0.2182179,GEN_STRING,,YES,,,,,
82670,Account,(0-91;0-92),"import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 02/12/2020.
 */
public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {

    }

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * withdraw.
     * @param amount a
     * @throws InvalidFundingAmountException e
     * @throws InsufficientFundsException e
     */
    public void doWithdrawing(double amount)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else if (amount > balance) {
            throw new InsufficientFundsException(amount);
        } else {
            balance -= amount;
        }
    }

    /**
     * deposit.
     * @param amount a
     * @throws InvalidFundingAmountException e
     */
    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else {
            balance += amount;
        }
    }

    public abstract void withdraw(double amount);

    public abstract void deposit(double amount);

    /**
     * get history.
     * @return history
     */
    public String getTransactionHistory() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append(""L?ch s? giao d?ch c?a t?i kho?n "")
                .append(accountNumber).append("":"").append('n');

        for (Transaction transaction : transactionList) {
            stringBuilder.append(transaction.getTransactionSummary()).append('n');
        }

        return stringBuilder.toString();
    }

    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    @Override
    public boolean equals(Object obj) {
        return accountNumber == ((Account) obj).accountNumber;
    }
}
","import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 02/12/2020.
 */
public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {

    }

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * withdraw.
     * @param amount a
     * @throws InvalidFundingAmountException e
     * @throws InsufficientFundsException e
     */
    public void doWithdrawing(double amount)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else if (amount > balance) {
            throw new InsufficientFundsException(amount);
        } else {
            balance -= amount;
        }
    }

    /**
     * deposit.
     * @param amount a
     * @throws InvalidFundingAmountException e
     */
    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else {
            balance += amount;
        }
    }

    public abstract void withdraw(double amount);

    public abstract void deposit(double amount);

    /**
     * get history.
     * @return history
     */
    public String getTransactionHistory() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append(""L?ch s? giao d?ch c?a t?i kho?n "")
                .append(accountNumber).append("":"").append('n');

        for (Transaction transaction : transactionList) {
            stringBuilder.append(transaction.getTransactionSummary()).append('n');
        }

        return stringBuilder.toString();
    }

    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    @Override
    public boolean equals(Object obj) {
        return accountNumber == ((Account) obj).accountNumber;
    }
}
 
",REPLACE,0.4472136,,,NO,,,,,
82670,Customer,(0-52;0-52),"import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 02/12/2020.
 */
public class Customer {
    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    public Customer() {

    }

    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName.trim();
    }

    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
    }

    public void addAccount(Account account) {
        accountList.add(account);
    }

    public void removeAccount(Account account) {
        accountList.remove(account);
    }

    public long getIdNumber() {
        return idNumber;
    }

    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public List<Account> getAccountList() {
        return accountList;
    }
}
","import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 02/12/2020.
 */
public class Customer {
    private long idNumber;
    private String fullName;
    private List<Account> accountList = new ArrayList<>();

    public Customer() {

    }

    public Customer(long idNumber, String fullName) {
        this.idNumber = idNumber;
        this.fullName = fullName.trim();
    }

    public String getCustomerInfo() {
        return ""S? CMND: "" + idNumber + "". H? t?n: "" + fullName + ""."";
    }

    public void addAccount(Account account) {
        accountList.add(account);
    }

    public void removeAccount(Account account) {
        accountList.remove(account);
    }

    public long getIdNumber() {
        return idNumber;
    }

    public void setIdNumber(long idNumber) {
        this.idNumber = idNumber;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public List<Account> getAccountList() {
        return accountList;
    }
}
",REPLACE,0.70710677,,,,,,,,
82670,Bank,(0-103;0-104),"import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

/**
 * Created by CCNE on 02/12/2020.
 */
public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * read customer list.
     * @param inputStream input
     */
    public void readCustomerList(InputStream inputStream) {
        Scanner scanner = new Scanner(inputStream);

        List<String> stringList = new ArrayList<>();

        while (scanner.hasNextLine()) {
            stringList.add(scanner.nextLine());
        }

        Customer customer = new Customer();
        Account account = null;

        for (String string : stringList) {
            String[] strings = string.split("" "");

            if (strings[0].length() == 10) {
                if (strings[1].equals(Account.CHECKING)) {
                    account = new CheckingAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                } else if (strings[1].equals(Account.SAVINGS)) {
                    account = new SavingsAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                }
                customer.addAccount(account);
            } else {
                StringBuilder fullName = new StringBuilder();

                for (int i = 0; i < strings.length - 1; i++) {
                    fullName.append(strings[i]).append("" "");
                }

                customer = new Customer(Integer.parseInt(strings[strings.length - 1]),
                        fullName.toString());

                customerList.add(customer);
            }
        }
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByNameOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        customerList.sort(new NameOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString();
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByIdOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        customerList.sort(new IdOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString();
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    private class IdOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return (int) (o1.getIdNumber() - o2.getIdNumber());
        }
    }

    private class NameOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return o1.getFullName().compareTo(o2.getFullName());
        }
    }
}
","import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

/**
 * Created by CCNE on 02/12/2020.
 */
public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * read customer list.
     * @param inputStream input
     */
    public void readCustomerList(InputStream inputStream) {
        Scanner scanner = new Scanner(inputStream);

        List<String> stringList = new ArrayList<>();

        while (scanner.hasNextLine()) {
            stringList.add(scanner.nextLine());
        }

        Customer customer = new Customer();
        Account account = null;

        for (String string : stringList) {
            String[] strings = string.split("" "");

            if (strings[0].length() == 10) {
                if (strings[1].equals(Account.CHECKING)) {
                    account = new CheckingAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                } else if (strings[1].equals(Account.SAVINGS)) {
                    account = new SavingsAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                }
                customer.addAccount(account);
            } else {
                StringBuilder fullName = new StringBuilder();

                for (int i = 0; i < strings.length - 1; i++) {
                    fullName.append(strings[i]).append("" "");
                }

                customer = new Customer(Integer.parseInt(strings[strings.length - 1]),
                        fullName.toString());

                customerList.add(customer);
            }
        }
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByNameOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        customerList.sort(new NameOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString().trim();
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByIdOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        customerList.sort(new IdOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString().trim();
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    private class IdOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return (int) (o1.getIdNumber() - o2.getIdNumber());
        }
    }

    private class NameOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return o1.getFullName().compareTo(o2.getFullName());
        }
    }
}
 
",REPLACE,0.6030227,,,,,,,,
82670,SavingsAccount,(0-34;0-39),"/**
 * Created by CCNE on 02/12/2020.
 */
public class SavingsAccount extends Account {
    public SavingsAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    public void withdraw(double amount) {
        if (balance - amount < 5000) {
            System.out.println(""Kh?ng ?? s? d? t?i thi?u"");
            return;
        } else if (amount > 1000) {
            System.out.println(""V??t qu? s? ti?n c? th? r?t"");
            return;
        } else {
            try {
                doWithdrawing(amount);
            } catch (InvalidFundingAmountException | InsufficientFundsException exception) {
                System.out.println(exception.getMessage());
            }
        }
    }

    @Override
    public void deposit(double amount) {
        try {
            doDepositing(amount);
        } catch (InvalidFundingAmountException exception) {
            System.out.println(exception.getMessage());
        }
    }
}
","/**
 * Created by CCNE on 02/12/2020.
 */
public class SavingsAccount extends Account {
    public SavingsAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    public void withdraw(double amount) {
        if (balance - amount < 5000) {
            System.out.println(""Kh?ng ?? s? d? t?i thi?u"");
            return;
        } else if (amount > 1000) {
            System.out.println(""V??t qu? s? ti?n c? th? r?t"");
            return;
        } else {
            try {
                doWithdrawing(amount);
                transactionList.add(new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS,
                        amount, balance + amount, balance));
            } catch (InvalidFundingAmountException | InsufficientFundsException exception) {
                System.out.println(exception.getMessage());
            }
        }
    }

    @Override
    public void deposit(double amount) {
        try {
            doDepositing(amount);
            transactionList.add(new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS,
                    amount, balance - amount, balance));
        } catch (InvalidFundingAmountException exception) {
            System.out.println(exception.getMessage());
        }
    }
}
 
",REPLACE,0.35355338,,,,,,,,
82670,CheckingAccount,(0-26;0-31),"/**
 * Created by CCNE on 02/12/2020.
 */
public class CheckingAccount extends Account {
    public CheckingAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    public void withdraw(double amount) {
        try {
            doWithdrawing(amount);
        } catch (InvalidFundingAmountException | InsufficientFundsException exception) {
            System.out.println(exception.getMessage());
        }
    }

    @Override
    public void deposit(double amount) {
        try {
            doDepositing(amount);
        } catch (InvalidFundingAmountException exception) {
            System.out.println(exception.getMessage());
        }
    }
}
","/**
 * Created by CCNE on 02/12/2020.
 */
public class CheckingAccount extends Account {
    public CheckingAccount(long accountNumber, double balance) {
        super(accountNumber, balance);
    }

    @Override
    public void withdraw(double amount) {
        try {
            doWithdrawing(amount);
            transactionList.add(new Transaction(Transaction.TYPE_WITHDRAW_CHECKING,
                    amount, balance + amount, balance));
        } catch (InvalidFundingAmountException | InsufficientFundsException exception) {
            System.out.println(exception.getMessage());
        }
    }

    @Override
    public void deposit(double amount) {
        try {
            doDepositing(amount);
            transactionList.add(new Transaction(Transaction.TYPE_DEPOSIT_CHECKING,
                    amount, balance - amount, balance));
        } catch (InvalidFundingAmountException exception) {
            System.out.println(exception.getMessage());
        }
    }
}
 
",REPLACE,0.35355338,,,,,,,,
82651,Bank,(0-101;0-104),"import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

/**
 * Created by CCNE on 02/12/2020.
 */
public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * read customer list.
     * @param inputStream input
     */
    public void readCustomerList(InputStream inputStream) {
        Scanner scanner = new Scanner(inputStream);

        List<String> stringList = new ArrayList<>();

        while (scanner.hasNextLine()) {
            stringList.add(scanner.nextLine());
        }

        Customer customer = new Customer();
        Account account = null;

        for (String string : stringList) {
            String[] strings = string.split("" "");

            if (strings[0].length() == 10) {
                if (strings[1].equals(Account.CHECKING)) {
                    account = new CheckingAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                } else if (strings[1].equals(Account.SAVINGS)) {
                    account = new SavingsAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                }
                customer.addAccount(account);
            } else {
                StringBuilder fullName = new StringBuilder();

                for (int i = 0; i < strings.length - 1; i++) {
                    fullName.append(strings[i]).append("" "");
                }

                customer = new Customer(Integer.parseInt(strings[strings.length - 1]),
                        fullName.toString());
            }
        }
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByNameOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        //customerList.sort(new NameOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString();
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByIdOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        //customerList.sort(new IdOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString();
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    private class IdOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return (int) (o1.getIdNumber() - o2.getIdNumber());
        }
    }

    private class NameOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return o1.getFullName().compareTo(o2.getFullName());
        }
    }
}
","import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

/**
 * Created by CCNE on 02/12/2020.
 */
public class Bank {
    private List<Customer> customerList = new ArrayList<>();

    /**
     * read customer list.
     * @param inputStream input
     */
    public void readCustomerList(InputStream inputStream) {
        Scanner scanner = new Scanner(inputStream);

        List<String> stringList = new ArrayList<>();

        while (scanner.hasNextLine()) {
            stringList.add(scanner.nextLine());
        }

        Customer customer = new Customer();
        Account account = null;

        for (String string : stringList) {
            String[] strings = string.split("" "");

            if (strings[0].length() == 10) {
                if (strings[1].equals(Account.CHECKING)) {
                    account = new CheckingAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                } else if (strings[1].equals(Account.SAVINGS)) {
                    account = new SavingsAccount(Long.parseLong(strings[0]),
                            Double.parseDouble(strings[2]));
                }
                customer.addAccount(account);
            } else {
                StringBuilder fullName = new StringBuilder();

                for (int i = 0; i < strings.length - 1; i++) {
                    fullName.append(strings[i]).append("" "");
                }

                customer = new Customer(Integer.parseInt(strings[strings.length - 1]),
                        fullName.toString());

                customerList.add(customer);
            }
        }
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByNameOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        customerList.sort(new NameOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString().trim();
    }

    /**
     * get info.
     * @return info
     */
    public String getCustomersInfoByIdOrder() {
        StringBuilder stringBuilder = new StringBuilder();

        customerList.sort(new IdOrder());

        for (Customer customer : customerList) {
            stringBuilder.append(customer.getCustomerInfo()).append('n');
        }
        return stringBuilder.toString().trim();
    }

    public List<Customer> getCustomerList() {
        return customerList;
    }

    private class IdOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return (int) (o1.getIdNumber() - o2.getIdNumber());
        }
    }

    private class NameOrder implements Comparator<Customer> {
        @Override
        public int compare(Customer o1, Customer o2) {
            return o1.getFullName().compareTo(o2.getFullName());
        }
    }
}
 
",REPLACE,0.6741999,,,,,,,,
82645,Account,(0-90;0-92),"import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 02/12/2020.
 */
public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {

    }

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * withdraw.
     * @param amount a
     * @throws InvalidFundingAmountException e
     * @throws InsufficientFundsException e
     */
    public void doWithdrawing(double amount)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else if (amount > balance) {
            throw new InsufficientFundsException(amount);
        } else {
            balance -= amount;
        }
    }

    /**
     * deposit.
     * @param amount a
     * @throws InvalidFundingAmountException e
     */
    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else {
            balance += amount;
        }
    }

    public abstract void withdraw(double amount);

    public abstract void deposit(double amount);

    /**
     * get history.
     * @return history
     */
    public String getTransactionHistory() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append(""L?ch s? giao d?ch c?a t?i kho?n "").append(accountNumber).append("":"").append('\n');

        for (Transaction transaction : transactionList) {
            stringBuilder.append(transaction.getTransactionSummary()).append('\n');
        }

        return stringBuilder.toString();
    }

    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    @Override
    public boolean equals(Object obj) {
        return accountNumber == ((Account) obj).accountNumber;
    }
}
","import java.util.ArrayList;
import java.util.List;

/**
 * Created by CCNE on 02/12/2020.
 */
public abstract class Account {
    public static final String CHECKING = ""CHECKING"";
    public static final String SAVINGS = ""SAVINGS"";

    protected long accountNumber;
    protected double balance;
    protected List<Transaction> transactionList = new ArrayList<>();

    public Account() {

    }

    public Account(long accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public long getAccountNumber() {
        return accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    /**
     * withdraw.
     * @param amount a
     * @throws InvalidFundingAmountException e
     * @throws InsufficientFundsException e
     */
    public void doWithdrawing(double amount)
            throws InvalidFundingAmountException, InsufficientFundsException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else if (amount > balance) {
            throw new InsufficientFundsException(amount);
        } else {
            balance -= amount;
        }
    }

    /**
     * deposit.
     * @param amount a
     * @throws InvalidFundingAmountException e
     */
    public void doDepositing(double amount) throws InvalidFundingAmountException {
        if (amount < 0) {
            throw new InvalidFundingAmountException(amount);
        } else {
            balance += amount;
        }
    }

    public abstract void withdraw(double amount);

    public abstract void deposit(double amount);

    /**
     * get history.
     * @return history
     */
    public String getTransactionHistory() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append(""L?ch s? giao d?ch c?a t?i kho?n "")
                .append(accountNumber).append("":"").append('\n');

        for (Transaction transaction : transactionList) {
            stringBuilder.append(transaction.getTransactionSummary()).append('\n');
        }

        return stringBuilder.toString();
    }

    public void addTransaction(Transaction transaction) {
        transactionList.add(transaction);
    }

    @Override
    public boolean equals(Object obj) {
        return accountNumber == ((Account) obj).accountNumber;
    }
}
 
",REPLACE,0.4,,,,,,,,
