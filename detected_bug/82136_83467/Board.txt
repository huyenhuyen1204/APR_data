@@ -1,14 +1,20 @@
 import java.util.ArrayList;
 
 public class Board {
-    private static final int WIDTH = 8;
-    private static final int HIEGHT = 8;
+    public static final int WIDTH = 8;
+    public static final int HEIGHT = 8;
     private ArrayList<Piece> pieces = new ArrayList<>();
 
     public Board() {
 
     }
 
+    /**
+     * ham.
+     * @param x ham.
+     * @param y ham.
+     * @return ham.
+     */
     public boolean validate(int x, int y) {
         if (1 <= x && x <= 8 && 1 <= y && y <= 8) {
             return true;
@@ -16,10 +22,22 @@
         return false;
     }
 
+    /**
+     * ham.
+     * @param piece ham.
+     */
     public void addPiece(Piece piece) {
-        pieces.add(piece);
+        if (validate(piece.getCoordinatesX(), piece.getCoordinatesY()) && !pieces.contains(piece)) {
+              pieces.add(piece);
+        }
     }
 
+    /**
+     * ham.
+     * @param x ham.
+     * @param y ham.
+     * @return ham.
+     */
     public Piece getAt(int x, int y) {
         for (Piece p : pieces) {
             if (p.getCoordinatesX() == x && p.getCoordinatesY() == y) {
@@ -29,13 +47,13 @@
         return null;
     }
 
+    /**
+     * ham.
+     * @param x ham.
+     * @param y ham.
+     */
     public void removeAt(int x, int y) {
-        pieces.removeIf(piece -> (piece.getCoordinatesY() == y && piece.getCoordinatesX() == x));
-//        for (Piece p : pieces) {
-//            if (p.getCoordinatesX() == x && p.getCoordinatesY() == y) {
-//                pieces.remove(p);
-//            }
-//        }
+        pieces.removeIf(piece -> (piece.getCoordinatesX() == x && piece.getCoordinatesY() == y));
     }
 
     public ArrayList<Piece> getPieces() {
