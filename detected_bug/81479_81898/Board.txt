@@ -3,16 +3,24 @@
 public class Board {
     public static final int WIDTH = 8;
     public static final int HEIGHT = 8;
-    ArrayList<Piece> pieces = new ArrayList<>();
+    private ArrayList<Piece> pieces = new ArrayList<>();
 
     Board() {
 
     }
+
+    /**
+     * gdfgdf.
+     * @return
+     */
     public boolean validate(int x, int y) {
         return (x >= 1 && x <= 8
                 && y >= 1 && y <= 8) ? true : false;
     }
 
+    /**
+     * fasfa.
+     */
     public void addPiece(Piece piece) {
         boolean check = false;
         if (validate(piece.getCoordinatesX(), piece.getCoordinatesY())) {
@@ -29,18 +37,25 @@
         }
     }
 
+    /**
+     * gfd.
+     * @return
+     */
     public Piece getAt(int x, int y) {
         for (int i = 0; i < pieces.size(); i++) {
-            if(pieces.get(i).getCoordinatesX() == x && pieces.get(i).getCoordinatesY() == y) {
+            if (pieces.get(i).getCoordinatesX() == x && pieces.get(i).getCoordinatesY() == y) {
                 return pieces.get(i);
             }
         }
         return null;
     }
 
+    /**
+     * gdfgdf.
+     */
     public void removeAt(int x, int y) {
         for (int i = 0; i < pieces.size(); i++) {
-            if(pieces.get(i).getCoordinatesX() == x && pieces.get(i).getCoordinatesY() == y) {
+            if (pieces.get(i).getCoordinatesX() == x && pieces.get(i).getCoordinatesY() == y) {
                 pieces.remove(i);
                 break;
             }
@@ -54,4 +69,6 @@
     public ArrayList<Piece> getPieces() {
         return pieces;
     }
+
+
 }
