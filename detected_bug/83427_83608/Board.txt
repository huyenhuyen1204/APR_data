@@ -5,6 +5,9 @@
     public static final int HEIGHT = 8;
     private ArrayList<Piece> pieces = new ArrayList<>();
 
+    /**
+     * alo.
+     */
     public boolean validate(int x, int y) {
         if (x < 1 || y < 1 || x > 8 || y > 8) {
             return false;
@@ -12,18 +15,22 @@
         return true;
     }
 
+    /**
+     * alo.
+     */
+
     public void addPiece(Piece piece) {
-        for (Piece a : pieces) {
-            if (a.getCoordinatesX() == piece.getCoordinatesX()
-                    && a.getCoordinatesY() == piece.getCoordinatesX()) {
-                return;
-            }
-        }
-        if (validate(piece.getCoordinatesX(), piece.getCoordinatesY())) {
+
+        if (validate(piece.getCoordinatesX(), piece.getCoordinatesY())
+                && getAt(piece.getCoordinatesX(), piece.getCoordinatesY()) == null) {
             pieces.add(piece);
         }
+
     }
 
+    /**
+     * alo.
+     */
     public Piece getAt(int x, int y) {
         for (Piece a : pieces) {
             if (a.getCoordinatesX() == x && a.getCoordinatesY() == y) {
@@ -33,6 +40,10 @@
         return null;
     }
 
+    /**
+     * alo.
+     */
+
     public void removeAt(int x, int y) {
         for (int i = 0; i < pieces.size(); i++) {
             if (pieces.get(i).getCoordinatesX() == x && pieces.get(i).getCoordinatesY() == y) {
@@ -42,10 +53,18 @@
         }
     }
 
+    /**
+     * alo.
+     */
+
     public ArrayList<Piece> getPieces() {
         return pieces;
     }
 
+    /**
+     * alo.
+     */
+
     public void setPieces(ArrayList<Piece> pieces) {
         this.pieces = pieces;
     }
