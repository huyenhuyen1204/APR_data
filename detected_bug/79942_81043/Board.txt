@@ -2,11 +2,12 @@
 
 public class Board {
 
-    public final int WIDTH = 8;
-    public final int HEIGHT = 8;
+    public static final int WIDTH = 8;
+    public static final int HEIGHT = 8;
     private ArrayList<Piece> pieces;
 
     public Board() {
+        pieces = new ArrayList<>(0);
     }
 
     public ArrayList<Piece> getPieces() {
@@ -17,6 +18,9 @@
         this.pieces = pieces;
     }
 
+    /**
+     * cmt.
+     */
     public boolean validate(int x, int y) {
         if (1 <= x && x <= 8 && 1 <= y && y <= 8) {
             return true;
@@ -24,22 +28,43 @@
         return false;
     }
 
+    /**
+     * cmt.
+     */
     public void addPiece(Piece p) {
-        pieces.add(p);
+        boolean check = true;
+
+        if (pieces != null) {
+            for (Piece temp : pieces) {
+                if (!p.checkPosition(temp)) {
+                    check = false;
+                    break;
+                }
+            }
+        }
+        if (validate(p.getCoordinatesX(), p.getCoordinatesY()) && check) {
+            pieces.add(p);
+        }
     }
 
+    /**
+     * cmt.
+     */
     public Piece getAt(int x, int y) {
         for (Piece p : pieces) {
-            if (p.getX() == x && p.getY() == y) {
+            if (p.getCoordinatesX() == x && p.getCoordinatesY() == y) {
                 return p;
             }
         }
         return null;
     }
 
+    /**
+     * cmt.
+     */
     public void removeAt(int x, int y) {
         for (int i = 0; i < pieces.size(); i++) {
-            if (pieces.get(i).getX() == x && pieces.get(i).getY() == y) {
+            if (pieces.get(i).getCoordinatesX() == x && pieces.get(i).getCoordinatesY() == y) {
                 pieces.remove(i);
             }
         }
