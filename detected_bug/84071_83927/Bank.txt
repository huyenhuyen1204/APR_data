@@ -1,93 +1,116 @@
+import java.io.BufferedReader;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
-import java.util.Scanner;
-import java.util.Comparator;
 
-
-/**
- * class Bank.
- */
 public class Bank {
     private List<Customer> customerList = new ArrayList<>();
 
     /**
-     * readCustomerList.
-     * @param input .
+     * Javadoc.
      */
-    public void readCustomerList(InputStream input) {
-        Scanner scanner = new Scanner(input);
+    public boolean isNumber(String s) {
+        for (int i = 0; i < s.length(); ++i) {
+            if (s.charAt(i) > '9' || s.charAt(i) < '0') {
+                return false;
+            }
+        }
+        return true;
+    }
 
-        while (scanner.hasNextLine()) {
-            String[] words = scanner.nextLine().split(" ");
+    /**
+     * Javadoc.
+     */
+    public void readCustomerList(InputStream inputStream) {
+        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+        BufferedReader reader = new BufferedReader(inputStreamReader);
+        String line = "";
+        Customer customer = new Customer();
+        while (true) {
+            try {
+                if (((line = reader.readLine()) != null)) {
+                    String[] ss = line.split(" ");
+                    if (isNumber(ss[0])) {
+                        if (ss[1].equals("CHECKING")) {
+                            Account account = new CheckingAccount(Long.parseLong(ss[0]),
+                                    Double.parseDouble(ss[2]));
+                            customer.addAccount(account);
+                        } else {
+                            Account account = new SavingsAccount(Long.parseLong(ss[0]),
+                                    Double.parseDouble(ss[2]));
+                            customer.addAccount(account);
+                        }
+                    } else {
+                        String name = "";
+                        for (int i = 0; i < ss.length - 2; ++i) {
+                            name = name + ss[i] + " ";
+                        }
+                        name += ss[ss.length - 2];
+                        customer = new Customer(name, Long.parseLong(ss[ss.length - 1]));
+                        customerList.add(customer);
+                    }
+                } else {
+                    break;
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
 
-            if (words.length != 3) {
-                String name = String.join(" ",
-                        Arrays.copyOfRange(words, 0, words.length - 1));
-                long id = Long.parseLong(words[words.length - 1]);
-                customerList.add(new Customer(id, name));
-            } else {
+        }
+    }
 
-                long accountNumber = Long.parseLong(words[0]);
-                String accountType = words[1];
-                double accountBalance = Double.parseDouble(words[2]);
+    public List<Customer> getCustomerList() {
+        return customerList;
+    }
 
-                if (accountType.equals(Account.CHECKING)) {
-                    customerList.get(customerList.size() - 1)
-                            .addAccount(new CheckingAccount(accountNumber, accountBalance));
-                } else if (accountType.equals(Account.SAVINGS)){
-                    customerList.get(customerList.size() - 1)
-                            .addAccount(new SavingsAccount(accountNumber, accountBalance));
+    /**
+     * Javadoc.
+     */
+    public String getCustomersInfoByIdOrder() {
+        for (int i = 0; i < customerList.size(); ++i) {
+            for (int j = i + 1; j < customerList.size(); ++j) {
+                if (customerList.get(i).getIdNumber() > customerList.get(j).getIdNumber()) {
+                    Customer swap = customerList.get(i);
+                    customerList.set(i, customerList.get(j));
+                    customerList.set(j, swap);
                 }
             }
         }
+        String result = "";
+        for (int i = 0; i < customerList.size(); ++i) {
+            result = result + customerList.get(i).getCustomerInfo();
+            if (i != customerList.size() - 1) {
+                result += "\n";
+            }
+        }
+        return result;
     }
 
     /**
-     * getter.
-     * @return .
+     * Javadoc.
      */
     public String getCustomersInfoByNameOrder() {
-        List<Customer> nameOrder = new ArrayList<Customer>(customerList);
-        nameOrder.sort(new Comparator<Customer>() {
-            public int compare(Customer o1, Customer o2) {
-                return o1.getFullName().compareTo(o2.getFullName());
+        for (int i = 0; i < customerList.size(); ++i) {
+            for (int j = i + 1; j < customerList.size(); ++j) {
+                if (customerList.get(i).getFullName()
+                        .compareTo(customerList.get(j).getFullName()) > 0) {
+                    Customer swap = customerList.get(i);
+                    customerList.set(i, customerList.get(j));
+                    customerList.set(j, swap);
+                }
             }
-        });
-
-        StringBuilder result = new StringBuilder();
-        for (Customer customer : nameOrder) {
-            result.append(customer.getCustomerInfo()).append("\n");
         }
-        return result.toString().trim();
-    }
-
-    /**
-     * getter.
-     * @return .
-     */
-    public String getCustomersInfoByIdOrder() {
-        List<Customer> idOrder = new ArrayList<Customer>(customerList);
-        idOrder.sort(new Comparator<Customer>() {
-            @Override
-            public int compare(Customer o1, Customer o2) {
-                return (int) (o1.getIdNumber() - o2.getIdNumber());
+        String result = "";
+        for (int i = 0; i < customerList.size(); ++i) {
+            result = result + customerList.get(i).getCustomerInfo();
+            if (i != customerList.size() - 1) {
+                result += "\n";
             }
-        });
-
-        StringBuilder result = new StringBuilder();
-        for (Customer customer : idOrder) {
-            result.append(customer.getCustomerInfo()).append("\n");
         }
-        return result.toString().trim();
-    }
-
-    /**
-     * getter.
-     * @return .
-     */
-    public List<Customer> getCustomerList() {
-        return customerList;
+        return result;
     }
 }
