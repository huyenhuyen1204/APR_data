@@ -1,135 +1,109 @@
 import java.util.ArrayList;
 import java.util.List;
 
-/**
- * abstract class Account.
- */
 public abstract class Account {
-
     public static final String CHECKING = "CHECKING";
     public static final String SAVINGS = "SAVINGS";
-
     protected long accountNumber;
     protected double balance;
     protected List<Transaction> transactionList = new ArrayList<>();
 
-    /**
-     * constructor.
-     */
     public Account() {
 
     }
 
     /**
-     * constructor.
+     * Javadoc.
      */
     public Account(long accountNumber, double balance) {
         this.accountNumber = accountNumber;
         this.balance = balance;
     }
 
-    /**
-     * getter.
-     * @return .
-     */
     public long getAccountNumber() {
         return accountNumber;
     }
 
-    /**
-     * getter.
-     * @return .
-     */
     public double getBalance() {
         return balance;
     }
 
     /**
-     * abstract method withdraw.
-     * @param amount .
+     * Javadoc.
      */
-    public abstract void withdraw(double amount);
-
-    /**
-     * abstract method deposit.
-     * @param amount .
-     */
-    public abstract void deposit(double amount);
-
-    /**
-     * doWithdrawing.
-     * @param amount .
-     * @throws InsufficientFundsException .
-     */
-    public void doWithdrawing(double amount)
-            throws InsufficientFundsException, InvalidFundingAmountException {
-        if (amount < 0) {
-            throw new InvalidFundingAmountException(amount);
-        }
-        if (balance < amount) {
-            throw new InsufficientFundsException(amount);
+    public void doWithdrawing(double money) throws BankException {
+        if (money < 0) {
+            throw new InvalidFundingAmountException(money);
+        } else if (money > balance) {
+            throw new InsufficientFundsException(money);
         }
         if (this instanceof SavingsAccount) {
-            if (balance - amount < 5000) {
-                throw new InvalidFundingAmountException(amount);
-            }
-            if (amount > 1000) {
-                throw new InsufficientFundsException(amount);
+            if (money > 1000) {
+                throw new InvalidFundingAmountException(money);
+            } else if (balance - money < 5000) {
+                throw new InsufficientFundsException(money);
             }
         }
+        Transaction transaction;
+        if (this instanceof CheckingAccount) {
+            transaction = new Transaction(Transaction.TYPE_WITHDRAW_CHECKING, money,
+                    balance, balance - money);
+        } else {
+            transaction = new Transaction(Transaction.TYPE_WITHDRAW_SAVINGS, money,
+                    balance, balance - money);
+        }
+        transactionList.add(transaction);
+        balance -= money;
     }
 
     /**
-     * doDepositing.
-     * @param amount .
-     * @throws InsufficientFundsException .
+     * Javadoc.
      */
-    public void doDepositing(double amount)
-            throws InsufficientFundsException, InvalidFundingAmountException {
-        if (amount < 0) {
-            throw new InvalidFundingAmountException(amount);
+    public void doDepositing(double money) throws BankException {
+        if (money < 0) {
+            throw new InvalidFundingAmountException(money);
         }
+        Transaction transaction;
+        if (this instanceof CheckingAccount) {
+            transaction = new Transaction(Transaction.TYPE_DEPOSIT_CHECKING, money,
+                    balance, balance + money);
+        } else {
+            transaction = new Transaction(Transaction.TYPE_DEPOSIT_SAVINGS, money,
+                    balance, balance + money);
+        }
+        transactionList.add(transaction);
+        balance += money;
     }
 
+    public abstract void withdraw(double money);
+
+    public abstract void deposit(double money);
+
     /**
-     * getter.
-     * @return .
+     * Javadoc.
      */
     public String getTransactionHistory() {
-        StringBuilder result =
-                new StringBuilder("Lịch sử giao dịch của tài khoản "
-                + accountNumber + ":\n");
+        String s = "Lịch sử giao dịch của tài khoản " + accountNumber + ":";
         for (Transaction transaction : transactionList) {
-            result.append(transaction.getTransactionSummary())
-                    .append("\n")
-            ;
+            s = s + "\n" + transaction.getTransactionSummary();
         }
-        return result.toString().trim();
+        return s;
     }
 
     /**
-     * addTransaction.
-     * @param transaction .
+     * Javadoc.
      */
-    public void addTransaction(Transaction transaction) {
-        transactionList.add(transaction);
+    public void addTransaction(Transaction a) {
+        transactionList.add(a);
     }
 
     /**
-     * equals.
-     * @param o .
-     * @return .
+     * Javadoc.
      */
-    @Override
     public boolean equals(Object o) {
-        if (this == o) {
+        if (this.accountNumber == ((Account) o).accountNumber) {
             return true;
         }
-        if (o == null || getClass() != o.getClass()) {
-            return false;
-        }
-        Account account = (Account) o;
-        return accountNumber == account.accountNumber;
+        return false;
     }
-
-}
\ No newline at end of file
+}
