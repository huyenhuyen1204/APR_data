@@ -17,7 +17,7 @@
     /** abc. */
     public boolean is_same(int x, int y) {
         for (int i = 0; i < pieces.size(); ++i) {
-            if (x == pieces.get(i).getX() && y == pieces.get(i).getY()) {
+            if (x == pieces.get(i).getCoordinatesX() && y == pieces.get(i).getCoordinatesY()) {
                 return true;
             }
         }
@@ -26,8 +26,8 @@
 
     /** abc. */
     public void addPiece(Piece piece) {
-        if (validate(piece.getX(), piece.getY())) {
-            if (!is_same(piece.getX(), piece.getY())) {
+        if (validate(piece.getCoordinatesX(), piece.getCoordinatesY())) {
+            if (!is_same(piece.getCoordinatesX(), piece.getCoordinatesY())) {
                 pieces.add(piece);
             }
         }
@@ -36,7 +36,7 @@
     /** abc. */
     public Piece getAt(int x, int y) {
         for (int i = 0; i < pieces.size(); ++i) {
-            if (x == pieces.get(i).getX() && y == pieces.get(i).getY()) {
+            if (x == pieces.get(i).getCoordinatesX() && y == pieces.get(i).getCoordinatesY()) {
                 return pieces.get(i);
             }
         }
@@ -46,7 +46,7 @@
     /** abc. */
     public void removeAt(int x, int y) {
         for (int i = 0; i < pieces.size(); ++i) {
-            if (x == pieces.get(i).getX() && y == pieces.get(i).getY()) {
+            if (x == pieces.get(i).getCoordinatesX() && y == pieces.get(i).getCoordinatesY()) {
                 pieces.remove(pieces.get(i));
             }
         }
@@ -61,3 +61,4 @@
     }
 
 }
+ 
\ No newline at end of file
